
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800100  00000d3c  00000db0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d3c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000e72  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ed0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000f10  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001963  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fcc  00000000  00000000  000029a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a9e  00000000  00000000  0000396f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000204  00000000  00000000  00004410  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000073f  00000000  00000000  00004614  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000791  00000000  00000000  00004d53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  000054e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ec e3       	ldi	r30, 0x3C	; 60
  c0:	fd e0       	ldi	r31, 0x0D	; 13
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 3c       	cpi	r26, 0xC2	; 194
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 f5 01 	call	0x3ea	; 0x3ea <main>
  d2:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <delay_1_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	RET
  ea:	08 95       	ret

000000ec <delay_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	DEC R24				; 1 cycle
  fc:	8a 95       	dec	r24
	CPI R24, 0			; more loops to do? 1 cycle
  fe:	80 30       	cpi	r24, 0x00	; 0
	BRNE delay_micros	;	continue!
 100:	a9 f7       	brne	.-22     	; 0xec <delay_micros>
	RET
 102:	08 95       	ret

00000104 <delay_ms>:
;==============================================================================
; Delay of X ms
;	LDI + RCALL = 4 cycles
;==============================================================================
delay_ms:
	MOV R18, R24
 104:	28 2f       	mov	r18, r24

00000106 <loop_dms>:
loop_dms:
	LDI R24, 250
 106:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 108:	f1 df       	rcall	.-30     	; 0xec <delay_micros>
	LDI R24, 250
 10a:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 10c:	ef df       	rcall	.-34     	; 0xec <delay_micros>
	LDI R24, 250
 10e:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 110:	ed df       	rcall	.-38     	; 0xec <delay_micros>
	LDI R24, 250
 112:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 114:	eb df       	rcall	.-42     	; 0xec <delay_micros>
	DEC R18
 116:	2a 95       	dec	r18
	CPI R18, 0			; more loops to do?
 118:	20 30       	cpi	r18, 0x00	; 0
	BRNE loop_dms		;	continue!
 11a:	a9 f7       	brne	.-22     	; 0x106 <loop_dms>
	RET
 11c:	08 95       	ret

0000011e <delay_s>:

delay_s:
	MOV R18, R24
 11e:	28 2f       	mov	r18, r24

00000120 <loop_ds>:
loop_ds:
	PUSH R18
 120:	2f 93       	push	r18
	LDI R24, 250
 122:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 124:	ef df       	rcall	.-34     	; 0x104 <delay_ms>
	LDI R24, 250
 126:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 128:	ed df       	rcall	.-38     	; 0x104 <delay_ms>
	LDI R24, 250
 12a:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 12c:	eb df       	rcall	.-42     	; 0x104 <delay_ms>
	LDI R24, 250
 12e:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 130:	e9 df       	rcall	.-46     	; 0x104 <delay_ms>
	POP R18
 132:	2f 91       	pop	r18
	DEC R18
 134:	2a 95       	dec	r18
	CPI R18, 0			; more loops to do?
 136:	20 30       	cpi	r18, 0x00	; 0
	BRNE loop_dms		;	continue!
 138:	31 f7       	brne	.-52     	; 0x106 <loop_dms>
	RET
 13a:	08 95       	ret

0000013c <delay_1_s>:

delay_1_s:
	LDI R24, 250
 13c:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 13e:	e2 df       	rcall	.-60     	; 0x104 <delay_ms>
	LDI R24, 250
 140:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 142:	e0 df       	rcall	.-64     	; 0x104 <delay_ms>
	LDI R24, 250
 144:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 146:	de df       	rcall	.-68     	; 0x104 <delay_ms>
	LDI R24, 250
 148:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 14a:	dc df       	rcall	.-72     	; 0x104 <delay_ms>
 14c:	08 95       	ret

0000014e <play_guess_nr>:
 *
 * parameter:
 *	rnd_nr: random number (to be guessed)
 */
void play_guess_nr(uint16_t rnd_nr)
{
 14e:	ef 92       	push	r14
 150:	ff 92       	push	r15
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	61 97       	sbiw	r28, 0x11	; 17
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	f8 94       	cli
 164:	de bf       	out	0x3e, r29	; 62
 166:	0f be       	out	0x3f, r0	; 63
 168:	cd bf       	out	0x3d, r28	; 61
 16a:	7c 01       	movw	r14, r24
	uint16_t nr_of_guesses = 0;
	// show initial message, before game starts.
	output_msg("Can you guess", "the number?", 3);
 16c:	43 e0       	ldi	r20, 0x03	; 3
 16e:	64 e0       	ldi	r22, 0x04	; 4
 170:	71 e0       	ldi	r23, 0x01	; 1
 172:	80 e1       	ldi	r24, 0x10	; 16
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 b9 01 	call	0x372	; 0x372 <output_msg>
 * parameter:
 *	rnd_nr: random number (to be guessed)
 */
void play_guess_nr(uint16_t rnd_nr)
{
	uint16_t nr_of_guesses = 0;
 17a:	00 e0       	ldi	r16, 0x00	; 0
 17c:	10 e0       	ldi	r17, 0x00	; 0
static uint16_t get_nr(void)
{
	uint16_t input_length;
	uint16_t guessed_nr;
	while (1) {
		input_length = input_int("Enter number:", &guessed_nr); //UPPGIFT: ändra koden så att 'input_int()' anropas, returvärdet ska lagras i 'input_length', 'guessed_nr' ska modifieras av 'input_int()'.
 17e:	be 01       	movw	r22, r28
 180:	6f 5f       	subi	r22, 0xFF	; 255
 182:	7f 4f       	sbci	r23, 0xFF	; 255
 184:	8e e1       	ldi	r24, 0x1E	; 30
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 36 01 	call	0x26c	; 0x26c <input_int>
		// if the user entered a number, and if it was between 1 and 100...
		if (input_length > 0 && guessed_nr >= 1 && guessed_nr <= 100) {
 18c:	88 23       	and	r24, r24
 18e:	71 f0       	breq	.+28     	; 0x1ac <play_guess_nr+0x5e>
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	9a 81       	ldd	r25, Y+2	; 0x02
 194:	9c 01       	movw	r18, r24
 196:	21 50       	subi	r18, 0x01	; 1
 198:	31 09       	sbc	r19, r1
 19a:	24 36       	cpi	r18, 0x64	; 100
 19c:	31 05       	cpc	r19, r1
 19e:	30 f4       	brcc	.+12     	; 0x1ac <play_guess_nr+0x5e>
{
	uint16_t guessed_nr;
		
	// let the user guess a number
	guessed_nr = get_nr();
	++*p_nr_of_guesses;
 1a0:	0f 5f       	subi	r16, 0xFF	; 255
 1a2:	1f 4f       	sbci	r17, 0xFF	; 255
	// keep track of number of guesses
		//UPPGIFT: öka innehållet i variabeln som 'p_nr_of_guesses' pekar på.
	
	// if the guessed number was the correct number...
	if (guessed_nr == rnd_nr) {
 1a4:	e8 16       	cp	r14, r24
 1a6:	f9 06       	cpc	r15, r25
 1a8:	69 f5       	brne	.+90     	; 0x204 <play_guess_nr+0xb6>
 1aa:	08 c0       	rjmp	.+16     	; 0x1bc <play_guess_nr+0x6e>
		if (input_length > 0 && guessed_nr >= 1 && guessed_nr <= 100) {
			// ...return that number!
			return guessed_nr;
		} else {
			// show error/info message!
			output_msg("Enter a number", "between 1-100!", 1);
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	6c e2       	ldi	r22, 0x2C	; 44
 1b0:	71 e0       	ldi	r23, 0x01	; 1
 1b2:	8b e3       	ldi	r24, 0x3B	; 59
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	0e 94 b9 01 	call	0x372	; 0x372 <output_msg>
 1ba:	e1 cf       	rjmp	.-62     	; 0x17e <play_guess_nr+0x30>
	// keep track of number of guesses
		//UPPGIFT: öka innehållet i variabeln som 'p_nr_of_guesses' pekar på.
	
	// if the guessed number was the correct number...
	if (guessed_nr == rnd_nr) {
		output_msg("Correct number!", "", 1);
 1bc:	41 e0       	ldi	r20, 0x01	; 1
 1be:	6d e9       	ldi	r22, 0x9D	; 157
 1c0:	71 e0       	ldi	r23, 0x01	; 1
 1c2:	8a e4       	ldi	r24, 0x4A	; 74
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 b9 01 	call	0x372	; 0x372 <output_msg>
 */
static void show_result(uint16_t nr_of_guesses)
{
	char result[17];
	// show result
	sprintf(result, "Guesses: %u", nr_of_guesses);
 1ca:	1f 93       	push	r17
 1cc:	0f 93       	push	r16
 1ce:	8a e5       	ldi	r24, 0x5A	; 90
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	9f 93       	push	r25
 1d4:	8f 93       	push	r24
 1d6:	ce 01       	movw	r24, r28
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	7c 01       	movw	r14, r24
 1dc:	9f 93       	push	r25
 1de:	8f 93       	push	r24
 1e0:	0e 94 90 03 	call	0x720	; 0x720 <sprintf>
	output_msg(result, "", 3);
 1e4:	43 e0       	ldi	r20, 0x03	; 3
 1e6:	6d e9       	ldi	r22, 0x9D	; 157
 1e8:	71 e0       	ldi	r23, 0x01	; 1
 1ea:	c7 01       	movw	r24, r14
 1ec:	0e 94 b9 01 	call	0x372	; 0x372 <output_msg>
	if (nr_of_guesses <= 7) {
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	08 30       	cpi	r16, 0x08	; 8
 1fe:	11 05       	cpc	r17, r1
 200:	e0 f4       	brcc	.+56     	; 0x23a <play_guess_nr+0xec>
 202:	13 c0       	rjmp	.+38     	; 0x22a <play_guess_nr+0xdc>
	
	// if the guessed number was the correct number...
	if (guessed_nr == rnd_nr) {
		output_msg("Correct number!", "", 1);
		return 0;	// return 0 for "game over!"
	} else if (guessed_nr < rnd_nr) { // number too low?
 204:	8e 15       	cp	r24, r14
 206:	9f 05       	cpc	r25, r15
 208:	40 f4       	brcc	.+16     	; 0x21a <play_guess_nr+0xcc>
		output_msg("Too low!", "", 1);
 20a:	41 e0       	ldi	r20, 0x01	; 1
 20c:	6d e9       	ldi	r22, 0x9D	; 157
 20e:	71 e0       	ldi	r23, 0x01	; 1
 210:	86 e6       	ldi	r24, 0x66	; 102
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 b9 01 	call	0x372	; 0x372 <output_msg>
 218:	b2 cf       	rjmp	.-156    	; 0x17e <play_guess_nr+0x30>
	} else { // number too high?
		output_msg("Too high!", "", 1);
 21a:	41 e0       	ldi	r20, 0x01	; 1
 21c:	6d e9       	ldi	r22, 0x9D	; 157
 21e:	71 e0       	ldi	r23, 0x01	; 1
 220:	8f e6       	ldi	r24, 0x6F	; 111
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 b9 01 	call	0x372	; 0x372 <output_msg>
 228:	aa cf       	rjmp	.-172    	; 0x17e <play_guess_nr+0x30>
	char result[17];
	// show result
	sprintf(result, "Guesses: %u", nr_of_guesses);
	output_msg(result, "", 3);
	if (nr_of_guesses <= 7) {
		output_msg("Good job!", "", 3);
 22a:	43 e0       	ldi	r20, 0x03	; 3
 22c:	6d e9       	ldi	r22, 0x9D	; 157
 22e:	71 e0       	ldi	r23, 0x01	; 1
 230:	89 e7       	ldi	r24, 0x79	; 121
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 b9 01 	call	0x372	; 0x372 <output_msg>
 238:	07 c0       	rjmp	.+14     	; 0x248 <play_guess_nr+0xfa>
	} else {
		output_msg("Better luck", "next time...", 3);
 23a:	43 e0       	ldi	r20, 0x03	; 3
 23c:	63 e8       	ldi	r22, 0x83	; 131
 23e:	71 e0       	ldi	r23, 0x01	; 1
 240:	80 e9       	ldi	r24, 0x90	; 144
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 b9 01 	call	0x372	; 0x372 <output_msg>
	output_msg("Can you guess", "the number?", 3);
	// play game until the correct number is guessed!
	while (playing_game(rnd_nr, &nr_of_guesses));
	// show result!
	show_result(nr_of_guesses);
 248:	61 96       	adiw	r28, 0x11	; 17
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	f8 94       	cli
 24e:	de bf       	out	0x3e, r29	; 62
 250:	0f be       	out	0x3f, r0	; 63
 252:	cd bf       	out	0x3d, r28	; 61
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	ff 90       	pop	r15
 25e:	ef 90       	pop	r14
 260:	08 95       	ret

00000262 <hmi_init>:
 *	- init numeric keyboard
 *	- init LCD
 */
void hmi_init(void)
{
	numkey_init();
 262:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <numkey_init>
	lcd_init();
 266:	0e 94 34 02 	call	0x468	; 0x468 <lcd_init>
 26a:	08 95       	ret

0000026c <input_int>:
 *
 * return:
 *	number of digits (0-3)
 */
uint8_t input_int(char *p_msg, uint16_t *p_int_nr)
{
 26c:	ef 92       	push	r14
 26e:	ff 92       	push	r15
 270:	0f 93       	push	r16
 272:	1f 93       	push	r17
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	00 d0       	rcall	.+0      	; 0x27a <input_int+0xe>
 27a:	00 d0       	rcall	.+0      	; 0x27c <input_int+0x10>
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
 280:	8c 01       	movw	r16, r24
 282:	7b 01       	movw	r14, r22
	uint8_t length = 0;
	const uint8_t max_length = 3;
	char numbers[max_length + 1];		// UPPGIFT: Varför måste man dimensionera arrayen för ett extra tecken?
	uint8_t key;
	
	lcd_clear();
 284:	0e 94 26 02 	call	0x44c	; 0x44c <lcd_clear>
	lcd_write_str(p_msg);
 288:	c8 01       	movw	r24, r16
 28a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd_write_str>
	lcd_set_cursor_mode(CURSOR_BLINK);
 28e:	8f e0       	ldi	r24, 0x0F	; 15
 290:	0e 94 2e 02 	call	0x45c	; 0x45c <lcd_set_cursor_mode>
	lcd_set_cursor_pos(1, 0);
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_set_cursor_pos>
 * return:
 *	number of digits (0-3)
 */
uint8_t input_int(char *p_msg, uint16_t *p_int_nr)
{
	uint8_t length = 0;
 29c:	00 e0       	ldi	r16, 0x00	; 0
	lcd_write_str(p_msg);
	lcd_set_cursor_mode(CURSOR_BLINK);
	lcd_set_cursor_pos(1, 0);
	while (1) {
		do {								// read keyboard....
			key = numkey_read();
 29e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <numkey_read>
 2a2:	18 2f       	mov	r17, r24
		} while (key == NO_KEY);			// ...until a key is pressed!
 2a4:	88 23       	and	r24, r24
 2a6:	d9 f3       	breq	.-10     	; 0x29e <input_int+0x32>
		
		if (key == '#') {					// confirmation of the number?
 2a8:	83 32       	cpi	r24, 0x23	; 35
 2aa:	29 f1       	breq	.+74     	; 0x2f6 <input_int+0x8a>
			break;
		} else if (key == '*') {			// erase digit?
 2ac:	8a 32       	cpi	r24, 0x2A	; 42
 2ae:	81 f4       	brne	.+32     	; 0x2d0 <input_int+0x64>
			if (length > 0) {
 2b0:	00 23       	and	r16, r16
 2b2:	e1 f0       	breq	.+56     	; 0x2ec <input_int+0x80>
				//UPPGIFT: skriv kod så att tecknet suddas från displayen!
				lcd_set_cursor_pos(1, length-1);
 2b4:	01 50       	subi	r16, 0x01	; 1
 2b6:	60 2f       	mov	r22, r16
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_set_cursor_pos>
				lcd_write_str(" ");
 2be:	8c e9       	ldi	r24, 0x9C	; 156
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd_write_str>
				lcd_set_cursor_pos(1, length-1);
 2c6:	60 2f       	mov	r22, r16
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_set_cursor_pos>
 2ce:	0e c0       	rjmp	.+28     	; 0x2ec <input_int+0x80>
				length--;
			}
		} else if (length < max_length) {	// enter digit?
 2d0:	03 30       	cpi	r16, 0x03	; 3
 2d2:	60 f4       	brcc	.+24     	; 0x2ec <input_int+0x80>
			lcd_write(DATA, key);
 2d4:	68 2f       	mov	r22, r24
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 12 02 	call	0x424	; 0x424 <lcd_write>
			numbers[length] = key;
 2dc:	e1 e0       	ldi	r30, 0x01	; 1
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	ec 0f       	add	r30, r28
 2e2:	fd 1f       	adc	r31, r29
 2e4:	e0 0f       	add	r30, r16
 2e6:	f1 1d       	adc	r31, r1
 2e8:	10 83       	st	Z, r17
			length++;
 2ea:	0f 5f       	subi	r16, 0xFF	; 255
		}

		// continue when key is released!
		//UPPGIFT: Skriv kod så att koden stannar/"loopar" tills att numkey_read() inte längre detekterar en knapptryckning!	
		while (numkey_read() != NO_KEY){
 2ec:	0e 94 dd 01 	call	0x3ba	; 0x3ba <numkey_read>
 2f0:	81 11       	cpse	r24, r1
 2f2:	fc cf       	rjmp	.-8      	; 0x2ec <input_int+0x80>
 2f4:	d4 cf       	rjmp	.-88     	; 0x29e <input_int+0x32>
			continue;
		}
		
	};
	// terminate string
	numbers[length] = '\0';
 2f6:	fe 01       	movw	r30, r28
 2f8:	e0 0f       	add	r30, r16
 2fa:	f1 1d       	adc	r31, r1
 2fc:	11 82       	std	Z+1, r1	; 0x01
	
	// if a number was entered...
	if (length > 0) {
 2fe:	00 23       	and	r16, r16
 300:	61 f1       	breq	.+88     	; 0x35a <input_int+0xee>
{
	uint16_t result = 0;
	uint16_t multiplier = 1;
	uint8_t ascii;
	uint8_t nr;
	uint8_t pos = length - 1;
 302:	2f ef       	ldi	r18, 0xFF	; 255
 304:	20 0f       	add	r18, r16
	while (1) {
		// determine ascii code
		ascii = (uint8_t) *(p_str + pos);
 306:	fe 01       	movw	r30, r28
 308:	e2 0f       	add	r30, r18
 30a:	f1 1d       	adc	r31, r1
		// determine number (0-9)
		nr = ascii - 48;
		// convert number and add to result
		result += nr * multiplier;
 30c:	41 81       	ldd	r20, Z+1	; 0x01
 30e:	40 53       	subi	r20, 0x30	; 48
 310:	50 e0       	ldi	r21, 0x00	; 0
		
		multiplier *= 10;
		if (pos > 0) {
 312:	22 23       	and	r18, r18
 314:	f9 f0       	breq	.+62     	; 0x354 <input_int+0xe8>
 316:	8a e0       	ldi	r24, 0x0A	; 10
 318:	90 e0       	ldi	r25, 0x00	; 0
			pos--;
 31a:	21 50       	subi	r18, 0x01	; 1
	uint8_t ascii;
	uint8_t nr;
	uint8_t pos = length - 1;
	while (1) {
		// determine ascii code
		ascii = (uint8_t) *(p_str + pos);
 31c:	e1 e0       	ldi	r30, 0x01	; 1
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	ec 0f       	add	r30, r28
 322:	fd 1f       	adc	r31, r29
 324:	e2 0f       	add	r30, r18
 326:	f1 1d       	adc	r31, r1
		// determine number (0-9)
		nr = ascii - 48;
		// convert number and add to result
		result += nr * multiplier;
 328:	30 81       	ld	r19, Z
 32a:	30 53       	subi	r19, 0x30	; 48
 32c:	38 9f       	mul	r19, r24
 32e:	b0 01       	movw	r22, r0
 330:	39 9f       	mul	r19, r25
 332:	70 0d       	add	r23, r0
 334:	11 24       	eor	r1, r1
 336:	46 0f       	add	r20, r22
 338:	57 1f       	adc	r21, r23
		
		multiplier *= 10;
 33a:	bc 01       	movw	r22, r24
 33c:	66 0f       	add	r22, r22
 33e:	77 1f       	adc	r23, r23
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	86 0f       	add	r24, r22
 34e:	97 1f       	adc	r25, r23
		if (pos > 0) {
 350:	21 11       	cpse	r18, r1
 352:	e3 cf       	rjmp	.-58     	; 0x31a <input_int+0xae>
		} else {
			break;
		}
	}
	// return result from conversion
	*p_nr = result;
 354:	f7 01       	movw	r30, r14
 356:	51 83       	std	Z+1, r21	; 0x01
 358:	40 83       	st	Z, r20
		// convert number!
		str_to_uint16(numbers, length, p_int_nr);
	}
	// return the number of digits
	return length;
}
 35a:	80 2f       	mov	r24, r16
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	0f 91       	pop	r16
 36c:	ff 90       	pop	r15
 36e:	ef 90       	pop	r14
 370:	08 95       	ret

00000372 <output_msg>:
 *	p_str1: pointer to first character of the string.
 *	p_str2: pointer to first character of the string.
 *  delay_after_msg: number of seconds to wait after message is shown.
 */
void output_msg(char *p_str1, char *p_str2, uint8_t delay_after_msg)
{
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	7c 01       	movw	r14, r24
 37e:	8b 01       	movw	r16, r22
 380:	c4 2f       	mov	r28, r20
	lcd_set_cursor_mode(CURSOR_OFF);
 382:	8c e0       	ldi	r24, 0x0C	; 12
 384:	0e 94 2e 02 	call	0x45c	; 0x45c <lcd_set_cursor_mode>
	lcd_clear();
 388:	0e 94 26 02 	call	0x44c	; 0x44c <lcd_clear>
	lcd_write_str(p_str1);
 38c:	c7 01       	movw	r24, r14
 38e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd_write_str>
	lcd_set_cursor_pos(1, 0);
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_set_cursor_pos>
	lcd_write_str(p_str2);
 39a:	c8 01       	movw	r24, r16
 39c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <lcd_write_str>
	delay_s(delay_after_msg);
 3a0:	8c 2f       	mov	r24, r28
 3a2:	0e 94 8f 00 	call	0x11e	; 0x11e <delay_s>
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	08 95       	ret

000003b2 <numkey_init>:
 * This function configures the ports and pins to be used by the keyboard.
 */
void numkey_init(void)
{
	// PE6 (D7) as input (key pressed?)
	DDRE = 0x00;
 3b2:	1d b8       	out	0x0d, r1	; 13
	// PB4-PB7 (D8-D11) as outputs (MUX and decoder)
	DDRB = 0xF0;
 3b4:	80 ef       	ldi	r24, 0xF0	; 240
 3b6:	84 b9       	out	0x04, r24	; 4
 3b8:	08 95       	ret

000003ba <numkey_read>:
 * return:
 *	If a key is pressed, then a character that represents the key is returned.
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
 3ba:	cf 93       	push	r28
	
	/* UPPGIFT: skriv en for-sats som stegar igenom alla tangenter, använd variabeln i. */
		// set column and row
			// UPPGIFT: använd SET_BIT_LEVELS() för att sätta bitar i registret PORTB!
		// wait before reading pin
	for(i = 0; i < 12; i++){
 3bc:	c0 e0       	ldi	r28, 0x00	; 0
		SET_BIT_LEVELS(PORTB, 0x00, (i << 4));
 3be:	85 b1       	in	r24, 0x05	; 5
 3c0:	8c 2f       	mov	r24, r28
 3c2:	82 95       	swap	r24
 3c4:	80 7f       	andi	r24, 0xF0	; 240
 3c6:	85 b9       	out	0x05, r24	; 5
		
		delay_ms(10);
 3c8:	8a e0       	ldi	r24, 0x0A	; 10
 3ca:	0e 94 82 00 	call	0x104	; 0x104 <delay_ms>
		
		if (PINE & (1 << 6)) {	// UPPGIFT: skriv om det logiska uttrycket i if-satsen, så att uttrycket blir sant om bit 6 i PINE är 1.
 3ce:	66 9b       	sbis	0x0c, 6	; 12
 3d0:	06 c0       	rjmp	.+12     	; 0x3de <numkey_read+0x24>
			return key_map[i];
 3d2:	ec 2f       	mov	r30, r28
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	e2 56       	subi	r30, 0x62	; 98
 3d8:	fe 4f       	sbci	r31, 0xFE	; 254
 3da:	80 81       	ld	r24, Z
 3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <numkey_read+0x2c>
	
	/* UPPGIFT: skriv en for-sats som stegar igenom alla tangenter, använd variabeln i. */
		// set column and row
			// UPPGIFT: använd SET_BIT_LEVELS() för att sätta bitar i registret PORTB!
		// wait before reading pin
	for(i = 0; i < 12; i++){
 3de:	cf 5f       	subi	r28, 0xFF	; 255
 3e0:	cc 30       	cpi	r28, 0x0C	; 12
 3e2:	69 f7       	brne	.-38     	; 0x3be <numkey_read+0x4>
		if (PINE & (1 << 6)) {	// UPPGIFT: skriv om det logiska uttrycket i if-satsen, så att uttrycket blir sant om bit 6 i PINE är 1.
			return key_map[i];
		}
	}
	// no key was pressed!
	return NO_KEY;
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	cf 91       	pop	r28
 3e8:	08 95       	ret

000003ea <main>:
{

	uint16_t rnd_nr;
	
	// initialize HMI (LCD and numeric keyboard)
	hmi_init();
 3ea:	0e 94 31 01 	call	0x262	; 0x262 <hmi_init>
	// generate seed for the pseudo-random number generator
	random_seed();
 3ee:	0e 94 7d 02 	call	0x4fa	; 0x4fa <random_seed>
	
	// show start screen for the game
	output_msg("Welcome!", "Let's play...", 3);
 3f2:	43 e0       	ldi	r20, 0x03	; 3
 3f4:	6a ea       	ldi	r22, 0xAA	; 170
 3f6:	71 e0       	ldi	r23, 0x01	; 1
 3f8:	88 eb       	ldi	r24, 0xB8	; 184
 3fa:	91 e0       	ldi	r25, 0x01	; 1
 3fc:	0e 94 b9 01 	call	0x372	; 0x372 <output_msg>
	// play game
    while (1) {
		// generate a random number
	    rnd_nr = random_get_nr(100) + 1;
 400:	84 e6       	ldi	r24, 0x64	; 100
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 9a 02 	call	0x534	; 0x534 <random_get_nr>
		// play a round...
		play_guess_nr(rnd_nr);
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	0e 94 a7 00 	call	0x14e	; 0x14e <play_guess_nr>
 40e:	f8 cf       	rjmp	.-16     	; 0x400 <__EEPROM_REGION_LENGTH__>

00000410 <write_4bit_msb>:
 410:	91 b3       	in	r25, 0x11	; 17
 412:	9f 70       	andi	r25, 0x0F	; 15
 414:	80 7f       	andi	r24, 0xF0	; 240
 416:	89 2b       	or	r24, r25
 418:	81 bb       	out	0x11, r24	; 17
 41a:	5f 9a       	sbi	0x0b, 7	; 11
 41c:	0e 94 6d 00 	call	0xda	; 0xda <delay_1_micros>
 420:	5f 98       	cbi	0x0b, 7	; 11
 422:	08 95       	ret

00000424 <lcd_write>:
 424:	cf 93       	push	r28
 426:	c6 2f       	mov	r28, r22
 428:	81 11       	cpse	r24, r1
 42a:	02 c0       	rjmp	.+4      	; 0x430 <lcd_write+0xc>
 42c:	5e 98       	cbi	0x0b, 6	; 11
 42e:	01 c0       	rjmp	.+2      	; 0x432 <lcd_write+0xe>
 430:	5e 9a       	sbi	0x0b, 6	; 11
 432:	8c 2f       	mov	r24, r28
 434:	0e 94 08 02 	call	0x410	; 0x410 <write_4bit_msb>
 438:	8c 2f       	mov	r24, r28
 43a:	82 95       	swap	r24
 43c:	80 7f       	andi	r24, 0xF0	; 240
 43e:	0e 94 08 02 	call	0x410	; 0x410 <write_4bit_msb>
 442:	8d e2       	ldi	r24, 0x2D	; 45
 444:	0e 94 76 00 	call	0xec	; 0xec <delay_micros>
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <lcd_clear>:
 44c:	61 e0       	ldi	r22, 0x01	; 1
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	0e 94 12 02 	call	0x424	; 0x424 <lcd_write>
 454:	82 e0       	ldi	r24, 0x02	; 2
 456:	0e 94 82 00 	call	0x104	; 0x104 <delay_ms>
 45a:	08 95       	ret

0000045c <lcd_set_cursor_mode>:
 45c:	68 2f       	mov	r22, r24
 45e:	6c 60       	ori	r22, 0x0C	; 12
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	0e 94 12 02 	call	0x424	; 0x424 <lcd_write>
 466:	08 95       	ret

00000468 <lcd_init>:
 468:	80 ef       	ldi	r24, 0xF0	; 240
 46a:	80 bb       	out	0x10, r24	; 16
 46c:	80 ec       	ldi	r24, 0xC0	; 192
 46e:	8a b9       	out	0x0a, r24	; 10
 470:	84 e1       	ldi	r24, 0x14	; 20
 472:	0e 94 82 00 	call	0x104	; 0x104 <delay_ms>
 476:	5e 98       	cbi	0x0b, 6	; 11
 478:	80 e3       	ldi	r24, 0x30	; 48
 47a:	0e 94 08 02 	call	0x410	; 0x410 <write_4bit_msb>
 47e:	8a e0       	ldi	r24, 0x0A	; 10
 480:	0e 94 82 00 	call	0x104	; 0x104 <delay_ms>
 484:	80 e3       	ldi	r24, 0x30	; 48
 486:	0e 94 08 02 	call	0x410	; 0x410 <write_4bit_msb>
 48a:	8a e0       	ldi	r24, 0x0A	; 10
 48c:	0e 94 82 00 	call	0x104	; 0x104 <delay_ms>
 490:	80 e3       	ldi	r24, 0x30	; 48
 492:	0e 94 08 02 	call	0x410	; 0x410 <write_4bit_msb>
 496:	8a e0       	ldi	r24, 0x0A	; 10
 498:	0e 94 82 00 	call	0x104	; 0x104 <delay_ms>
 49c:	80 e2       	ldi	r24, 0x20	; 32
 49e:	0e 94 08 02 	call	0x410	; 0x410 <write_4bit_msb>
 4a2:	8d e2       	ldi	r24, 0x2D	; 45
 4a4:	0e 94 76 00 	call	0xec	; 0xec <delay_micros>
 4a8:	68 e2       	ldi	r22, 0x28	; 40
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	0e 94 12 02 	call	0x424	; 0x424 <lcd_write>
 4b0:	8f e0       	ldi	r24, 0x0F	; 15
 4b2:	0e 94 2e 02 	call	0x45c	; 0x45c <lcd_set_cursor_mode>
 4b6:	0e 94 26 02 	call	0x44c	; 0x44c <lcd_clear>
 4ba:	66 e0       	ldi	r22, 0x06	; 6
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 12 02 	call	0x424	; 0x424 <lcd_write>
 4c2:	08 95       	ret

000004c4 <lcd_set_cursor_pos>:
 4c4:	20 e4       	ldi	r18, 0x40	; 64
 4c6:	82 9f       	mul	r24, r18
 4c8:	c0 01       	movw	r24, r0
 4ca:	11 24       	eor	r1, r1
 4cc:	60 68       	ori	r22, 0x80	; 128
 4ce:	68 2b       	or	r22, r24
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	0e 94 12 02 	call	0x424	; 0x424 <lcd_write>
 4d6:	08 95       	ret

000004d8 <lcd_write_str>:
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	fc 01       	movw	r30, r24
 4de:	60 81       	ld	r22, Z
 4e0:	66 23       	and	r22, r22
 4e2:	41 f0       	breq	.+16     	; 0x4f4 <lcd_write_str+0x1c>
 4e4:	ec 01       	movw	r28, r24
 4e6:	21 96       	adiw	r28, 0x01	; 1
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	0e 94 12 02 	call	0x424	; 0x424 <lcd_write>
 4ee:	69 91       	ld	r22, Y+
 4f0:	61 11       	cpse	r22, r1
 4f2:	fa cf       	rjmp	.-12     	; 0x4e8 <lcd_write_str+0x10>
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <random_seed>:
 4fa:	80 e4       	ldi	r24, 0x40	; 64
 4fc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 500:	ea e7       	ldi	r30, 0x7A	; 122
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	87 e0       	ldi	r24, 0x07	; 7
 506:	80 83       	st	Z, r24
 508:	80 e8       	ldi	r24, 0x80	; 128
 50a:	80 83       	st	Z, r24
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 512:	80 81       	ld	r24, Z
 514:	80 64       	ori	r24, 0x40	; 64
 516:	80 83       	st	Z, r24
 518:	80 81       	ld	r24, Z
 51a:	84 ff       	sbrs	r24, 4
 51c:	fd cf       	rjmp	.-6      	; 0x518 <random_seed+0x1e>
 51e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 522:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	78 2b       	or	r23, r24
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 87 03 	call	0x70e	; 0x70e <srandom>
 532:	08 95       	ret

00000534 <random_get_nr>:
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	00 97       	sbiw	r24, 0x00	; 0
 53a:	51 f0       	breq	.+20     	; 0x550 <random_get_nr+0x1c>
 53c:	ec 01       	movw	r28, r24
 53e:	0e 94 39 03 	call	0x672	; 0x672 <random>
 542:	9e 01       	movw	r18, r28
 544:	40 e0       	ldi	r20, 0x00	; 0
 546:	50 e0       	ldi	r21, 0x00	; 0
 548:	0e 94 ad 02 	call	0x55a	; 0x55a <__divmodsi4>
 54c:	cb 01       	movw	r24, r22
 54e:	02 c0       	rjmp	.+4      	; 0x554 <random_get_nr+0x20>
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <__divmodsi4>:
 55a:	05 2e       	mov	r0, r21
 55c:	97 fb       	bst	r25, 7
 55e:	1e f4       	brtc	.+6      	; 0x566 <__divmodsi4+0xc>
 560:	00 94       	com	r0
 562:	0e 94 c4 02 	call	0x588	; 0x588 <__negsi2>
 566:	57 fd       	sbrc	r21, 7
 568:	07 d0       	rcall	.+14     	; 0x578 <__divmodsi4_neg2>
 56a:	0e 94 cc 02 	call	0x598	; 0x598 <__udivmodsi4>
 56e:	07 fc       	sbrc	r0, 7
 570:	03 d0       	rcall	.+6      	; 0x578 <__divmodsi4_neg2>
 572:	4e f4       	brtc	.+18     	; 0x586 <__divmodsi4_exit>
 574:	0c 94 c4 02 	jmp	0x588	; 0x588 <__negsi2>

00000578 <__divmodsi4_neg2>:
 578:	50 95       	com	r21
 57a:	40 95       	com	r20
 57c:	30 95       	com	r19
 57e:	21 95       	neg	r18
 580:	3f 4f       	sbci	r19, 0xFF	; 255
 582:	4f 4f       	sbci	r20, 0xFF	; 255
 584:	5f 4f       	sbci	r21, 0xFF	; 255

00000586 <__divmodsi4_exit>:
 586:	08 95       	ret

00000588 <__negsi2>:
 588:	90 95       	com	r25
 58a:	80 95       	com	r24
 58c:	70 95       	com	r23
 58e:	61 95       	neg	r22
 590:	7f 4f       	sbci	r23, 0xFF	; 255
 592:	8f 4f       	sbci	r24, 0xFF	; 255
 594:	9f 4f       	sbci	r25, 0xFF	; 255
 596:	08 95       	ret

00000598 <__udivmodsi4>:
 598:	a1 e2       	ldi	r26, 0x21	; 33
 59a:	1a 2e       	mov	r1, r26
 59c:	aa 1b       	sub	r26, r26
 59e:	bb 1b       	sub	r27, r27
 5a0:	fd 01       	movw	r30, r26
 5a2:	0d c0       	rjmp	.+26     	; 0x5be <__udivmodsi4_ep>

000005a4 <__udivmodsi4_loop>:
 5a4:	aa 1f       	adc	r26, r26
 5a6:	bb 1f       	adc	r27, r27
 5a8:	ee 1f       	adc	r30, r30
 5aa:	ff 1f       	adc	r31, r31
 5ac:	a2 17       	cp	r26, r18
 5ae:	b3 07       	cpc	r27, r19
 5b0:	e4 07       	cpc	r30, r20
 5b2:	f5 07       	cpc	r31, r21
 5b4:	20 f0       	brcs	.+8      	; 0x5be <__udivmodsi4_ep>
 5b6:	a2 1b       	sub	r26, r18
 5b8:	b3 0b       	sbc	r27, r19
 5ba:	e4 0b       	sbc	r30, r20
 5bc:	f5 0b       	sbc	r31, r21

000005be <__udivmodsi4_ep>:
 5be:	66 1f       	adc	r22, r22
 5c0:	77 1f       	adc	r23, r23
 5c2:	88 1f       	adc	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	1a 94       	dec	r1
 5c8:	69 f7       	brne	.-38     	; 0x5a4 <__udivmodsi4_loop>
 5ca:	60 95       	com	r22
 5cc:	70 95       	com	r23
 5ce:	80 95       	com	r24
 5d0:	90 95       	com	r25
 5d2:	9b 01       	movw	r18, r22
 5d4:	ac 01       	movw	r20, r24
 5d6:	bd 01       	movw	r22, r26
 5d8:	cf 01       	movw	r24, r30
 5da:	08 95       	ret

000005dc <random_r>:
 5dc:	8f 92       	push	r8
 5de:	9f 92       	push	r9
 5e0:	af 92       	push	r10
 5e2:	bf 92       	push	r11
 5e4:	cf 92       	push	r12
 5e6:	df 92       	push	r13
 5e8:	ef 92       	push	r14
 5ea:	ff 92       	push	r15
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	ec 01       	movw	r28, r24
 5f2:	68 81       	ld	r22, Y
 5f4:	79 81       	ldd	r23, Y+1	; 0x01
 5f6:	8a 81       	ldd	r24, Y+2	; 0x02
 5f8:	9b 81       	ldd	r25, Y+3	; 0x03
 5fa:	61 15       	cp	r22, r1
 5fc:	71 05       	cpc	r23, r1
 5fe:	81 05       	cpc	r24, r1
 600:	91 05       	cpc	r25, r1
 602:	21 f4       	brne	.+8      	; 0x60c <random_r+0x30>
 604:	64 e2       	ldi	r22, 0x24	; 36
 606:	79 ed       	ldi	r23, 0xD9	; 217
 608:	8b e5       	ldi	r24, 0x5B	; 91
 60a:	97 e0       	ldi	r25, 0x07	; 7
 60c:	2d e1       	ldi	r18, 0x1D	; 29
 60e:	33 ef       	ldi	r19, 0xF3	; 243
 610:	41 e0       	ldi	r20, 0x01	; 1
 612:	50 e0       	ldi	r21, 0x00	; 0
 614:	0e 94 ad 02 	call	0x55a	; 0x55a <__divmodsi4>
 618:	49 01       	movw	r8, r18
 61a:	5a 01       	movw	r10, r20
 61c:	9b 01       	movw	r18, r22
 61e:	ac 01       	movw	r20, r24
 620:	a7 ea       	ldi	r26, 0xA7	; 167
 622:	b1 e4       	ldi	r27, 0x41	; 65
 624:	0e 94 43 06 	call	0xc86	; 0xc86 <__muluhisi3>
 628:	6b 01       	movw	r12, r22
 62a:	7c 01       	movw	r14, r24
 62c:	ac ee       	ldi	r26, 0xEC	; 236
 62e:	b4 ef       	ldi	r27, 0xF4	; 244
 630:	a5 01       	movw	r20, r10
 632:	94 01       	movw	r18, r8
 634:	0e 94 51 06 	call	0xca2	; 0xca2 <__mulohisi3>
 638:	dc 01       	movw	r26, r24
 63a:	cb 01       	movw	r24, r22
 63c:	8c 0d       	add	r24, r12
 63e:	9d 1d       	adc	r25, r13
 640:	ae 1d       	adc	r26, r14
 642:	bf 1d       	adc	r27, r15
 644:	b7 ff       	sbrs	r27, 7
 646:	03 c0       	rjmp	.+6      	; 0x64e <random_r+0x72>
 648:	01 97       	sbiw	r24, 0x01	; 1
 64a:	a1 09       	sbc	r26, r1
 64c:	b0 48       	sbci	r27, 0x80	; 128
 64e:	88 83       	st	Y, r24
 650:	99 83       	std	Y+1, r25	; 0x01
 652:	aa 83       	std	Y+2, r26	; 0x02
 654:	bb 83       	std	Y+3, r27	; 0x03
 656:	bc 01       	movw	r22, r24
 658:	cd 01       	movw	r24, r26
 65a:	9f 77       	andi	r25, 0x7F	; 127
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	ff 90       	pop	r15
 662:	ef 90       	pop	r14
 664:	df 90       	pop	r13
 666:	cf 90       	pop	r12
 668:	bf 90       	pop	r11
 66a:	af 90       	pop	r10
 66c:	9f 90       	pop	r9
 66e:	8f 90       	pop	r8
 670:	08 95       	ret

00000672 <random>:
 672:	8f 92       	push	r8
 674:	9f 92       	push	r9
 676:	af 92       	push	r10
 678:	bf 92       	push	r11
 67a:	cf 92       	push	r12
 67c:	df 92       	push	r13
 67e:	ef 92       	push	r14
 680:	ff 92       	push	r15
 682:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 686:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 68a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 68e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 692:	61 15       	cp	r22, r1
 694:	71 05       	cpc	r23, r1
 696:	81 05       	cpc	r24, r1
 698:	91 05       	cpc	r25, r1
 69a:	21 f4       	brne	.+8      	; 0x6a4 <random+0x32>
 69c:	64 e2       	ldi	r22, 0x24	; 36
 69e:	79 ed       	ldi	r23, 0xD9	; 217
 6a0:	8b e5       	ldi	r24, 0x5B	; 91
 6a2:	97 e0       	ldi	r25, 0x07	; 7
 6a4:	2d e1       	ldi	r18, 0x1D	; 29
 6a6:	33 ef       	ldi	r19, 0xF3	; 243
 6a8:	41 e0       	ldi	r20, 0x01	; 1
 6aa:	50 e0       	ldi	r21, 0x00	; 0
 6ac:	0e 94 ad 02 	call	0x55a	; 0x55a <__divmodsi4>
 6b0:	49 01       	movw	r8, r18
 6b2:	5a 01       	movw	r10, r20
 6b4:	9b 01       	movw	r18, r22
 6b6:	ac 01       	movw	r20, r24
 6b8:	a7 ea       	ldi	r26, 0xA7	; 167
 6ba:	b1 e4       	ldi	r27, 0x41	; 65
 6bc:	0e 94 43 06 	call	0xc86	; 0xc86 <__muluhisi3>
 6c0:	6b 01       	movw	r12, r22
 6c2:	7c 01       	movw	r14, r24
 6c4:	ac ee       	ldi	r26, 0xEC	; 236
 6c6:	b4 ef       	ldi	r27, 0xF4	; 244
 6c8:	a5 01       	movw	r20, r10
 6ca:	94 01       	movw	r18, r8
 6cc:	0e 94 51 06 	call	0xca2	; 0xca2 <__mulohisi3>
 6d0:	dc 01       	movw	r26, r24
 6d2:	cb 01       	movw	r24, r22
 6d4:	8c 0d       	add	r24, r12
 6d6:	9d 1d       	adc	r25, r13
 6d8:	ae 1d       	adc	r26, r14
 6da:	bf 1d       	adc	r27, r15
 6dc:	b7 ff       	sbrs	r27, 7
 6de:	03 c0       	rjmp	.+6      	; 0x6e6 <random+0x74>
 6e0:	01 97       	sbiw	r24, 0x01	; 1
 6e2:	a1 09       	sbc	r26, r1
 6e4:	b0 48       	sbci	r27, 0x80	; 128
 6e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 6ea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6ee:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 6f2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 6f6:	bc 01       	movw	r22, r24
 6f8:	cd 01       	movw	r24, r26
 6fa:	9f 77       	andi	r25, 0x7F	; 127
 6fc:	ff 90       	pop	r15
 6fe:	ef 90       	pop	r14
 700:	df 90       	pop	r13
 702:	cf 90       	pop	r12
 704:	bf 90       	pop	r11
 706:	af 90       	pop	r10
 708:	9f 90       	pop	r9
 70a:	8f 90       	pop	r8
 70c:	08 95       	ret

0000070e <srandom>:
 70e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 712:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 716:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 71a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 71e:	08 95       	ret

00000720 <sprintf>:
 720:	ae e0       	ldi	r26, 0x0E	; 14
 722:	b0 e0       	ldi	r27, 0x00	; 0
 724:	e6 e9       	ldi	r30, 0x96	; 150
 726:	f3 e0       	ldi	r31, 0x03	; 3
 728:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__prologue_saves__+0x1c>
 72c:	0d 89       	ldd	r16, Y+21	; 0x15
 72e:	1e 89       	ldd	r17, Y+22	; 0x16
 730:	86 e0       	ldi	r24, 0x06	; 6
 732:	8c 83       	std	Y+4, r24	; 0x04
 734:	1a 83       	std	Y+2, r17	; 0x02
 736:	09 83       	std	Y+1, r16	; 0x01
 738:	8f ef       	ldi	r24, 0xFF	; 255
 73a:	9f e7       	ldi	r25, 0x7F	; 127
 73c:	9e 83       	std	Y+6, r25	; 0x06
 73e:	8d 83       	std	Y+5, r24	; 0x05
 740:	ae 01       	movw	r20, r28
 742:	47 5e       	subi	r20, 0xE7	; 231
 744:	5f 4f       	sbci	r21, 0xFF	; 255
 746:	6f 89       	ldd	r22, Y+23	; 0x17
 748:	78 8d       	ldd	r23, Y+24	; 0x18
 74a:	ce 01       	movw	r24, r28
 74c:	01 96       	adiw	r24, 0x01	; 1
 74e:	0e 94 b2 03 	call	0x764	; 0x764 <vfprintf>
 752:	ef 81       	ldd	r30, Y+7	; 0x07
 754:	f8 85       	ldd	r31, Y+8	; 0x08
 756:	e0 0f       	add	r30, r16
 758:	f1 1f       	adc	r31, r17
 75a:	10 82       	st	Z, r1
 75c:	2e 96       	adiw	r28, 0x0e	; 14
 75e:	e4 e0       	ldi	r30, 0x04	; 4
 760:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__epilogue_restores__+0x1c>

00000764 <vfprintf>:
 764:	ab e0       	ldi	r26, 0x0B	; 11
 766:	b0 e0       	ldi	r27, 0x00	; 0
 768:	e8 eb       	ldi	r30, 0xB8	; 184
 76a:	f3 e0       	ldi	r31, 0x03	; 3
 76c:	0c 94 56 06 	jmp	0xcac	; 0xcac <__prologue_saves__>
 770:	6c 01       	movw	r12, r24
 772:	7b 01       	movw	r14, r22
 774:	8a 01       	movw	r16, r20
 776:	fc 01       	movw	r30, r24
 778:	17 82       	std	Z+7, r1	; 0x07
 77a:	16 82       	std	Z+6, r1	; 0x06
 77c:	83 81       	ldd	r24, Z+3	; 0x03
 77e:	81 ff       	sbrs	r24, 1
 780:	cc c1       	rjmp	.+920    	; 0xb1a <__stack+0x1b>
 782:	ce 01       	movw	r24, r28
 784:	01 96       	adiw	r24, 0x01	; 1
 786:	3c 01       	movw	r6, r24
 788:	f6 01       	movw	r30, r12
 78a:	93 81       	ldd	r25, Z+3	; 0x03
 78c:	f7 01       	movw	r30, r14
 78e:	93 fd       	sbrc	r25, 3
 790:	85 91       	lpm	r24, Z+
 792:	93 ff       	sbrs	r25, 3
 794:	81 91       	ld	r24, Z+
 796:	7f 01       	movw	r14, r30
 798:	88 23       	and	r24, r24
 79a:	09 f4       	brne	.+2      	; 0x79e <vfprintf+0x3a>
 79c:	ba c1       	rjmp	.+884    	; 0xb12 <__stack+0x13>
 79e:	85 32       	cpi	r24, 0x25	; 37
 7a0:	39 f4       	brne	.+14     	; 0x7b0 <vfprintf+0x4c>
 7a2:	93 fd       	sbrc	r25, 3
 7a4:	85 91       	lpm	r24, Z+
 7a6:	93 ff       	sbrs	r25, 3
 7a8:	81 91       	ld	r24, Z+
 7aa:	7f 01       	movw	r14, r30
 7ac:	85 32       	cpi	r24, 0x25	; 37
 7ae:	29 f4       	brne	.+10     	; 0x7ba <vfprintf+0x56>
 7b0:	b6 01       	movw	r22, r12
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	0e 94 a9 05 	call	0xb52	; 0xb52 <fputc>
 7b8:	e7 cf       	rjmp	.-50     	; 0x788 <vfprintf+0x24>
 7ba:	91 2c       	mov	r9, r1
 7bc:	21 2c       	mov	r2, r1
 7be:	31 2c       	mov	r3, r1
 7c0:	ff e1       	ldi	r31, 0x1F	; 31
 7c2:	f3 15       	cp	r31, r3
 7c4:	d8 f0       	brcs	.+54     	; 0x7fc <vfprintf+0x98>
 7c6:	8b 32       	cpi	r24, 0x2B	; 43
 7c8:	79 f0       	breq	.+30     	; 0x7e8 <vfprintf+0x84>
 7ca:	38 f4       	brcc	.+14     	; 0x7da <vfprintf+0x76>
 7cc:	80 32       	cpi	r24, 0x20	; 32
 7ce:	79 f0       	breq	.+30     	; 0x7ee <vfprintf+0x8a>
 7d0:	83 32       	cpi	r24, 0x23	; 35
 7d2:	a1 f4       	brne	.+40     	; 0x7fc <vfprintf+0x98>
 7d4:	23 2d       	mov	r18, r3
 7d6:	20 61       	ori	r18, 0x10	; 16
 7d8:	1d c0       	rjmp	.+58     	; 0x814 <vfprintf+0xb0>
 7da:	8d 32       	cpi	r24, 0x2D	; 45
 7dc:	61 f0       	breq	.+24     	; 0x7f6 <vfprintf+0x92>
 7de:	80 33       	cpi	r24, 0x30	; 48
 7e0:	69 f4       	brne	.+26     	; 0x7fc <vfprintf+0x98>
 7e2:	23 2d       	mov	r18, r3
 7e4:	21 60       	ori	r18, 0x01	; 1
 7e6:	16 c0       	rjmp	.+44     	; 0x814 <vfprintf+0xb0>
 7e8:	83 2d       	mov	r24, r3
 7ea:	82 60       	ori	r24, 0x02	; 2
 7ec:	38 2e       	mov	r3, r24
 7ee:	e3 2d       	mov	r30, r3
 7f0:	e4 60       	ori	r30, 0x04	; 4
 7f2:	3e 2e       	mov	r3, r30
 7f4:	2a c0       	rjmp	.+84     	; 0x84a <vfprintf+0xe6>
 7f6:	f3 2d       	mov	r31, r3
 7f8:	f8 60       	ori	r31, 0x08	; 8
 7fa:	1d c0       	rjmp	.+58     	; 0x836 <vfprintf+0xd2>
 7fc:	37 fc       	sbrc	r3, 7
 7fe:	2d c0       	rjmp	.+90     	; 0x85a <vfprintf+0xf6>
 800:	20 ed       	ldi	r18, 0xD0	; 208
 802:	28 0f       	add	r18, r24
 804:	2a 30       	cpi	r18, 0x0A	; 10
 806:	40 f0       	brcs	.+16     	; 0x818 <vfprintf+0xb4>
 808:	8e 32       	cpi	r24, 0x2E	; 46
 80a:	b9 f4       	brne	.+46     	; 0x83a <vfprintf+0xd6>
 80c:	36 fc       	sbrc	r3, 6
 80e:	81 c1       	rjmp	.+770    	; 0xb12 <__stack+0x13>
 810:	23 2d       	mov	r18, r3
 812:	20 64       	ori	r18, 0x40	; 64
 814:	32 2e       	mov	r3, r18
 816:	19 c0       	rjmp	.+50     	; 0x84a <vfprintf+0xe6>
 818:	36 fe       	sbrs	r3, 6
 81a:	06 c0       	rjmp	.+12     	; 0x828 <vfprintf+0xc4>
 81c:	8a e0       	ldi	r24, 0x0A	; 10
 81e:	98 9e       	mul	r9, r24
 820:	20 0d       	add	r18, r0
 822:	11 24       	eor	r1, r1
 824:	92 2e       	mov	r9, r18
 826:	11 c0       	rjmp	.+34     	; 0x84a <vfprintf+0xe6>
 828:	ea e0       	ldi	r30, 0x0A	; 10
 82a:	2e 9e       	mul	r2, r30
 82c:	20 0d       	add	r18, r0
 82e:	11 24       	eor	r1, r1
 830:	22 2e       	mov	r2, r18
 832:	f3 2d       	mov	r31, r3
 834:	f0 62       	ori	r31, 0x20	; 32
 836:	3f 2e       	mov	r3, r31
 838:	08 c0       	rjmp	.+16     	; 0x84a <vfprintf+0xe6>
 83a:	8c 36       	cpi	r24, 0x6C	; 108
 83c:	21 f4       	brne	.+8      	; 0x846 <vfprintf+0xe2>
 83e:	83 2d       	mov	r24, r3
 840:	80 68       	ori	r24, 0x80	; 128
 842:	38 2e       	mov	r3, r24
 844:	02 c0       	rjmp	.+4      	; 0x84a <vfprintf+0xe6>
 846:	88 36       	cpi	r24, 0x68	; 104
 848:	41 f4       	brne	.+16     	; 0x85a <vfprintf+0xf6>
 84a:	f7 01       	movw	r30, r14
 84c:	93 fd       	sbrc	r25, 3
 84e:	85 91       	lpm	r24, Z+
 850:	93 ff       	sbrs	r25, 3
 852:	81 91       	ld	r24, Z+
 854:	7f 01       	movw	r14, r30
 856:	81 11       	cpse	r24, r1
 858:	b3 cf       	rjmp	.-154    	; 0x7c0 <vfprintf+0x5c>
 85a:	98 2f       	mov	r25, r24
 85c:	9f 7d       	andi	r25, 0xDF	; 223
 85e:	95 54       	subi	r25, 0x45	; 69
 860:	93 30       	cpi	r25, 0x03	; 3
 862:	28 f4       	brcc	.+10     	; 0x86e <vfprintf+0x10a>
 864:	0c 5f       	subi	r16, 0xFC	; 252
 866:	1f 4f       	sbci	r17, 0xFF	; 255
 868:	9f e3       	ldi	r25, 0x3F	; 63
 86a:	99 83       	std	Y+1, r25	; 0x01
 86c:	0d c0       	rjmp	.+26     	; 0x888 <vfprintf+0x124>
 86e:	83 36       	cpi	r24, 0x63	; 99
 870:	31 f0       	breq	.+12     	; 0x87e <vfprintf+0x11a>
 872:	83 37       	cpi	r24, 0x73	; 115
 874:	71 f0       	breq	.+28     	; 0x892 <vfprintf+0x12e>
 876:	83 35       	cpi	r24, 0x53	; 83
 878:	09 f0       	breq	.+2      	; 0x87c <vfprintf+0x118>
 87a:	59 c0       	rjmp	.+178    	; 0x92e <vfprintf+0x1ca>
 87c:	21 c0       	rjmp	.+66     	; 0x8c0 <vfprintf+0x15c>
 87e:	f8 01       	movw	r30, r16
 880:	80 81       	ld	r24, Z
 882:	89 83       	std	Y+1, r24	; 0x01
 884:	0e 5f       	subi	r16, 0xFE	; 254
 886:	1f 4f       	sbci	r17, 0xFF	; 255
 888:	88 24       	eor	r8, r8
 88a:	83 94       	inc	r8
 88c:	91 2c       	mov	r9, r1
 88e:	53 01       	movw	r10, r6
 890:	13 c0       	rjmp	.+38     	; 0x8b8 <vfprintf+0x154>
 892:	28 01       	movw	r4, r16
 894:	f2 e0       	ldi	r31, 0x02	; 2
 896:	4f 0e       	add	r4, r31
 898:	51 1c       	adc	r5, r1
 89a:	f8 01       	movw	r30, r16
 89c:	a0 80       	ld	r10, Z
 89e:	b1 80       	ldd	r11, Z+1	; 0x01
 8a0:	36 fe       	sbrs	r3, 6
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <vfprintf+0x146>
 8a4:	69 2d       	mov	r22, r9
 8a6:	70 e0       	ldi	r23, 0x00	; 0
 8a8:	02 c0       	rjmp	.+4      	; 0x8ae <vfprintf+0x14a>
 8aa:	6f ef       	ldi	r22, 0xFF	; 255
 8ac:	7f ef       	ldi	r23, 0xFF	; 255
 8ae:	c5 01       	movw	r24, r10
 8b0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <strnlen>
 8b4:	4c 01       	movw	r8, r24
 8b6:	82 01       	movw	r16, r4
 8b8:	f3 2d       	mov	r31, r3
 8ba:	ff 77       	andi	r31, 0x7F	; 127
 8bc:	3f 2e       	mov	r3, r31
 8be:	16 c0       	rjmp	.+44     	; 0x8ec <vfprintf+0x188>
 8c0:	28 01       	movw	r4, r16
 8c2:	22 e0       	ldi	r18, 0x02	; 2
 8c4:	42 0e       	add	r4, r18
 8c6:	51 1c       	adc	r5, r1
 8c8:	f8 01       	movw	r30, r16
 8ca:	a0 80       	ld	r10, Z
 8cc:	b1 80       	ldd	r11, Z+1	; 0x01
 8ce:	36 fe       	sbrs	r3, 6
 8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <vfprintf+0x174>
 8d2:	69 2d       	mov	r22, r9
 8d4:	70 e0       	ldi	r23, 0x00	; 0
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <vfprintf+0x178>
 8d8:	6f ef       	ldi	r22, 0xFF	; 255
 8da:	7f ef       	ldi	r23, 0xFF	; 255
 8dc:	c5 01       	movw	r24, r10
 8de:	0e 94 93 05 	call	0xb26	; 0xb26 <strnlen_P>
 8e2:	4c 01       	movw	r8, r24
 8e4:	f3 2d       	mov	r31, r3
 8e6:	f0 68       	ori	r31, 0x80	; 128
 8e8:	3f 2e       	mov	r3, r31
 8ea:	82 01       	movw	r16, r4
 8ec:	33 fc       	sbrc	r3, 3
 8ee:	1b c0       	rjmp	.+54     	; 0x926 <vfprintf+0x1c2>
 8f0:	82 2d       	mov	r24, r2
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	88 16       	cp	r8, r24
 8f6:	99 06       	cpc	r9, r25
 8f8:	b0 f4       	brcc	.+44     	; 0x926 <vfprintf+0x1c2>
 8fa:	b6 01       	movw	r22, r12
 8fc:	80 e2       	ldi	r24, 0x20	; 32
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	0e 94 a9 05 	call	0xb52	; 0xb52 <fputc>
 904:	2a 94       	dec	r2
 906:	f4 cf       	rjmp	.-24     	; 0x8f0 <vfprintf+0x18c>
 908:	f5 01       	movw	r30, r10
 90a:	37 fc       	sbrc	r3, 7
 90c:	85 91       	lpm	r24, Z+
 90e:	37 fe       	sbrs	r3, 7
 910:	81 91       	ld	r24, Z+
 912:	5f 01       	movw	r10, r30
 914:	b6 01       	movw	r22, r12
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 a9 05 	call	0xb52	; 0xb52 <fputc>
 91c:	21 10       	cpse	r2, r1
 91e:	2a 94       	dec	r2
 920:	21 e0       	ldi	r18, 0x01	; 1
 922:	82 1a       	sub	r8, r18
 924:	91 08       	sbc	r9, r1
 926:	81 14       	cp	r8, r1
 928:	91 04       	cpc	r9, r1
 92a:	71 f7       	brne	.-36     	; 0x908 <vfprintf+0x1a4>
 92c:	e8 c0       	rjmp	.+464    	; 0xafe <__DATA_REGION_LENGTH__+0xfe>
 92e:	84 36       	cpi	r24, 0x64	; 100
 930:	11 f0       	breq	.+4      	; 0x936 <vfprintf+0x1d2>
 932:	89 36       	cpi	r24, 0x69	; 105
 934:	41 f5       	brne	.+80     	; 0x986 <vfprintf+0x222>
 936:	f8 01       	movw	r30, r16
 938:	37 fe       	sbrs	r3, 7
 93a:	07 c0       	rjmp	.+14     	; 0x94a <vfprintf+0x1e6>
 93c:	60 81       	ld	r22, Z
 93e:	71 81       	ldd	r23, Z+1	; 0x01
 940:	82 81       	ldd	r24, Z+2	; 0x02
 942:	93 81       	ldd	r25, Z+3	; 0x03
 944:	0c 5f       	subi	r16, 0xFC	; 252
 946:	1f 4f       	sbci	r17, 0xFF	; 255
 948:	08 c0       	rjmp	.+16     	; 0x95a <vfprintf+0x1f6>
 94a:	60 81       	ld	r22, Z
 94c:	71 81       	ldd	r23, Z+1	; 0x01
 94e:	07 2e       	mov	r0, r23
 950:	00 0c       	add	r0, r0
 952:	88 0b       	sbc	r24, r24
 954:	99 0b       	sbc	r25, r25
 956:	0e 5f       	subi	r16, 0xFE	; 254
 958:	1f 4f       	sbci	r17, 0xFF	; 255
 95a:	f3 2d       	mov	r31, r3
 95c:	ff 76       	andi	r31, 0x6F	; 111
 95e:	3f 2e       	mov	r3, r31
 960:	97 ff       	sbrs	r25, 7
 962:	09 c0       	rjmp	.+18     	; 0x976 <vfprintf+0x212>
 964:	90 95       	com	r25
 966:	80 95       	com	r24
 968:	70 95       	com	r23
 96a:	61 95       	neg	r22
 96c:	7f 4f       	sbci	r23, 0xFF	; 255
 96e:	8f 4f       	sbci	r24, 0xFF	; 255
 970:	9f 4f       	sbci	r25, 0xFF	; 255
 972:	f0 68       	ori	r31, 0x80	; 128
 974:	3f 2e       	mov	r3, r31
 976:	2a e0       	ldi	r18, 0x0A	; 10
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	a3 01       	movw	r20, r6
 97c:	0e 94 e5 05 	call	0xbca	; 0xbca <__ultoa_invert>
 980:	88 2e       	mov	r8, r24
 982:	86 18       	sub	r8, r6
 984:	45 c0       	rjmp	.+138    	; 0xa10 <__DATA_REGION_LENGTH__+0x10>
 986:	85 37       	cpi	r24, 0x75	; 117
 988:	31 f4       	brne	.+12     	; 0x996 <vfprintf+0x232>
 98a:	23 2d       	mov	r18, r3
 98c:	2f 7e       	andi	r18, 0xEF	; 239
 98e:	b2 2e       	mov	r11, r18
 990:	2a e0       	ldi	r18, 0x0A	; 10
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	25 c0       	rjmp	.+74     	; 0x9e0 <vfprintf+0x27c>
 996:	93 2d       	mov	r25, r3
 998:	99 7f       	andi	r25, 0xF9	; 249
 99a:	b9 2e       	mov	r11, r25
 99c:	8f 36       	cpi	r24, 0x6F	; 111
 99e:	c1 f0       	breq	.+48     	; 0x9d0 <vfprintf+0x26c>
 9a0:	18 f4       	brcc	.+6      	; 0x9a8 <vfprintf+0x244>
 9a2:	88 35       	cpi	r24, 0x58	; 88
 9a4:	79 f0       	breq	.+30     	; 0x9c4 <vfprintf+0x260>
 9a6:	b5 c0       	rjmp	.+362    	; 0xb12 <__stack+0x13>
 9a8:	80 37       	cpi	r24, 0x70	; 112
 9aa:	19 f0       	breq	.+6      	; 0x9b2 <vfprintf+0x24e>
 9ac:	88 37       	cpi	r24, 0x78	; 120
 9ae:	21 f0       	breq	.+8      	; 0x9b8 <vfprintf+0x254>
 9b0:	b0 c0       	rjmp	.+352    	; 0xb12 <__stack+0x13>
 9b2:	e9 2f       	mov	r30, r25
 9b4:	e0 61       	ori	r30, 0x10	; 16
 9b6:	be 2e       	mov	r11, r30
 9b8:	b4 fe       	sbrs	r11, 4
 9ba:	0d c0       	rjmp	.+26     	; 0x9d6 <vfprintf+0x272>
 9bc:	fb 2d       	mov	r31, r11
 9be:	f4 60       	ori	r31, 0x04	; 4
 9c0:	bf 2e       	mov	r11, r31
 9c2:	09 c0       	rjmp	.+18     	; 0x9d6 <vfprintf+0x272>
 9c4:	34 fe       	sbrs	r3, 4
 9c6:	0a c0       	rjmp	.+20     	; 0x9dc <vfprintf+0x278>
 9c8:	29 2f       	mov	r18, r25
 9ca:	26 60       	ori	r18, 0x06	; 6
 9cc:	b2 2e       	mov	r11, r18
 9ce:	06 c0       	rjmp	.+12     	; 0x9dc <vfprintf+0x278>
 9d0:	28 e0       	ldi	r18, 0x08	; 8
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <vfprintf+0x27c>
 9d6:	20 e1       	ldi	r18, 0x10	; 16
 9d8:	30 e0       	ldi	r19, 0x00	; 0
 9da:	02 c0       	rjmp	.+4      	; 0x9e0 <vfprintf+0x27c>
 9dc:	20 e1       	ldi	r18, 0x10	; 16
 9de:	32 e0       	ldi	r19, 0x02	; 2
 9e0:	f8 01       	movw	r30, r16
 9e2:	b7 fe       	sbrs	r11, 7
 9e4:	07 c0       	rjmp	.+14     	; 0x9f4 <vfprintf+0x290>
 9e6:	60 81       	ld	r22, Z
 9e8:	71 81       	ldd	r23, Z+1	; 0x01
 9ea:	82 81       	ldd	r24, Z+2	; 0x02
 9ec:	93 81       	ldd	r25, Z+3	; 0x03
 9ee:	0c 5f       	subi	r16, 0xFC	; 252
 9f0:	1f 4f       	sbci	r17, 0xFF	; 255
 9f2:	06 c0       	rjmp	.+12     	; 0xa00 <__DATA_REGION_LENGTH__>
 9f4:	60 81       	ld	r22, Z
 9f6:	71 81       	ldd	r23, Z+1	; 0x01
 9f8:	80 e0       	ldi	r24, 0x00	; 0
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	0e 5f       	subi	r16, 0xFE	; 254
 9fe:	1f 4f       	sbci	r17, 0xFF	; 255
 a00:	a3 01       	movw	r20, r6
 a02:	0e 94 e5 05 	call	0xbca	; 0xbca <__ultoa_invert>
 a06:	88 2e       	mov	r8, r24
 a08:	86 18       	sub	r8, r6
 a0a:	fb 2d       	mov	r31, r11
 a0c:	ff 77       	andi	r31, 0x7F	; 127
 a0e:	3f 2e       	mov	r3, r31
 a10:	36 fe       	sbrs	r3, 6
 a12:	0d c0       	rjmp	.+26     	; 0xa2e <__DATA_REGION_LENGTH__+0x2e>
 a14:	23 2d       	mov	r18, r3
 a16:	2e 7f       	andi	r18, 0xFE	; 254
 a18:	a2 2e       	mov	r10, r18
 a1a:	89 14       	cp	r8, r9
 a1c:	58 f4       	brcc	.+22     	; 0xa34 <__DATA_REGION_LENGTH__+0x34>
 a1e:	34 fe       	sbrs	r3, 4
 a20:	0b c0       	rjmp	.+22     	; 0xa38 <__DATA_REGION_LENGTH__+0x38>
 a22:	32 fc       	sbrc	r3, 2
 a24:	09 c0       	rjmp	.+18     	; 0xa38 <__DATA_REGION_LENGTH__+0x38>
 a26:	83 2d       	mov	r24, r3
 a28:	8e 7e       	andi	r24, 0xEE	; 238
 a2a:	a8 2e       	mov	r10, r24
 a2c:	05 c0       	rjmp	.+10     	; 0xa38 <__DATA_REGION_LENGTH__+0x38>
 a2e:	b8 2c       	mov	r11, r8
 a30:	a3 2c       	mov	r10, r3
 a32:	03 c0       	rjmp	.+6      	; 0xa3a <__DATA_REGION_LENGTH__+0x3a>
 a34:	b8 2c       	mov	r11, r8
 a36:	01 c0       	rjmp	.+2      	; 0xa3a <__DATA_REGION_LENGTH__+0x3a>
 a38:	b9 2c       	mov	r11, r9
 a3a:	a4 fe       	sbrs	r10, 4
 a3c:	0f c0       	rjmp	.+30     	; 0xa5c <__DATA_REGION_LENGTH__+0x5c>
 a3e:	fe 01       	movw	r30, r28
 a40:	e8 0d       	add	r30, r8
 a42:	f1 1d       	adc	r31, r1
 a44:	80 81       	ld	r24, Z
 a46:	80 33       	cpi	r24, 0x30	; 48
 a48:	21 f4       	brne	.+8      	; 0xa52 <__DATA_REGION_LENGTH__+0x52>
 a4a:	9a 2d       	mov	r25, r10
 a4c:	99 7e       	andi	r25, 0xE9	; 233
 a4e:	a9 2e       	mov	r10, r25
 a50:	09 c0       	rjmp	.+18     	; 0xa64 <__DATA_REGION_LENGTH__+0x64>
 a52:	a2 fe       	sbrs	r10, 2
 a54:	06 c0       	rjmp	.+12     	; 0xa62 <__DATA_REGION_LENGTH__+0x62>
 a56:	b3 94       	inc	r11
 a58:	b3 94       	inc	r11
 a5a:	04 c0       	rjmp	.+8      	; 0xa64 <__DATA_REGION_LENGTH__+0x64>
 a5c:	8a 2d       	mov	r24, r10
 a5e:	86 78       	andi	r24, 0x86	; 134
 a60:	09 f0       	breq	.+2      	; 0xa64 <__DATA_REGION_LENGTH__+0x64>
 a62:	b3 94       	inc	r11
 a64:	a3 fc       	sbrc	r10, 3
 a66:	11 c0       	rjmp	.+34     	; 0xa8a <__DATA_REGION_LENGTH__+0x8a>
 a68:	a0 fe       	sbrs	r10, 0
 a6a:	06 c0       	rjmp	.+12     	; 0xa78 <__DATA_REGION_LENGTH__+0x78>
 a6c:	b2 14       	cp	r11, r2
 a6e:	88 f4       	brcc	.+34     	; 0xa92 <__DATA_REGION_LENGTH__+0x92>
 a70:	28 0c       	add	r2, r8
 a72:	92 2c       	mov	r9, r2
 a74:	9b 18       	sub	r9, r11
 a76:	0e c0       	rjmp	.+28     	; 0xa94 <__DATA_REGION_LENGTH__+0x94>
 a78:	b2 14       	cp	r11, r2
 a7a:	60 f4       	brcc	.+24     	; 0xa94 <__DATA_REGION_LENGTH__+0x94>
 a7c:	b6 01       	movw	r22, r12
 a7e:	80 e2       	ldi	r24, 0x20	; 32
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	0e 94 a9 05 	call	0xb52	; 0xb52 <fputc>
 a86:	b3 94       	inc	r11
 a88:	f7 cf       	rjmp	.-18     	; 0xa78 <__DATA_REGION_LENGTH__+0x78>
 a8a:	b2 14       	cp	r11, r2
 a8c:	18 f4       	brcc	.+6      	; 0xa94 <__DATA_REGION_LENGTH__+0x94>
 a8e:	2b 18       	sub	r2, r11
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <__DATA_REGION_LENGTH__+0x96>
 a92:	98 2c       	mov	r9, r8
 a94:	21 2c       	mov	r2, r1
 a96:	a4 fe       	sbrs	r10, 4
 a98:	10 c0       	rjmp	.+32     	; 0xaba <__DATA_REGION_LENGTH__+0xba>
 a9a:	b6 01       	movw	r22, r12
 a9c:	80 e3       	ldi	r24, 0x30	; 48
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	0e 94 a9 05 	call	0xb52	; 0xb52 <fputc>
 aa4:	a2 fe       	sbrs	r10, 2
 aa6:	17 c0       	rjmp	.+46     	; 0xad6 <__DATA_REGION_LENGTH__+0xd6>
 aa8:	a1 fc       	sbrc	r10, 1
 aaa:	03 c0       	rjmp	.+6      	; 0xab2 <__DATA_REGION_LENGTH__+0xb2>
 aac:	88 e7       	ldi	r24, 0x78	; 120
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <__DATA_REGION_LENGTH__+0xb6>
 ab2:	88 e5       	ldi	r24, 0x58	; 88
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	b6 01       	movw	r22, r12
 ab8:	0c c0       	rjmp	.+24     	; 0xad2 <__DATA_REGION_LENGTH__+0xd2>
 aba:	8a 2d       	mov	r24, r10
 abc:	86 78       	andi	r24, 0x86	; 134
 abe:	59 f0       	breq	.+22     	; 0xad6 <__DATA_REGION_LENGTH__+0xd6>
 ac0:	a1 fe       	sbrs	r10, 1
 ac2:	02 c0       	rjmp	.+4      	; 0xac8 <__DATA_REGION_LENGTH__+0xc8>
 ac4:	8b e2       	ldi	r24, 0x2B	; 43
 ac6:	01 c0       	rjmp	.+2      	; 0xaca <__DATA_REGION_LENGTH__+0xca>
 ac8:	80 e2       	ldi	r24, 0x20	; 32
 aca:	a7 fc       	sbrc	r10, 7
 acc:	8d e2       	ldi	r24, 0x2D	; 45
 ace:	b6 01       	movw	r22, r12
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	0e 94 a9 05 	call	0xb52	; 0xb52 <fputc>
 ad6:	89 14       	cp	r8, r9
 ad8:	38 f4       	brcc	.+14     	; 0xae8 <__DATA_REGION_LENGTH__+0xe8>
 ada:	b6 01       	movw	r22, r12
 adc:	80 e3       	ldi	r24, 0x30	; 48
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	0e 94 a9 05 	call	0xb52	; 0xb52 <fputc>
 ae4:	9a 94       	dec	r9
 ae6:	f7 cf       	rjmp	.-18     	; 0xad6 <__DATA_REGION_LENGTH__+0xd6>
 ae8:	8a 94       	dec	r8
 aea:	f3 01       	movw	r30, r6
 aec:	e8 0d       	add	r30, r8
 aee:	f1 1d       	adc	r31, r1
 af0:	80 81       	ld	r24, Z
 af2:	b6 01       	movw	r22, r12
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	0e 94 a9 05 	call	0xb52	; 0xb52 <fputc>
 afa:	81 10       	cpse	r8, r1
 afc:	f5 cf       	rjmp	.-22     	; 0xae8 <__DATA_REGION_LENGTH__+0xe8>
 afe:	22 20       	and	r2, r2
 b00:	09 f4       	brne	.+2      	; 0xb04 <__stack+0x5>
 b02:	42 ce       	rjmp	.-892    	; 0x788 <vfprintf+0x24>
 b04:	b6 01       	movw	r22, r12
 b06:	80 e2       	ldi	r24, 0x20	; 32
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	0e 94 a9 05 	call	0xb52	; 0xb52 <fputc>
 b0e:	2a 94       	dec	r2
 b10:	f6 cf       	rjmp	.-20     	; 0xafe <__DATA_REGION_LENGTH__+0xfe>
 b12:	f6 01       	movw	r30, r12
 b14:	86 81       	ldd	r24, Z+6	; 0x06
 b16:	97 81       	ldd	r25, Z+7	; 0x07
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <__stack+0x1f>
 b1a:	8f ef       	ldi	r24, 0xFF	; 255
 b1c:	9f ef       	ldi	r25, 0xFF	; 255
 b1e:	2b 96       	adiw	r28, 0x0b	; 11
 b20:	e2 e1       	ldi	r30, 0x12	; 18
 b22:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__epilogue_restores__>

00000b26 <strnlen_P>:
 b26:	fc 01       	movw	r30, r24
 b28:	05 90       	lpm	r0, Z+
 b2a:	61 50       	subi	r22, 0x01	; 1
 b2c:	70 40       	sbci	r23, 0x00	; 0
 b2e:	01 10       	cpse	r0, r1
 b30:	d8 f7       	brcc	.-10     	; 0xb28 <strnlen_P+0x2>
 b32:	80 95       	com	r24
 b34:	90 95       	com	r25
 b36:	8e 0f       	add	r24, r30
 b38:	9f 1f       	adc	r25, r31
 b3a:	08 95       	ret

00000b3c <strnlen>:
 b3c:	fc 01       	movw	r30, r24
 b3e:	61 50       	subi	r22, 0x01	; 1
 b40:	70 40       	sbci	r23, 0x00	; 0
 b42:	01 90       	ld	r0, Z+
 b44:	01 10       	cpse	r0, r1
 b46:	d8 f7       	brcc	.-10     	; 0xb3e <strnlen+0x2>
 b48:	80 95       	com	r24
 b4a:	90 95       	com	r25
 b4c:	8e 0f       	add	r24, r30
 b4e:	9f 1f       	adc	r25, r31
 b50:	08 95       	ret

00000b52 <fputc>:
 b52:	0f 93       	push	r16
 b54:	1f 93       	push	r17
 b56:	cf 93       	push	r28
 b58:	df 93       	push	r29
 b5a:	fb 01       	movw	r30, r22
 b5c:	23 81       	ldd	r18, Z+3	; 0x03
 b5e:	21 fd       	sbrc	r18, 1
 b60:	03 c0       	rjmp	.+6      	; 0xb68 <fputc+0x16>
 b62:	8f ef       	ldi	r24, 0xFF	; 255
 b64:	9f ef       	ldi	r25, 0xFF	; 255
 b66:	2c c0       	rjmp	.+88     	; 0xbc0 <fputc+0x6e>
 b68:	22 ff       	sbrs	r18, 2
 b6a:	16 c0       	rjmp	.+44     	; 0xb98 <fputc+0x46>
 b6c:	46 81       	ldd	r20, Z+6	; 0x06
 b6e:	57 81       	ldd	r21, Z+7	; 0x07
 b70:	24 81       	ldd	r18, Z+4	; 0x04
 b72:	35 81       	ldd	r19, Z+5	; 0x05
 b74:	42 17       	cp	r20, r18
 b76:	53 07       	cpc	r21, r19
 b78:	44 f4       	brge	.+16     	; 0xb8a <fputc+0x38>
 b7a:	a0 81       	ld	r26, Z
 b7c:	b1 81       	ldd	r27, Z+1	; 0x01
 b7e:	9d 01       	movw	r18, r26
 b80:	2f 5f       	subi	r18, 0xFF	; 255
 b82:	3f 4f       	sbci	r19, 0xFF	; 255
 b84:	31 83       	std	Z+1, r19	; 0x01
 b86:	20 83       	st	Z, r18
 b88:	8c 93       	st	X, r24
 b8a:	26 81       	ldd	r18, Z+6	; 0x06
 b8c:	37 81       	ldd	r19, Z+7	; 0x07
 b8e:	2f 5f       	subi	r18, 0xFF	; 255
 b90:	3f 4f       	sbci	r19, 0xFF	; 255
 b92:	37 83       	std	Z+7, r19	; 0x07
 b94:	26 83       	std	Z+6, r18	; 0x06
 b96:	14 c0       	rjmp	.+40     	; 0xbc0 <fputc+0x6e>
 b98:	8b 01       	movw	r16, r22
 b9a:	ec 01       	movw	r28, r24
 b9c:	fb 01       	movw	r30, r22
 b9e:	00 84       	ldd	r0, Z+8	; 0x08
 ba0:	f1 85       	ldd	r31, Z+9	; 0x09
 ba2:	e0 2d       	mov	r30, r0
 ba4:	09 95       	icall
 ba6:	89 2b       	or	r24, r25
 ba8:	e1 f6       	brne	.-72     	; 0xb62 <fputc+0x10>
 baa:	d8 01       	movw	r26, r16
 bac:	16 96       	adiw	r26, 0x06	; 6
 bae:	8d 91       	ld	r24, X+
 bb0:	9c 91       	ld	r25, X
 bb2:	17 97       	sbiw	r26, 0x07	; 7
 bb4:	01 96       	adiw	r24, 0x01	; 1
 bb6:	17 96       	adiw	r26, 0x07	; 7
 bb8:	9c 93       	st	X, r25
 bba:	8e 93       	st	-X, r24
 bbc:	16 97       	sbiw	r26, 0x06	; 6
 bbe:	ce 01       	movw	r24, r28
 bc0:	df 91       	pop	r29
 bc2:	cf 91       	pop	r28
 bc4:	1f 91       	pop	r17
 bc6:	0f 91       	pop	r16
 bc8:	08 95       	ret

00000bca <__ultoa_invert>:
 bca:	fa 01       	movw	r30, r20
 bcc:	aa 27       	eor	r26, r26
 bce:	28 30       	cpi	r18, 0x08	; 8
 bd0:	51 f1       	breq	.+84     	; 0xc26 <__ultoa_invert+0x5c>
 bd2:	20 31       	cpi	r18, 0x10	; 16
 bd4:	81 f1       	breq	.+96     	; 0xc36 <__ultoa_invert+0x6c>
 bd6:	e8 94       	clt
 bd8:	6f 93       	push	r22
 bda:	6e 7f       	andi	r22, 0xFE	; 254
 bdc:	6e 5f       	subi	r22, 0xFE	; 254
 bde:	7f 4f       	sbci	r23, 0xFF	; 255
 be0:	8f 4f       	sbci	r24, 0xFF	; 255
 be2:	9f 4f       	sbci	r25, 0xFF	; 255
 be4:	af 4f       	sbci	r26, 0xFF	; 255
 be6:	b1 e0       	ldi	r27, 0x01	; 1
 be8:	3e d0       	rcall	.+124    	; 0xc66 <__ultoa_invert+0x9c>
 bea:	b4 e0       	ldi	r27, 0x04	; 4
 bec:	3c d0       	rcall	.+120    	; 0xc66 <__ultoa_invert+0x9c>
 bee:	67 0f       	add	r22, r23
 bf0:	78 1f       	adc	r23, r24
 bf2:	89 1f       	adc	r24, r25
 bf4:	9a 1f       	adc	r25, r26
 bf6:	a1 1d       	adc	r26, r1
 bf8:	68 0f       	add	r22, r24
 bfa:	79 1f       	adc	r23, r25
 bfc:	8a 1f       	adc	r24, r26
 bfe:	91 1d       	adc	r25, r1
 c00:	a1 1d       	adc	r26, r1
 c02:	6a 0f       	add	r22, r26
 c04:	71 1d       	adc	r23, r1
 c06:	81 1d       	adc	r24, r1
 c08:	91 1d       	adc	r25, r1
 c0a:	a1 1d       	adc	r26, r1
 c0c:	20 d0       	rcall	.+64     	; 0xc4e <__ultoa_invert+0x84>
 c0e:	09 f4       	brne	.+2      	; 0xc12 <__ultoa_invert+0x48>
 c10:	68 94       	set
 c12:	3f 91       	pop	r19
 c14:	2a e0       	ldi	r18, 0x0A	; 10
 c16:	26 9f       	mul	r18, r22
 c18:	11 24       	eor	r1, r1
 c1a:	30 19       	sub	r19, r0
 c1c:	30 5d       	subi	r19, 0xD0	; 208
 c1e:	31 93       	st	Z+, r19
 c20:	de f6       	brtc	.-74     	; 0xbd8 <__ultoa_invert+0xe>
 c22:	cf 01       	movw	r24, r30
 c24:	08 95       	ret
 c26:	46 2f       	mov	r20, r22
 c28:	47 70       	andi	r20, 0x07	; 7
 c2a:	40 5d       	subi	r20, 0xD0	; 208
 c2c:	41 93       	st	Z+, r20
 c2e:	b3 e0       	ldi	r27, 0x03	; 3
 c30:	0f d0       	rcall	.+30     	; 0xc50 <__ultoa_invert+0x86>
 c32:	c9 f7       	brne	.-14     	; 0xc26 <__ultoa_invert+0x5c>
 c34:	f6 cf       	rjmp	.-20     	; 0xc22 <__ultoa_invert+0x58>
 c36:	46 2f       	mov	r20, r22
 c38:	4f 70       	andi	r20, 0x0F	; 15
 c3a:	40 5d       	subi	r20, 0xD0	; 208
 c3c:	4a 33       	cpi	r20, 0x3A	; 58
 c3e:	18 f0       	brcs	.+6      	; 0xc46 <__ultoa_invert+0x7c>
 c40:	49 5d       	subi	r20, 0xD9	; 217
 c42:	31 fd       	sbrc	r19, 1
 c44:	40 52       	subi	r20, 0x20	; 32
 c46:	41 93       	st	Z+, r20
 c48:	02 d0       	rcall	.+4      	; 0xc4e <__ultoa_invert+0x84>
 c4a:	a9 f7       	brne	.-22     	; 0xc36 <__ultoa_invert+0x6c>
 c4c:	ea cf       	rjmp	.-44     	; 0xc22 <__ultoa_invert+0x58>
 c4e:	b4 e0       	ldi	r27, 0x04	; 4
 c50:	a6 95       	lsr	r26
 c52:	97 95       	ror	r25
 c54:	87 95       	ror	r24
 c56:	77 95       	ror	r23
 c58:	67 95       	ror	r22
 c5a:	ba 95       	dec	r27
 c5c:	c9 f7       	brne	.-14     	; 0xc50 <__ultoa_invert+0x86>
 c5e:	00 97       	sbiw	r24, 0x00	; 0
 c60:	61 05       	cpc	r22, r1
 c62:	71 05       	cpc	r23, r1
 c64:	08 95       	ret
 c66:	9b 01       	movw	r18, r22
 c68:	ac 01       	movw	r20, r24
 c6a:	0a 2e       	mov	r0, r26
 c6c:	06 94       	lsr	r0
 c6e:	57 95       	ror	r21
 c70:	47 95       	ror	r20
 c72:	37 95       	ror	r19
 c74:	27 95       	ror	r18
 c76:	ba 95       	dec	r27
 c78:	c9 f7       	brne	.-14     	; 0xc6c <__ultoa_invert+0xa2>
 c7a:	62 0f       	add	r22, r18
 c7c:	73 1f       	adc	r23, r19
 c7e:	84 1f       	adc	r24, r20
 c80:	95 1f       	adc	r25, r21
 c82:	a0 1d       	adc	r26, r0
 c84:	08 95       	ret

00000c86 <__muluhisi3>:
 c86:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__umulhisi3>
 c8a:	a5 9f       	mul	r26, r21
 c8c:	90 0d       	add	r25, r0
 c8e:	b4 9f       	mul	r27, r20
 c90:	90 0d       	add	r25, r0
 c92:	a4 9f       	mul	r26, r20
 c94:	80 0d       	add	r24, r0
 c96:	91 1d       	adc	r25, r1
 c98:	11 24       	eor	r1, r1
 c9a:	08 95       	ret

00000c9c <__mulshisi3>:
 c9c:	b7 ff       	sbrs	r27, 7
 c9e:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__muluhisi3>

00000ca2 <__mulohisi3>:
 ca2:	0e 94 43 06 	call	0xc86	; 0xc86 <__muluhisi3>
 ca6:	82 1b       	sub	r24, r18
 ca8:	93 0b       	sbc	r25, r19
 caa:	08 95       	ret

00000cac <__prologue_saves__>:
 cac:	2f 92       	push	r2
 cae:	3f 92       	push	r3
 cb0:	4f 92       	push	r4
 cb2:	5f 92       	push	r5
 cb4:	6f 92       	push	r6
 cb6:	7f 92       	push	r7
 cb8:	8f 92       	push	r8
 cba:	9f 92       	push	r9
 cbc:	af 92       	push	r10
 cbe:	bf 92       	push	r11
 cc0:	cf 92       	push	r12
 cc2:	df 92       	push	r13
 cc4:	ef 92       	push	r14
 cc6:	ff 92       	push	r15
 cc8:	0f 93       	push	r16
 cca:	1f 93       	push	r17
 ccc:	cf 93       	push	r28
 cce:	df 93       	push	r29
 cd0:	cd b7       	in	r28, 0x3d	; 61
 cd2:	de b7       	in	r29, 0x3e	; 62
 cd4:	ca 1b       	sub	r28, r26
 cd6:	db 0b       	sbc	r29, r27
 cd8:	0f b6       	in	r0, 0x3f	; 63
 cda:	f8 94       	cli
 cdc:	de bf       	out	0x3e, r29	; 62
 cde:	0f be       	out	0x3f, r0	; 63
 ce0:	cd bf       	out	0x3d, r28	; 61
 ce2:	09 94       	ijmp

00000ce4 <__epilogue_restores__>:
 ce4:	2a 88       	ldd	r2, Y+18	; 0x12
 ce6:	39 88       	ldd	r3, Y+17	; 0x11
 ce8:	48 88       	ldd	r4, Y+16	; 0x10
 cea:	5f 84       	ldd	r5, Y+15	; 0x0f
 cec:	6e 84       	ldd	r6, Y+14	; 0x0e
 cee:	7d 84       	ldd	r7, Y+13	; 0x0d
 cf0:	8c 84       	ldd	r8, Y+12	; 0x0c
 cf2:	9b 84       	ldd	r9, Y+11	; 0x0b
 cf4:	aa 84       	ldd	r10, Y+10	; 0x0a
 cf6:	b9 84       	ldd	r11, Y+9	; 0x09
 cf8:	c8 84       	ldd	r12, Y+8	; 0x08
 cfa:	df 80       	ldd	r13, Y+7	; 0x07
 cfc:	ee 80       	ldd	r14, Y+6	; 0x06
 cfe:	fd 80       	ldd	r15, Y+5	; 0x05
 d00:	0c 81       	ldd	r16, Y+4	; 0x04
 d02:	1b 81       	ldd	r17, Y+3	; 0x03
 d04:	aa 81       	ldd	r26, Y+2	; 0x02
 d06:	b9 81       	ldd	r27, Y+1	; 0x01
 d08:	ce 0f       	add	r28, r30
 d0a:	d1 1d       	adc	r29, r1
 d0c:	0f b6       	in	r0, 0x3f	; 63
 d0e:	f8 94       	cli
 d10:	de bf       	out	0x3e, r29	; 62
 d12:	0f be       	out	0x3f, r0	; 63
 d14:	cd bf       	out	0x3d, r28	; 61
 d16:	ed 01       	movw	r28, r26
 d18:	08 95       	ret

00000d1a <__umulhisi3>:
 d1a:	a2 9f       	mul	r26, r18
 d1c:	b0 01       	movw	r22, r0
 d1e:	b3 9f       	mul	r27, r19
 d20:	c0 01       	movw	r24, r0
 d22:	a3 9f       	mul	r26, r19
 d24:	70 0d       	add	r23, r0
 d26:	81 1d       	adc	r24, r1
 d28:	11 24       	eor	r1, r1
 d2a:	91 1d       	adc	r25, r1
 d2c:	b2 9f       	mul	r27, r18
 d2e:	70 0d       	add	r23, r0
 d30:	81 1d       	adc	r24, r1
 d32:	11 24       	eor	r1, r1
 d34:	91 1d       	adc	r25, r1
 d36:	08 95       	ret

00000d38 <_exit>:
 d38:	f8 94       	cli

00000d3a <__stop_program>:
 d3a:	ff cf       	rjmp	.-2      	; 0xd3a <__stop_program>
