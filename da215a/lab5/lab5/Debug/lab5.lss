
lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000b68  00000bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080012a  0080012a  00000c26  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a6  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb2  00000000  00000000  00002496  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa1  00000000  00000000  00003348  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00003dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000710  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a1  00000000  00000000  00004720  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004ec1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_29>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e8 e6       	ldi	r30, 0x68	; 104
  c0:	fb e0       	ldi	r31, 0x0B	; 11
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	aa 32       	cpi	r26, 0x2A	; 42
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	aa e2       	ldi	r26, 0x2A	; 42
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ac 32       	cpi	r26, 0x2C	; 44
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  e2:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <delay_1_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	RET
  fa:	08 95       	ret

000000fc <delay_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	DEC R24				; 1 cycle
 10c:	8a 95       	dec	r24
	CPI R24, 0			; more loops to do? 1 cycle
 10e:	80 30       	cpi	r24, 0x00	; 0
	BRNE delay_micros	;	continue!
 110:	a9 f7       	brne	.-22     	; 0xfc <delay_micros>
	RET
 112:	08 95       	ret

00000114 <delay_ms>:
;==============================================================================
; Delay of X ms
;	LDI + RCALL = 4 cycles
;==============================================================================
delay_ms:
	MOV R18, R24
 114:	28 2f       	mov	r18, r24

00000116 <loop_dms>:
loop_dms:
	LDI R24, 250
 116:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 118:	f1 df       	rcall	.-30     	; 0xfc <delay_micros>
	LDI R24, 250
 11a:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 11c:	ef df       	rcall	.-34     	; 0xfc <delay_micros>
	LDI R24, 250
 11e:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 120:	ed df       	rcall	.-38     	; 0xfc <delay_micros>
	LDI R24, 250
 122:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 124:	eb df       	rcall	.-42     	; 0xfc <delay_micros>
	DEC R18
 126:	2a 95       	dec	r18
	CPI R18, 0			; more loops to do?
 128:	20 30       	cpi	r18, 0x00	; 0
	BRNE loop_dms		;	continue!
 12a:	a9 f7       	brne	.-22     	; 0x116 <loop_dms>
	RET
 12c:	08 95       	ret

0000012e <delay_s>:

delay_s:
	MOV R18, R24
 12e:	28 2f       	mov	r18, r24

00000130 <loop_ds>:
loop_ds:
	PUSH R18
 130:	2f 93       	push	r18
	LDI R24, 250
 132:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 134:	ef df       	rcall	.-34     	; 0x114 <delay_ms>
	LDI R24, 250
 136:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 138:	ed df       	rcall	.-38     	; 0x114 <delay_ms>
	LDI R24, 250
 13a:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 13c:	eb df       	rcall	.-42     	; 0x114 <delay_ms>
	LDI R24, 250
 13e:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 140:	e9 df       	rcall	.-46     	; 0x114 <delay_ms>
	POP R18
 142:	2f 91       	pop	r18
	DEC R18
 144:	2a 95       	dec	r18
	CPI R18, 0			; more loops to do?
 146:	20 30       	cpi	r18, 0x00	; 0
	BRNE loop_dms		;	continue!
 148:	31 f7       	brne	.-52     	; 0x116 <loop_dms>
	RET
 14a:	08 95       	ret

0000014c <delay_1_s>:

delay_1_s:
	LDI R24, 250
 14c:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 14e:	e2 df       	rcall	.-60     	; 0x114 <delay_ms>
	LDI R24, 250
 150:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 152:	e0 df       	rcall	.-64     	; 0x114 <delay_ms>
	LDI R24, 250
 154:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 156:	de df       	rcall	.-68     	; 0x114 <delay_ms>
	LDI R24, 250
 158:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 15a:	dc df       	rcall	.-72     	; 0x114 <delay_ms>
 15c:	08 95       	ret

0000015e <hmi_init>:
		// convert number!
		str_to_uint16(numbers, length, p_int_nr);
	}
	// return the number of digits
	return length;
}
 15e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <numkey_init>
 162:	0e 94 90 01 	call	0x320	; 0x320 <lcd_init>
 166:	08 95       	ret

00000168 <output_msg>:
 *	p_str1: pointer to first character of the string.
 *	p_str2: pointer to first character of the string.
 *  delay_after_msg: number of seconds to wait after message is shown.
 */
void output_msg(char *p_str1, char *p_str2, uint8_t delay_after_msg)
{
 168:	ef 92       	push	r14
 16a:	ff 92       	push	r15
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	7c 01       	movw	r14, r24
 174:	8b 01       	movw	r16, r22
 176:	c4 2f       	mov	r28, r20

	lcd_set_cursor_mode(CURSOR_OFF);
 178:	8c e0       	ldi	r24, 0x0C	; 12
 17a:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_set_cursor_mode>
	lcd_clear();
 17e:	0e 94 82 01 	call	0x304	; 0x304 <lcd_clear>
	lcd_write_str(p_str1);
 182:	c7 01       	movw	r24, r14
 184:	0e 94 ca 01 	call	0x394	; 0x394 <lcd_write_str>
	lcd_set_cursor_pos(1, 0);
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_set_cursor_pos>
	lcd_write_str(p_str2);
 190:	c8 01       	movw	r24, r16
 192:	0e 94 ca 01 	call	0x394	; 0x394 <lcd_write_str>
	if(delay_after_msg > 0) {
 196:	cc 23       	and	r28, r28
 198:	19 f0       	breq	.+6      	; 0x1a0 <output_msg+0x38>
		delay_s(delay_after_msg);
 19a:	8c 2f       	mov	r24, r28
 19c:	0e 94 97 00 	call	0x12e	; 0x12e <delay_s>
	}
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	08 95       	ret

000001ac <main>:
typedef enum state state_t;



int main(void)
{
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	61 97       	sbiw	r28, 0x11	; 17
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	de bf       	out	0x3e, r29	; 62
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	cd bf       	out	0x3d, r28	; 61
	
	state_t curr_state = SHOW_TEMP_F;
	state_t next_state = SHOW_TEMP_F;
	char key;
	hmi_init();
 1c0:	0e 94 af 00 	call	0x15e	; 0x15e <hmi_init>
	temp_init();
 1c4:	0e 94 12 02 	call	0x424	; 0x424 <temp_init>


int main(void)
{
	
	state_t curr_state = SHOW_TEMP_F;
 1c8:	11 e0       	ldi	r17, 0x01	; 1
	temp_init();
	char temp_str[17];
	
    while (1) 
    {
		key = numkey_read();
 1ca:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <numkey_read>
 1ce:	08 2f       	mov	r16, r24
		
		switch(curr_state){
 1d0:	11 30       	cpi	r17, 0x01	; 1
 1d2:	09 f1       	breq	.+66     	; 0x216 <main+0x6a>
 1d4:	18 f0       	brcs	.+6      	; 0x1dc <main+0x30>
 1d6:	12 30       	cpi	r17, 0x02	; 2
 1d8:	c9 f1       	breq	.+114    	; 0x24c <main+0xa0>
 1da:	65 c0       	rjmp	.+202    	; 0x2a6 <main+0xfa>
			case SHOW_TEMP_C:
				sprintf(temp_str, "%u%cC", temp_read_celsius(), 0xDF);
 1dc:	0e 94 32 02 	call	0x464	; 0x464 <temp_read_celsius>
 1e0:	1f 92       	push	r1
 1e2:	9f ed       	ldi	r25, 0xDF	; 223
 1e4:	9f 93       	push	r25
 1e6:	1f 92       	push	r1
 1e8:	8f 93       	push	r24
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	9f 93       	push	r25
 1f0:	8f 93       	push	r24
 1f2:	ce 01       	movw	r24, r28
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	9f 93       	push	r25
 1f8:	8f 93       	push	r24
 1fa:	0e 94 c8 02 	call	0x590	; 0x590 <sprintf>
				if(key == '2'){
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
 208:	02 33       	cpi	r16, 0x32	; 50
 20a:	09 f4       	brne	.+2      	; 0x20e <main+0x62>
 20c:	41 c0       	rjmp	.+130    	; 0x290 <main+0xe4>
					next_state = SHOW_TEMP_F;
				}else if (key == '3'){
 20e:	03 33       	cpi	r16, 0x33	; 51
 210:	09 f0       	breq	.+2      	; 0x214 <main+0x68>
 212:	49 c0       	rjmp	.+146    	; 0x2a6 <main+0xfa>
 214:	3f c0       	rjmp	.+126    	; 0x294 <main+0xe8>
					next_state = SHOW_TEMP_CF;
				}
				break;
			case SHOW_TEMP_F:
				sprintf(temp_str, "%u%cF", temp_read_fahrenheit(), 0xDF);
 216:	0e 94 64 02 	call	0x4c8	; 0x4c8 <temp_read_fahrenheit>
 21a:	1f 92       	push	r1
 21c:	9f ed       	ldi	r25, 0xDF	; 223
 21e:	9f 93       	push	r25
 220:	1f 92       	push	r1
 222:	8f 93       	push	r24
 224:	8c e0       	ldi	r24, 0x0C	; 12
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	9f 93       	push	r25
 22a:	8f 93       	push	r24
 22c:	ce 01       	movw	r24, r28
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	9f 93       	push	r25
 232:	8f 93       	push	r24
 234:	0e 94 c8 02 	call	0x590	; 0x590 <sprintf>
				if(key == '1'){
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	f8 94       	cli
 23c:	de bf       	out	0x3e, r29	; 62
 23e:	0f be       	out	0x3f, r0	; 63
 240:	cd bf       	out	0x3d, r28	; 61
 242:	01 33       	cpi	r16, 0x31	; 49
 244:	49 f1       	breq	.+82     	; 0x298 <main+0xec>
					next_state = SHOW_TEMP_C;
				}else if (key == '3'){
 246:	03 33       	cpi	r16, 0x33	; 51
 248:	71 f5       	brne	.+92     	; 0x2a6 <main+0xfa>
 24a:	28 c0       	rjmp	.+80     	; 0x29c <main+0xf0>
					next_state = SHOW_TEMP_CF;
				}
				break;
			case SHOW_TEMP_CF:
				sprintf(temp_str, "%u%cC/%u%cF", temp_read_celsius(), 0xDF, temp_read_fahrenheit(), 0xDF);
 24c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <temp_read_fahrenheit>
 250:	f8 2e       	mov	r15, r24
 252:	0e 94 32 02 	call	0x464	; 0x464 <temp_read_celsius>
 256:	1f 92       	push	r1
 258:	9f ed       	ldi	r25, 0xDF	; 223
 25a:	9f 93       	push	r25
 25c:	1f 92       	push	r1
 25e:	ff 92       	push	r15
 260:	1f 92       	push	r1
 262:	9f 93       	push	r25
 264:	1f 92       	push	r1
 266:	8f 93       	push	r24
 268:	86 e0       	ldi	r24, 0x06	; 6
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	9f 93       	push	r25
 26e:	8f 93       	push	r24
 270:	ce 01       	movw	r24, r28
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	9f 93       	push	r25
 276:	8f 93       	push	r24
 278:	0e 94 c8 02 	call	0x590	; 0x590 <sprintf>
				if(key == '1'){
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	de bf       	out	0x3e, r29	; 62
 282:	0f be       	out	0x3f, r0	; 63
 284:	cd bf       	out	0x3d, r28	; 61
 286:	01 33       	cpi	r16, 0x31	; 49
 288:	59 f0       	breq	.+22     	; 0x2a0 <main+0xf4>
					next_state = SHOW_TEMP_C;
				}else if (key == '2'){
 28a:	02 33       	cpi	r16, 0x32	; 50
 28c:	61 f4       	brne	.+24     	; 0x2a6 <main+0xfa>
 28e:	0a c0       	rjmp	.+20     	; 0x2a4 <main+0xf8>
		
		switch(curr_state){
			case SHOW_TEMP_C:
				sprintf(temp_str, "%u%cC", temp_read_celsius(), 0xDF);
				if(key == '2'){
					next_state = SHOW_TEMP_F;
 290:	11 e0       	ldi	r17, 0x01	; 1
 292:	09 c0       	rjmp	.+18     	; 0x2a6 <main+0xfa>
				}else if (key == '3'){
					next_state = SHOW_TEMP_CF;
 294:	12 e0       	ldi	r17, 0x02	; 2
 296:	07 c0       	rjmp	.+14     	; 0x2a6 <main+0xfa>
				}
				break;
			case SHOW_TEMP_F:
				sprintf(temp_str, "%u%cF", temp_read_fahrenheit(), 0xDF);
				if(key == '1'){
					next_state = SHOW_TEMP_C;
 298:	10 e0       	ldi	r17, 0x00	; 0
 29a:	05 c0       	rjmp	.+10     	; 0x2a6 <main+0xfa>
				}else if (key == '3'){
					next_state = SHOW_TEMP_CF;
 29c:	12 e0       	ldi	r17, 0x02	; 2
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <main+0xfa>
				}
				break;
			case SHOW_TEMP_CF:
				sprintf(temp_str, "%u%cC/%u%cF", temp_read_celsius(), 0xDF, temp_read_fahrenheit(), 0xDF);
				if(key == '1'){
					next_state = SHOW_TEMP_C;
 2a0:	10 e0       	ldi	r17, 0x00	; 0
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <main+0xfa>
				}else if (key == '2'){
					next_state = SHOW_TEMP_F;
 2a4:	11 e0       	ldi	r17, 0x01	; 1
				}
			
		}
		output_msg("TEMP------",temp_str,0);
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	be 01       	movw	r22, r28
 2aa:	6f 5f       	subi	r22, 0xFF	; 255
 2ac:	7f 4f       	sbci	r23, 0xFF	; 255
 2ae:	82 e1       	ldi	r24, 0x12	; 18
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	0e 94 b4 00 	call	0x168	; 0x168 <output_msg>
		curr_state = next_state;
    }
 2b6:	89 cf       	rjmp	.-238    	; 0x1ca <main+0x1e>

000002b8 <write_4bit_msb>:
 *	data: 4 bits of data
 */
static void write_4bit_msb(uint8_t data)
{
	//write data
	SET_BIT_LEVELS(PORTF, 0x0F, data);	
 2b8:	91 b3       	in	r25, 0x11	; 17
 2ba:	9f 70       	andi	r25, 0x0F	; 15
 2bc:	80 7f       	andi	r24, 0xF0	; 240
 2be:	89 2b       	or	r24, r25
 2c0:	81 bb       	out	0x11, r24	; 17
	// generate pulse on the Enable pin
	SET_BIT(PORTD, 7);
 2c2:	8b b1       	in	r24, 0x0b	; 11
 2c4:	80 68       	ori	r24, 0x80	; 128
 2c6:	8b b9       	out	0x0b, r24	; 11
	delay_1_micros();
 2c8:	0e 94 75 00 	call	0xea	; 0xea <delay_1_micros>
	CLR_BIT(PORTD, 7);
 2cc:	8b b1       	in	r24, 0x0b	; 11
 2ce:	8f 77       	andi	r24, 0x7F	; 127
 2d0:	8b b9       	out	0x0b, r24	; 11
 2d2:	08 95       	ret

000002d4 <lcd_write>:
 * parameter:
 *	lcd_reg: register to communicate with (Instruction or Data register)
 *	data: 8-bit instruction or data (character)
 */
void lcd_write(enum lcd_register lcd_reg, uint8_t data)
{
 2d4:	cf 93       	push	r28
 2d6:	c6 2f       	mov	r28, r22
	// select register
	if (lcd_reg == INSTRUCTION) {
 2d8:	81 11       	cpse	r24, r1
 2da:	04 c0       	rjmp	.+8      	; 0x2e4 <lcd_write+0x10>
		CLR_BIT(PORTD, 6);	// Instruction Register
 2dc:	8b b1       	in	r24, 0x0b	; 11
 2de:	8f 7b       	andi	r24, 0xBF	; 191
 2e0:	8b b9       	out	0x0b, r24	; 11
 2e2:	03 c0       	rjmp	.+6      	; 0x2ea <lcd_write+0x16>
	} else {
		SET_BIT(PORTD, 6);	// Data Register
 2e4:	8b b1       	in	r24, 0x0b	; 11
 2e6:	80 64       	ori	r24, 0x40	; 64
 2e8:	8b b9       	out	0x0b, r24	; 11
	}
	// write data
	write_4bit_msb(data);
 2ea:	8c 2f       	mov	r24, r28
 2ec:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <write_4bit_msb>
	write_4bit_msb(data << 4);
 2f0:	8c 2f       	mov	r24, r28
 2f2:	82 95       	swap	r24
 2f4:	80 7f       	andi	r24, 0xF0	; 240
 2f6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <write_4bit_msb>
	delay_micros(45);
 2fa:	8d e2       	ldi	r24, 0x2D	; 45
 2fc:	0e 94 7e 00 	call	0xfc	; 0xfc <delay_micros>
}
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <lcd_clear>:
/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
	lcd_write(INSTRUCTION, 0x01);
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <lcd_write>
	delay_ms(2);
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>
 312:	08 95       	ret

00000314 <lcd_set_cursor_mode>:
 *	mode: cursor mode
 */
void lcd_set_cursor_mode(enum lcd_cursor mode)
{
	uint8_t cursor_mode;
	cursor_mode = 0x0C | mode;
 314:	68 2f       	mov	r22, r24
 316:	6c 60       	ori	r22, 0x0C	; 12
	lcd_write(INSTRUCTION, cursor_mode);
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <lcd_write>
 31e:	08 95       	ret

00000320 <lcd_init>:
 *	- configuration of LCD communication
 */
void lcd_init(void)
{
	// PF4-PF7 (A3-A0) as outputs (LCD D4-D7)
	DDRF = 0xF0;
 320:	80 ef       	ldi	r24, 0xF0	; 240
 322:	80 bb       	out	0x10, r24	; 16
	// PD6 & PD7 (D12 & D6) as outputs (LCD RS & LCD E)
	DDRD = 0xC0;
 324:	80 ec       	ldi	r24, 0xC0	; 192
 326:	8a b9       	out	0x0a, r24	; 10
	
	// wait more than 15 ms after power-up!
	delay_ms(20);
 328:	84 e1       	ldi	r24, 0x14	; 20
 32a:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>
	// select Instruction Register
	CLR_BIT(PORTD, 6);
 32e:	8b b1       	in	r24, 0x0b	; 11
 330:	8f 7b       	andi	r24, 0xBF	; 191
 332:	8b b9       	out	0x0b, r24	; 11

	// Function Set: 8 bit data interface
	write_4bit_msb(0x30);
 334:	80 e3       	ldi	r24, 0x30	; 48
 336:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <write_4bit_msb>
	delay_ms(10);
 33a:	8a e0       	ldi	r24, 0x0A	; 10
 33c:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>
	write_4bit_msb(0x30);
 340:	80 e3       	ldi	r24, 0x30	; 48
 342:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <write_4bit_msb>
	delay_ms(10);
 346:	8a e0       	ldi	r24, 0x0A	; 10
 348:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>
	write_4bit_msb(0x30);
 34c:	80 e3       	ldi	r24, 0x30	; 48
 34e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <write_4bit_msb>
	delay_ms(10);
 352:	8a e0       	ldi	r24, 0x0A	; 10
 354:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>

	// Function Set: switch to 4 bit data interface
	write_4bit_msb(0x20);
 358:	80 e2       	ldi	r24, 0x20	; 32
 35a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <write_4bit_msb>
	delay_micros(45);
 35e:	8d e2       	ldi	r24, 0x2D	; 45
 360:	0e 94 7e 00 	call	0xfc	; 0xfc <delay_micros>

	// Function Set: 4 bit data interface, 2 lines, font 5x10
	lcd_write(INSTRUCTION, 0x28);		
 364:	68 e2       	ldi	r22, 0x28	; 40
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <lcd_write>

	// Display on, no cursor
	lcd_set_cursor_mode(CURSOR_BLINK);
 36c:	8f e0       	ldi	r24, 0x0F	; 15
 36e:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_set_cursor_mode>

	// clear display
	lcd_clear();
 372:	0e 94 82 01 	call	0x304	; 0x304 <lcd_clear>

	// Entry Mode Set: incremental cursor movement, no display shift
	lcd_write(INSTRUCTION, 0x06);
 376:	66 e0       	ldi	r22, 0x06	; 6
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <lcd_write>
 37e:	08 95       	ret

00000380 <lcd_set_cursor_pos>:
 *	col: 0 is the first column, 15 is the last visible column
 */
void lcd_set_cursor_pos(uint8_t row, uint8_t col)
{
	uint8_t cursor_pos;
	cursor_pos = 0x80 | (row << 6) | col;
 380:	20 e4       	ldi	r18, 0x40	; 64
 382:	82 9f       	mul	r24, r18
 384:	c0 01       	movw	r24, r0
 386:	11 24       	eor	r1, r1
 388:	68 2b       	or	r22, r24
 38a:	60 68       	ori	r22, 0x80	; 128
	lcd_write(INSTRUCTION, cursor_pos);	
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <lcd_write>
 392:	08 95       	ret

00000394 <lcd_write_str>:
 *
 * parameter:
 *	p_str: pointer to the string's first character
 */
void lcd_write_str(char *p_str)
{
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	ec 01       	movw	r28, r24
	while(*p_str != '\0'){
 39a:	04 c0       	rjmp	.+8      	; 0x3a4 <lcd_write_str+0x10>
		lcd_write(DATA, *p_str);
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <lcd_write>
		p_str++;
 3a2:	21 96       	adiw	r28, 0x01	; 1
 * parameter:
 *	p_str: pointer to the string's first character
 */
void lcd_write_str(char *p_str)
{
	while(*p_str != '\0'){
 3a4:	68 81       	ld	r22, Y
 3a6:	61 11       	cpse	r22, r1
 3a8:	f9 cf       	rjmp	.-14     	; 0x39c <lcd_write_str+0x8>
		lcd_write(DATA, *p_str);
		p_str++;
	}
	
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <numkey_init>:
 * This function configures the ports and pins to be used by the keyboard.
 */
void numkey_init(void)
{
	// PE6 (D7) as input (key pressed?)
	DDRE = 0x00;
 3b0:	1d b8       	out	0x0d, r1	; 13
	// PB4-PB7 (D8-D11) as outputs (MUX and decoder)
	DDRB = 0xF0;
 3b2:	80 ef       	ldi	r24, 0xF0	; 240
 3b4:	84 b9       	out	0x04, r24	; 4
 3b6:	08 95       	ret

000003b8 <numkey_read>:
 * return:
 *	If a key is pressed, then a character that represents the key is returned.
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
 3b8:	cf 93       	push	r28
	
	/* UPPGIFT: skriv en for-sats som stegar igenom alla tangenter, använd variabeln i. */
		// set column and row
			// UPPGIFT: använd SET_BIT_LEVELS() för att sätta bitar i registret PORTB!
		// wait before reading pin
	for(i = 0; i < 12; i++){
 3ba:	c0 e0       	ldi	r28, 0x00	; 0
 3bc:	11 c0       	rjmp	.+34     	; 0x3e0 <numkey_read+0x28>
		SET_BIT_LEVELS(PORTB, 0x00, (i << 4));
 3be:	85 b1       	in	r24, 0x05	; 5
 3c0:	8c 2f       	mov	r24, r28
 3c2:	82 95       	swap	r24
 3c4:	80 7f       	andi	r24, 0xF0	; 240
 3c6:	85 b9       	out	0x05, r24	; 5
		
		delay_ms(10);
 3c8:	8a e0       	ldi	r24, 0x0A	; 10
 3ca:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>
		
		if (PINE & (1 << 6)) {	// UPPGIFT: skriv om det logiska uttrycket i if-satsen, så att uttrycket blir sant om bit 6 i PINE är 1.
 3ce:	66 9b       	sbis	0x0c, 6	; 12
 3d0:	06 c0       	rjmp	.+12     	; 0x3de <numkey_read+0x26>
			return key_map[i];
 3d2:	ec 2f       	mov	r30, r28
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	e3 5e       	subi	r30, 0xE3	; 227
 3d8:	fe 4f       	sbci	r31, 0xFE	; 254
 3da:	80 81       	ld	r24, Z
 3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <numkey_read+0x2e>
	
	/* UPPGIFT: skriv en for-sats som stegar igenom alla tangenter, använd variabeln i. */
		// set column and row
			// UPPGIFT: använd SET_BIT_LEVELS() för att sätta bitar i registret PORTB!
		// wait before reading pin
	for(i = 0; i < 12; i++){
 3de:	cf 5f       	subi	r28, 0xFF	; 255
 3e0:	cc 30       	cpi	r28, 0x0C	; 12
 3e2:	68 f3       	brcs	.-38     	; 0x3be <numkey_read+0x6>
		if (PINE & (1 << 6)) {	// UPPGIFT: skriv om det logiska uttrycket i if-satsen, så att uttrycket blir sant om bit 6 i PINE är 1.
			return key_map[i];
		}
	}
	// no key was pressed!
	return NO_KEY;
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	cf 91       	pop	r28
 3e8:	08 95       	ret

000003ea <__vector_29>:
/*
 * Interrupt Service Routine for the ADC.
 * The ISR will execute when a A/D conversion is complete.
 */
ISR(ADC_vect)
{
 3ea:	1f 92       	push	r1
 3ec:	0f 92       	push	r0
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	0f 92       	push	r0
 3f2:	11 24       	eor	r1, r1
 3f4:	2f 93       	push	r18
 3f6:	8f 93       	push	r24
 3f8:	9f 93       	push	r25
	// read ADC value
	// UPPGIFT: Läs in ADC-värdet. Börja med att läsa av det "låga" registret, därefter det "höga" registret!
	
	unsigned char low, high;
	unsigned int value;
	low = ADCL;
 3fa:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
 3fe:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	value = (high << 8) + low;
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	98 2f       	mov	r25, r24
 406:	88 27       	eor	r24, r24
 408:	82 0f       	add	r24, r18
 40a:	91 1d       	adc	r25, r1
	adc = (uint16_t) value;
 40c:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
 410:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
	
}
 414:	9f 91       	pop	r25
 416:	8f 91       	pop	r24
 418:	2f 91       	pop	r18
 41a:	0f 90       	pop	r0
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	0f 90       	pop	r0
 420:	1f 90       	pop	r1
 422:	18 95       	reti

00000424 <temp_init>:
 * Initialize the ADC and ISR.
 */
void temp_init(void)
{
	// UPPGIFT: konfigurera ADC-enheten genom ställa in ADMUX och ADCSRA enligt kommentarerna nedanför!
	ADMUX |= (1 << REFS0);				// set reference voltage (internal 5V)
 424:	ec e7       	ldi	r30, 0x7C	; 124
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	80 64       	ori	r24, 0x40	; 64
 42c:	80 83       	st	Z, r24
	ADMUX |= (1 << MUX0) | (1 << MUX3);// select diff.amp 10x on ADC0 & ADC1
 42e:	80 81       	ld	r24, Z
 430:	89 60       	ori	r24, 0x09	; 9
 432:	80 83       	st	Z, r24
									// right adjustment of ADC value
	
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);	// prescaler 128
 434:	ea e7       	ldi	r30, 0x7A	; 122
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	87 60       	ori	r24, 0x07	; 7
 43c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE);	// enable Auto Trigger
 43e:	80 81       	ld	r24, Z
 440:	80 62       	ori	r24, 0x20	; 32
 442:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);		// enable Interrupt
 444:	80 81       	ld	r24, Z
 446:	88 60       	ori	r24, 0x08	; 8
 448:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);		// enable ADC
 44a:	80 81       	ld	r24, Z
 44c:	80 68       	ori	r24, 0x80	; 128
 44e:	80 83       	st	Z, r24

	// disable digital input on ADC0 and ADC1
	DIDR0 = 3;
 450:	83 e0       	ldi	r24, 0x03	; 3
 452:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
		
	// disable USB controller (to make interrupts possible)
	USBCON = 0;	
 456:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	// enable global interrupts
	sei();
 45a:	78 94       	sei

	// start initial conversion
	ADCSRA |= (1 << ADSC);	// UPPGIFT: gör så att den initiala A/D-omvandlingen sker
 45c:	80 81       	ld	r24, Z
 45e:	80 64       	ori	r24, 0x40	; 64
 460:	80 83       	st	Z, r24
 462:	08 95       	ret

00000464 <temp_read_celsius>:

/*
 * Returns the temperature in Celsius.
 */
uint8_t temp_read_celsius(void)
{
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
	uint16_t adc_correction = adc * 98;
 468:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 46c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
 470:	22 e6       	ldi	r18, 0x62	; 98
 472:	28 9f       	mul	r18, r24
 474:	a0 01       	movw	r20, r0
 476:	29 9f       	mul	r18, r25
 478:	50 0d       	add	r21, r0
 47a:	11 24       	eor	r1, r1
	uint16_t temp = adc_correction / 1000;
 47c:	ea 01       	movw	r28, r20
 47e:	d6 95       	lsr	r29
 480:	c7 95       	ror	r28
 482:	d6 95       	lsr	r29
 484:	c7 95       	ror	r28
 486:	d6 95       	lsr	r29
 488:	c7 95       	ror	r28
 48a:	9e 01       	movw	r18, r28
 48c:	a5 ec       	ldi	r26, 0xC5	; 197
 48e:	b0 e2       	ldi	r27, 0x20	; 32
 490:	0e 94 a5 02 	call	0x54a	; 0x54a <__umulhisi3>
 494:	fc 01       	movw	r30, r24
 496:	f2 95       	swap	r31
 498:	e2 95       	swap	r30
 49a:	ef 70       	andi	r30, 0x0F	; 15
 49c:	ef 27       	eor	r30, r31
 49e:	ff 70       	andi	r31, 0x0F	; 15
 4a0:	ef 27       	eor	r30, r31
	// round up?
	if ((adc_correction % 1000) >= 500) {
 4a2:	28 ee       	ldi	r18, 0xE8	; 232
 4a4:	33 e0       	ldi	r19, 0x03	; 3
 4a6:	e2 9f       	mul	r30, r18
 4a8:	c0 01       	movw	r24, r0
 4aa:	e3 9f       	mul	r30, r19
 4ac:	90 0d       	add	r25, r0
 4ae:	f2 9f       	mul	r31, r18
 4b0:	90 0d       	add	r25, r0
 4b2:	11 24       	eor	r1, r1
 4b4:	48 1b       	sub	r20, r24
 4b6:	59 0b       	sbc	r21, r25
 4b8:	44 3f       	cpi	r20, 0xF4	; 244
 4ba:	51 40       	sbci	r21, 0x01	; 1
 4bc:	08 f0       	brcs	.+2      	; 0x4c0 <temp_read_celsius+0x5c>
		temp++;
 4be:	31 96       	adiw	r30, 0x01	; 1
	}
	return (uint8_t) temp;
}
 4c0:	8e 2f       	mov	r24, r30
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <temp_read_fahrenheit>:
/*
 * Returns the temperature in Fahrenheit.
 */
uint8_t temp_read_fahrenheit(void)
{
	uint16_t convert = ((temp_read_celsius() * 90) / 5) + 320;
 4c8:	0e 94 32 02 	call	0x464	; 0x464 <temp_read_celsius>
 4cc:	2a e5       	ldi	r18, 0x5A	; 90
 4ce:	82 9f       	mul	r24, r18
 4d0:	c0 01       	movw	r24, r0
 4d2:	11 24       	eor	r1, r1
 4d4:	65 e0       	ldi	r22, 0x05	; 5
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	0e 94 91 02 	call	0x522	; 0x522 <__divmodhi4>
 4dc:	ab 01       	movw	r20, r22
 4de:	40 5c       	subi	r20, 0xC0	; 192
 4e0:	5e 4f       	sbci	r21, 0xFE	; 254
	uint16_t temp = convert / 10;
 4e2:	9a 01       	movw	r18, r20
 4e4:	ad ec       	ldi	r26, 0xCD	; 205
 4e6:	bc ec       	ldi	r27, 0xCC	; 204
 4e8:	0e 94 a5 02 	call	0x54a	; 0x54a <__umulhisi3>
 4ec:	fc 01       	movw	r30, r24
 4ee:	f6 95       	lsr	r31
 4f0:	e7 95       	ror	r30
 4f2:	f6 95       	lsr	r31
 4f4:	e7 95       	ror	r30
 4f6:	f6 95       	lsr	r31
 4f8:	e7 95       	ror	r30
	// round up?
	if ((convert % 10) >= 5) {
 4fa:	9f 01       	movw	r18, r30
 4fc:	22 0f       	add	r18, r18
 4fe:	33 1f       	adc	r19, r19
 500:	cf 01       	movw	r24, r30
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	82 0f       	add	r24, r18
 510:	93 1f       	adc	r25, r19
 512:	48 1b       	sub	r20, r24
 514:	59 0b       	sbc	r21, r25
 516:	45 30       	cpi	r20, 0x05	; 5
 518:	51 05       	cpc	r21, r1
 51a:	08 f0       	brcs	.+2      	; 0x51e <temp_read_fahrenheit+0x56>
		temp++;
 51c:	31 96       	adiw	r30, 0x01	; 1
	}
	return (uint8_t) temp;
 51e:	8e 2f       	mov	r24, r30
 520:	08 95       	ret

00000522 <__divmodhi4>:
 522:	97 fb       	bst	r25, 7
 524:	07 2e       	mov	r0, r23
 526:	16 f4       	brtc	.+4      	; 0x52c <__divmodhi4+0xa>
 528:	00 94       	com	r0
 52a:	07 d0       	rcall	.+14     	; 0x53a <__divmodhi4_neg1>
 52c:	77 fd       	sbrc	r23, 7
 52e:	09 d0       	rcall	.+18     	; 0x542 <__divmodhi4_neg2>
 530:	0e 94 b4 02 	call	0x568	; 0x568 <__udivmodhi4>
 534:	07 fc       	sbrc	r0, 7
 536:	05 d0       	rcall	.+10     	; 0x542 <__divmodhi4_neg2>
 538:	3e f4       	brtc	.+14     	; 0x548 <__divmodhi4_exit>

0000053a <__divmodhi4_neg1>:
 53a:	90 95       	com	r25
 53c:	81 95       	neg	r24
 53e:	9f 4f       	sbci	r25, 0xFF	; 255
 540:	08 95       	ret

00000542 <__divmodhi4_neg2>:
 542:	70 95       	com	r23
 544:	61 95       	neg	r22
 546:	7f 4f       	sbci	r23, 0xFF	; 255

00000548 <__divmodhi4_exit>:
 548:	08 95       	ret

0000054a <__umulhisi3>:
 54a:	a2 9f       	mul	r26, r18
 54c:	b0 01       	movw	r22, r0
 54e:	b3 9f       	mul	r27, r19
 550:	c0 01       	movw	r24, r0
 552:	a3 9f       	mul	r26, r19
 554:	70 0d       	add	r23, r0
 556:	81 1d       	adc	r24, r1
 558:	11 24       	eor	r1, r1
 55a:	91 1d       	adc	r25, r1
 55c:	b2 9f       	mul	r27, r18
 55e:	70 0d       	add	r23, r0
 560:	81 1d       	adc	r24, r1
 562:	11 24       	eor	r1, r1
 564:	91 1d       	adc	r25, r1
 566:	08 95       	ret

00000568 <__udivmodhi4>:
 568:	aa 1b       	sub	r26, r26
 56a:	bb 1b       	sub	r27, r27
 56c:	51 e1       	ldi	r21, 0x11	; 17
 56e:	07 c0       	rjmp	.+14     	; 0x57e <__udivmodhi4_ep>

00000570 <__udivmodhi4_loop>:
 570:	aa 1f       	adc	r26, r26
 572:	bb 1f       	adc	r27, r27
 574:	a6 17       	cp	r26, r22
 576:	b7 07       	cpc	r27, r23
 578:	10 f0       	brcs	.+4      	; 0x57e <__udivmodhi4_ep>
 57a:	a6 1b       	sub	r26, r22
 57c:	b7 0b       	sbc	r27, r23

0000057e <__udivmodhi4_ep>:
 57e:	88 1f       	adc	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	5a 95       	dec	r21
 584:	a9 f7       	brne	.-22     	; 0x570 <__udivmodhi4_loop>
 586:	80 95       	com	r24
 588:	90 95       	com	r25
 58a:	bc 01       	movw	r22, r24
 58c:	cd 01       	movw	r24, r26
 58e:	08 95       	ret

00000590 <sprintf>:
 590:	ae e0       	ldi	r26, 0x0E	; 14
 592:	b0 e0       	ldi	r27, 0x00	; 0
 594:	ee ec       	ldi	r30, 0xCE	; 206
 596:	f2 e0       	ldi	r31, 0x02	; 2
 598:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__stack+0x13>
 59c:	0d 89       	ldd	r16, Y+21	; 0x15
 59e:	1e 89       	ldd	r17, Y+22	; 0x16
 5a0:	86 e0       	ldi	r24, 0x06	; 6
 5a2:	8c 83       	std	Y+4, r24	; 0x04
 5a4:	1a 83       	std	Y+2, r17	; 0x02
 5a6:	09 83       	std	Y+1, r16	; 0x01
 5a8:	8f ef       	ldi	r24, 0xFF	; 255
 5aa:	9f e7       	ldi	r25, 0x7F	; 127
 5ac:	9e 83       	std	Y+6, r25	; 0x06
 5ae:	8d 83       	std	Y+5, r24	; 0x05
 5b0:	ae 01       	movw	r20, r28
 5b2:	47 5e       	subi	r20, 0xE7	; 231
 5b4:	5f 4f       	sbci	r21, 0xFF	; 255
 5b6:	6f 89       	ldd	r22, Y+23	; 0x17
 5b8:	78 8d       	ldd	r23, Y+24	; 0x18
 5ba:	ce 01       	movw	r24, r28
 5bc:	01 96       	adiw	r24, 0x01	; 1
 5be:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <vfprintf>
 5c2:	ef 81       	ldd	r30, Y+7	; 0x07
 5c4:	f8 85       	ldd	r31, Y+8	; 0x08
 5c6:	e0 0f       	add	r30, r16
 5c8:	f1 1f       	adc	r31, r17
 5ca:	10 82       	st	Z, r1
 5cc:	2e 96       	adiw	r28, 0x0e	; 14
 5ce:	e4 e0       	ldi	r30, 0x04	; 4
 5d0:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__epilogue_restores__+0x1c>

000005d4 <vfprintf>:
 5d4:	ab e0       	ldi	r26, 0x0B	; 11
 5d6:	b0 e0       	ldi	r27, 0x00	; 0
 5d8:	e0 ef       	ldi	r30, 0xF0	; 240
 5da:	f2 e0       	ldi	r31, 0x02	; 2
 5dc:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__prologue_saves__>
 5e0:	6c 01       	movw	r12, r24
 5e2:	7b 01       	movw	r14, r22
 5e4:	8a 01       	movw	r16, r20
 5e6:	fc 01       	movw	r30, r24
 5e8:	17 82       	std	Z+7, r1	; 0x07
 5ea:	16 82       	std	Z+6, r1	; 0x06
 5ec:	83 81       	ldd	r24, Z+3	; 0x03
 5ee:	81 ff       	sbrs	r24, 1
 5f0:	cc c1       	rjmp	.+920    	; 0x98a <vfprintf+0x3b6>
 5f2:	ce 01       	movw	r24, r28
 5f4:	01 96       	adiw	r24, 0x01	; 1
 5f6:	3c 01       	movw	r6, r24
 5f8:	f6 01       	movw	r30, r12
 5fa:	93 81       	ldd	r25, Z+3	; 0x03
 5fc:	f7 01       	movw	r30, r14
 5fe:	93 fd       	sbrc	r25, 3
 600:	85 91       	lpm	r24, Z+
 602:	93 ff       	sbrs	r25, 3
 604:	81 91       	ld	r24, Z+
 606:	7f 01       	movw	r14, r30
 608:	88 23       	and	r24, r24
 60a:	09 f4       	brne	.+2      	; 0x60e <vfprintf+0x3a>
 60c:	ba c1       	rjmp	.+884    	; 0x982 <vfprintf+0x3ae>
 60e:	85 32       	cpi	r24, 0x25	; 37
 610:	39 f4       	brne	.+14     	; 0x620 <vfprintf+0x4c>
 612:	93 fd       	sbrc	r25, 3
 614:	85 91       	lpm	r24, Z+
 616:	93 ff       	sbrs	r25, 3
 618:	81 91       	ld	r24, Z+
 61a:	7f 01       	movw	r14, r30
 61c:	85 32       	cpi	r24, 0x25	; 37
 61e:	29 f4       	brne	.+10     	; 0x62a <vfprintf+0x56>
 620:	b6 01       	movw	r22, r12
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 628:	e7 cf       	rjmp	.-50     	; 0x5f8 <vfprintf+0x24>
 62a:	91 2c       	mov	r9, r1
 62c:	21 2c       	mov	r2, r1
 62e:	31 2c       	mov	r3, r1
 630:	ff e1       	ldi	r31, 0x1F	; 31
 632:	f3 15       	cp	r31, r3
 634:	d8 f0       	brcs	.+54     	; 0x66c <vfprintf+0x98>
 636:	8b 32       	cpi	r24, 0x2B	; 43
 638:	79 f0       	breq	.+30     	; 0x658 <vfprintf+0x84>
 63a:	38 f4       	brcc	.+14     	; 0x64a <vfprintf+0x76>
 63c:	80 32       	cpi	r24, 0x20	; 32
 63e:	79 f0       	breq	.+30     	; 0x65e <vfprintf+0x8a>
 640:	83 32       	cpi	r24, 0x23	; 35
 642:	a1 f4       	brne	.+40     	; 0x66c <vfprintf+0x98>
 644:	23 2d       	mov	r18, r3
 646:	20 61       	ori	r18, 0x10	; 16
 648:	1d c0       	rjmp	.+58     	; 0x684 <vfprintf+0xb0>
 64a:	8d 32       	cpi	r24, 0x2D	; 45
 64c:	61 f0       	breq	.+24     	; 0x666 <vfprintf+0x92>
 64e:	80 33       	cpi	r24, 0x30	; 48
 650:	69 f4       	brne	.+26     	; 0x66c <vfprintf+0x98>
 652:	23 2d       	mov	r18, r3
 654:	21 60       	ori	r18, 0x01	; 1
 656:	16 c0       	rjmp	.+44     	; 0x684 <vfprintf+0xb0>
 658:	83 2d       	mov	r24, r3
 65a:	82 60       	ori	r24, 0x02	; 2
 65c:	38 2e       	mov	r3, r24
 65e:	e3 2d       	mov	r30, r3
 660:	e4 60       	ori	r30, 0x04	; 4
 662:	3e 2e       	mov	r3, r30
 664:	2a c0       	rjmp	.+84     	; 0x6ba <vfprintf+0xe6>
 666:	f3 2d       	mov	r31, r3
 668:	f8 60       	ori	r31, 0x08	; 8
 66a:	1d c0       	rjmp	.+58     	; 0x6a6 <vfprintf+0xd2>
 66c:	37 fc       	sbrc	r3, 7
 66e:	2d c0       	rjmp	.+90     	; 0x6ca <vfprintf+0xf6>
 670:	20 ed       	ldi	r18, 0xD0	; 208
 672:	28 0f       	add	r18, r24
 674:	2a 30       	cpi	r18, 0x0A	; 10
 676:	40 f0       	brcs	.+16     	; 0x688 <vfprintf+0xb4>
 678:	8e 32       	cpi	r24, 0x2E	; 46
 67a:	b9 f4       	brne	.+46     	; 0x6aa <vfprintf+0xd6>
 67c:	36 fc       	sbrc	r3, 6
 67e:	81 c1       	rjmp	.+770    	; 0x982 <vfprintf+0x3ae>
 680:	23 2d       	mov	r18, r3
 682:	20 64       	ori	r18, 0x40	; 64
 684:	32 2e       	mov	r3, r18
 686:	19 c0       	rjmp	.+50     	; 0x6ba <vfprintf+0xe6>
 688:	36 fe       	sbrs	r3, 6
 68a:	06 c0       	rjmp	.+12     	; 0x698 <vfprintf+0xc4>
 68c:	8a e0       	ldi	r24, 0x0A	; 10
 68e:	98 9e       	mul	r9, r24
 690:	20 0d       	add	r18, r0
 692:	11 24       	eor	r1, r1
 694:	92 2e       	mov	r9, r18
 696:	11 c0       	rjmp	.+34     	; 0x6ba <vfprintf+0xe6>
 698:	ea e0       	ldi	r30, 0x0A	; 10
 69a:	2e 9e       	mul	r2, r30
 69c:	20 0d       	add	r18, r0
 69e:	11 24       	eor	r1, r1
 6a0:	22 2e       	mov	r2, r18
 6a2:	f3 2d       	mov	r31, r3
 6a4:	f0 62       	ori	r31, 0x20	; 32
 6a6:	3f 2e       	mov	r3, r31
 6a8:	08 c0       	rjmp	.+16     	; 0x6ba <vfprintf+0xe6>
 6aa:	8c 36       	cpi	r24, 0x6C	; 108
 6ac:	21 f4       	brne	.+8      	; 0x6b6 <vfprintf+0xe2>
 6ae:	83 2d       	mov	r24, r3
 6b0:	80 68       	ori	r24, 0x80	; 128
 6b2:	38 2e       	mov	r3, r24
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <vfprintf+0xe6>
 6b6:	88 36       	cpi	r24, 0x68	; 104
 6b8:	41 f4       	brne	.+16     	; 0x6ca <vfprintf+0xf6>
 6ba:	f7 01       	movw	r30, r14
 6bc:	93 fd       	sbrc	r25, 3
 6be:	85 91       	lpm	r24, Z+
 6c0:	93 ff       	sbrs	r25, 3
 6c2:	81 91       	ld	r24, Z+
 6c4:	7f 01       	movw	r14, r30
 6c6:	81 11       	cpse	r24, r1
 6c8:	b3 cf       	rjmp	.-154    	; 0x630 <vfprintf+0x5c>
 6ca:	98 2f       	mov	r25, r24
 6cc:	9f 7d       	andi	r25, 0xDF	; 223
 6ce:	95 54       	subi	r25, 0x45	; 69
 6d0:	93 30       	cpi	r25, 0x03	; 3
 6d2:	28 f4       	brcc	.+10     	; 0x6de <vfprintf+0x10a>
 6d4:	0c 5f       	subi	r16, 0xFC	; 252
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	9f e3       	ldi	r25, 0x3F	; 63
 6da:	99 83       	std	Y+1, r25	; 0x01
 6dc:	0d c0       	rjmp	.+26     	; 0x6f8 <vfprintf+0x124>
 6de:	83 36       	cpi	r24, 0x63	; 99
 6e0:	31 f0       	breq	.+12     	; 0x6ee <vfprintf+0x11a>
 6e2:	83 37       	cpi	r24, 0x73	; 115
 6e4:	71 f0       	breq	.+28     	; 0x702 <vfprintf+0x12e>
 6e6:	83 35       	cpi	r24, 0x53	; 83
 6e8:	09 f0       	breq	.+2      	; 0x6ec <vfprintf+0x118>
 6ea:	59 c0       	rjmp	.+178    	; 0x79e <vfprintf+0x1ca>
 6ec:	21 c0       	rjmp	.+66     	; 0x730 <vfprintf+0x15c>
 6ee:	f8 01       	movw	r30, r16
 6f0:	80 81       	ld	r24, Z
 6f2:	89 83       	std	Y+1, r24	; 0x01
 6f4:	0e 5f       	subi	r16, 0xFE	; 254
 6f6:	1f 4f       	sbci	r17, 0xFF	; 255
 6f8:	88 24       	eor	r8, r8
 6fa:	83 94       	inc	r8
 6fc:	91 2c       	mov	r9, r1
 6fe:	53 01       	movw	r10, r6
 700:	13 c0       	rjmp	.+38     	; 0x728 <vfprintf+0x154>
 702:	28 01       	movw	r4, r16
 704:	f2 e0       	ldi	r31, 0x02	; 2
 706:	4f 0e       	add	r4, r31
 708:	51 1c       	adc	r5, r1
 70a:	f8 01       	movw	r30, r16
 70c:	a0 80       	ld	r10, Z
 70e:	b1 80       	ldd	r11, Z+1	; 0x01
 710:	36 fe       	sbrs	r3, 6
 712:	03 c0       	rjmp	.+6      	; 0x71a <vfprintf+0x146>
 714:	69 2d       	mov	r22, r9
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	02 c0       	rjmp	.+4      	; 0x71e <vfprintf+0x14a>
 71a:	6f ef       	ldi	r22, 0xFF	; 255
 71c:	7f ef       	ldi	r23, 0xFF	; 255
 71e:	c5 01       	movw	r24, r10
 720:	0e 94 d6 04 	call	0x9ac	; 0x9ac <strnlen>
 724:	4c 01       	movw	r8, r24
 726:	82 01       	movw	r16, r4
 728:	f3 2d       	mov	r31, r3
 72a:	ff 77       	andi	r31, 0x7F	; 127
 72c:	3f 2e       	mov	r3, r31
 72e:	16 c0       	rjmp	.+44     	; 0x75c <vfprintf+0x188>
 730:	28 01       	movw	r4, r16
 732:	22 e0       	ldi	r18, 0x02	; 2
 734:	42 0e       	add	r4, r18
 736:	51 1c       	adc	r5, r1
 738:	f8 01       	movw	r30, r16
 73a:	a0 80       	ld	r10, Z
 73c:	b1 80       	ldd	r11, Z+1	; 0x01
 73e:	36 fe       	sbrs	r3, 6
 740:	03 c0       	rjmp	.+6      	; 0x748 <vfprintf+0x174>
 742:	69 2d       	mov	r22, r9
 744:	70 e0       	ldi	r23, 0x00	; 0
 746:	02 c0       	rjmp	.+4      	; 0x74c <vfprintf+0x178>
 748:	6f ef       	ldi	r22, 0xFF	; 255
 74a:	7f ef       	ldi	r23, 0xFF	; 255
 74c:	c5 01       	movw	r24, r10
 74e:	0e 94 cb 04 	call	0x996	; 0x996 <strnlen_P>
 752:	4c 01       	movw	r8, r24
 754:	f3 2d       	mov	r31, r3
 756:	f0 68       	ori	r31, 0x80	; 128
 758:	3f 2e       	mov	r3, r31
 75a:	82 01       	movw	r16, r4
 75c:	33 fc       	sbrc	r3, 3
 75e:	1b c0       	rjmp	.+54     	; 0x796 <vfprintf+0x1c2>
 760:	82 2d       	mov	r24, r2
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	88 16       	cp	r8, r24
 766:	99 06       	cpc	r9, r25
 768:	b0 f4       	brcc	.+44     	; 0x796 <vfprintf+0x1c2>
 76a:	b6 01       	movw	r22, r12
 76c:	80 e2       	ldi	r24, 0x20	; 32
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 774:	2a 94       	dec	r2
 776:	f4 cf       	rjmp	.-24     	; 0x760 <vfprintf+0x18c>
 778:	f5 01       	movw	r30, r10
 77a:	37 fc       	sbrc	r3, 7
 77c:	85 91       	lpm	r24, Z+
 77e:	37 fe       	sbrs	r3, 7
 780:	81 91       	ld	r24, Z+
 782:	5f 01       	movw	r10, r30
 784:	b6 01       	movw	r22, r12
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 78c:	21 10       	cpse	r2, r1
 78e:	2a 94       	dec	r2
 790:	21 e0       	ldi	r18, 0x01	; 1
 792:	82 1a       	sub	r8, r18
 794:	91 08       	sbc	r9, r1
 796:	81 14       	cp	r8, r1
 798:	91 04       	cpc	r9, r1
 79a:	71 f7       	brne	.-36     	; 0x778 <vfprintf+0x1a4>
 79c:	e8 c0       	rjmp	.+464    	; 0x96e <vfprintf+0x39a>
 79e:	84 36       	cpi	r24, 0x64	; 100
 7a0:	11 f0       	breq	.+4      	; 0x7a6 <vfprintf+0x1d2>
 7a2:	89 36       	cpi	r24, 0x69	; 105
 7a4:	41 f5       	brne	.+80     	; 0x7f6 <vfprintf+0x222>
 7a6:	f8 01       	movw	r30, r16
 7a8:	37 fe       	sbrs	r3, 7
 7aa:	07 c0       	rjmp	.+14     	; 0x7ba <vfprintf+0x1e6>
 7ac:	60 81       	ld	r22, Z
 7ae:	71 81       	ldd	r23, Z+1	; 0x01
 7b0:	82 81       	ldd	r24, Z+2	; 0x02
 7b2:	93 81       	ldd	r25, Z+3	; 0x03
 7b4:	0c 5f       	subi	r16, 0xFC	; 252
 7b6:	1f 4f       	sbci	r17, 0xFF	; 255
 7b8:	08 c0       	rjmp	.+16     	; 0x7ca <vfprintf+0x1f6>
 7ba:	60 81       	ld	r22, Z
 7bc:	71 81       	ldd	r23, Z+1	; 0x01
 7be:	07 2e       	mov	r0, r23
 7c0:	00 0c       	add	r0, r0
 7c2:	88 0b       	sbc	r24, r24
 7c4:	99 0b       	sbc	r25, r25
 7c6:	0e 5f       	subi	r16, 0xFE	; 254
 7c8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ca:	f3 2d       	mov	r31, r3
 7cc:	ff 76       	andi	r31, 0x6F	; 111
 7ce:	3f 2e       	mov	r3, r31
 7d0:	97 ff       	sbrs	r25, 7
 7d2:	09 c0       	rjmp	.+18     	; 0x7e6 <vfprintf+0x212>
 7d4:	90 95       	com	r25
 7d6:	80 95       	com	r24
 7d8:	70 95       	com	r23
 7da:	61 95       	neg	r22
 7dc:	7f 4f       	sbci	r23, 0xFF	; 255
 7de:	8f 4f       	sbci	r24, 0xFF	; 255
 7e0:	9f 4f       	sbci	r25, 0xFF	; 255
 7e2:	f0 68       	ori	r31, 0x80	; 128
 7e4:	3f 2e       	mov	r3, r31
 7e6:	2a e0       	ldi	r18, 0x0A	; 10
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	a3 01       	movw	r20, r6
 7ec:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__ultoa_invert>
 7f0:	88 2e       	mov	r8, r24
 7f2:	86 18       	sub	r8, r6
 7f4:	45 c0       	rjmp	.+138    	; 0x880 <vfprintf+0x2ac>
 7f6:	85 37       	cpi	r24, 0x75	; 117
 7f8:	31 f4       	brne	.+12     	; 0x806 <vfprintf+0x232>
 7fa:	23 2d       	mov	r18, r3
 7fc:	2f 7e       	andi	r18, 0xEF	; 239
 7fe:	b2 2e       	mov	r11, r18
 800:	2a e0       	ldi	r18, 0x0A	; 10
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	25 c0       	rjmp	.+74     	; 0x850 <vfprintf+0x27c>
 806:	93 2d       	mov	r25, r3
 808:	99 7f       	andi	r25, 0xF9	; 249
 80a:	b9 2e       	mov	r11, r25
 80c:	8f 36       	cpi	r24, 0x6F	; 111
 80e:	c1 f0       	breq	.+48     	; 0x840 <vfprintf+0x26c>
 810:	18 f4       	brcc	.+6      	; 0x818 <vfprintf+0x244>
 812:	88 35       	cpi	r24, 0x58	; 88
 814:	79 f0       	breq	.+30     	; 0x834 <vfprintf+0x260>
 816:	b5 c0       	rjmp	.+362    	; 0x982 <vfprintf+0x3ae>
 818:	80 37       	cpi	r24, 0x70	; 112
 81a:	19 f0       	breq	.+6      	; 0x822 <vfprintf+0x24e>
 81c:	88 37       	cpi	r24, 0x78	; 120
 81e:	21 f0       	breq	.+8      	; 0x828 <vfprintf+0x254>
 820:	b0 c0       	rjmp	.+352    	; 0x982 <vfprintf+0x3ae>
 822:	e9 2f       	mov	r30, r25
 824:	e0 61       	ori	r30, 0x10	; 16
 826:	be 2e       	mov	r11, r30
 828:	b4 fe       	sbrs	r11, 4
 82a:	0d c0       	rjmp	.+26     	; 0x846 <vfprintf+0x272>
 82c:	fb 2d       	mov	r31, r11
 82e:	f4 60       	ori	r31, 0x04	; 4
 830:	bf 2e       	mov	r11, r31
 832:	09 c0       	rjmp	.+18     	; 0x846 <vfprintf+0x272>
 834:	34 fe       	sbrs	r3, 4
 836:	0a c0       	rjmp	.+20     	; 0x84c <vfprintf+0x278>
 838:	29 2f       	mov	r18, r25
 83a:	26 60       	ori	r18, 0x06	; 6
 83c:	b2 2e       	mov	r11, r18
 83e:	06 c0       	rjmp	.+12     	; 0x84c <vfprintf+0x278>
 840:	28 e0       	ldi	r18, 0x08	; 8
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	05 c0       	rjmp	.+10     	; 0x850 <vfprintf+0x27c>
 846:	20 e1       	ldi	r18, 0x10	; 16
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	02 c0       	rjmp	.+4      	; 0x850 <vfprintf+0x27c>
 84c:	20 e1       	ldi	r18, 0x10	; 16
 84e:	32 e0       	ldi	r19, 0x02	; 2
 850:	f8 01       	movw	r30, r16
 852:	b7 fe       	sbrs	r11, 7
 854:	07 c0       	rjmp	.+14     	; 0x864 <vfprintf+0x290>
 856:	60 81       	ld	r22, Z
 858:	71 81       	ldd	r23, Z+1	; 0x01
 85a:	82 81       	ldd	r24, Z+2	; 0x02
 85c:	93 81       	ldd	r25, Z+3	; 0x03
 85e:	0c 5f       	subi	r16, 0xFC	; 252
 860:	1f 4f       	sbci	r17, 0xFF	; 255
 862:	06 c0       	rjmp	.+12     	; 0x870 <vfprintf+0x29c>
 864:	60 81       	ld	r22, Z
 866:	71 81       	ldd	r23, Z+1	; 0x01
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 5f       	subi	r16, 0xFE	; 254
 86e:	1f 4f       	sbci	r17, 0xFF	; 255
 870:	a3 01       	movw	r20, r6
 872:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__ultoa_invert>
 876:	88 2e       	mov	r8, r24
 878:	86 18       	sub	r8, r6
 87a:	fb 2d       	mov	r31, r11
 87c:	ff 77       	andi	r31, 0x7F	; 127
 87e:	3f 2e       	mov	r3, r31
 880:	36 fe       	sbrs	r3, 6
 882:	0d c0       	rjmp	.+26     	; 0x89e <vfprintf+0x2ca>
 884:	23 2d       	mov	r18, r3
 886:	2e 7f       	andi	r18, 0xFE	; 254
 888:	a2 2e       	mov	r10, r18
 88a:	89 14       	cp	r8, r9
 88c:	58 f4       	brcc	.+22     	; 0x8a4 <vfprintf+0x2d0>
 88e:	34 fe       	sbrs	r3, 4
 890:	0b c0       	rjmp	.+22     	; 0x8a8 <vfprintf+0x2d4>
 892:	32 fc       	sbrc	r3, 2
 894:	09 c0       	rjmp	.+18     	; 0x8a8 <vfprintf+0x2d4>
 896:	83 2d       	mov	r24, r3
 898:	8e 7e       	andi	r24, 0xEE	; 238
 89a:	a8 2e       	mov	r10, r24
 89c:	05 c0       	rjmp	.+10     	; 0x8a8 <vfprintf+0x2d4>
 89e:	b8 2c       	mov	r11, r8
 8a0:	a3 2c       	mov	r10, r3
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <vfprintf+0x2d6>
 8a4:	b8 2c       	mov	r11, r8
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <vfprintf+0x2d6>
 8a8:	b9 2c       	mov	r11, r9
 8aa:	a4 fe       	sbrs	r10, 4
 8ac:	0f c0       	rjmp	.+30     	; 0x8cc <vfprintf+0x2f8>
 8ae:	fe 01       	movw	r30, r28
 8b0:	e8 0d       	add	r30, r8
 8b2:	f1 1d       	adc	r31, r1
 8b4:	80 81       	ld	r24, Z
 8b6:	80 33       	cpi	r24, 0x30	; 48
 8b8:	21 f4       	brne	.+8      	; 0x8c2 <vfprintf+0x2ee>
 8ba:	9a 2d       	mov	r25, r10
 8bc:	99 7e       	andi	r25, 0xE9	; 233
 8be:	a9 2e       	mov	r10, r25
 8c0:	09 c0       	rjmp	.+18     	; 0x8d4 <vfprintf+0x300>
 8c2:	a2 fe       	sbrs	r10, 2
 8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <vfprintf+0x2fe>
 8c6:	b3 94       	inc	r11
 8c8:	b3 94       	inc	r11
 8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <vfprintf+0x300>
 8cc:	8a 2d       	mov	r24, r10
 8ce:	86 78       	andi	r24, 0x86	; 134
 8d0:	09 f0       	breq	.+2      	; 0x8d4 <vfprintf+0x300>
 8d2:	b3 94       	inc	r11
 8d4:	a3 fc       	sbrc	r10, 3
 8d6:	11 c0       	rjmp	.+34     	; 0x8fa <vfprintf+0x326>
 8d8:	a0 fe       	sbrs	r10, 0
 8da:	06 c0       	rjmp	.+12     	; 0x8e8 <vfprintf+0x314>
 8dc:	b2 14       	cp	r11, r2
 8de:	88 f4       	brcc	.+34     	; 0x902 <vfprintf+0x32e>
 8e0:	28 0c       	add	r2, r8
 8e2:	92 2c       	mov	r9, r2
 8e4:	9b 18       	sub	r9, r11
 8e6:	0e c0       	rjmp	.+28     	; 0x904 <vfprintf+0x330>
 8e8:	b2 14       	cp	r11, r2
 8ea:	60 f4       	brcc	.+24     	; 0x904 <vfprintf+0x330>
 8ec:	b6 01       	movw	r22, r12
 8ee:	80 e2       	ldi	r24, 0x20	; 32
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 8f6:	b3 94       	inc	r11
 8f8:	f7 cf       	rjmp	.-18     	; 0x8e8 <vfprintf+0x314>
 8fa:	b2 14       	cp	r11, r2
 8fc:	18 f4       	brcc	.+6      	; 0x904 <vfprintf+0x330>
 8fe:	2b 18       	sub	r2, r11
 900:	02 c0       	rjmp	.+4      	; 0x906 <vfprintf+0x332>
 902:	98 2c       	mov	r9, r8
 904:	21 2c       	mov	r2, r1
 906:	a4 fe       	sbrs	r10, 4
 908:	10 c0       	rjmp	.+32     	; 0x92a <vfprintf+0x356>
 90a:	b6 01       	movw	r22, r12
 90c:	80 e3       	ldi	r24, 0x30	; 48
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 914:	a2 fe       	sbrs	r10, 2
 916:	17 c0       	rjmp	.+46     	; 0x946 <vfprintf+0x372>
 918:	a1 fc       	sbrc	r10, 1
 91a:	03 c0       	rjmp	.+6      	; 0x922 <vfprintf+0x34e>
 91c:	88 e7       	ldi	r24, 0x78	; 120
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	02 c0       	rjmp	.+4      	; 0x926 <vfprintf+0x352>
 922:	88 e5       	ldi	r24, 0x58	; 88
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	b6 01       	movw	r22, r12
 928:	0c c0       	rjmp	.+24     	; 0x942 <vfprintf+0x36e>
 92a:	8a 2d       	mov	r24, r10
 92c:	86 78       	andi	r24, 0x86	; 134
 92e:	59 f0       	breq	.+22     	; 0x946 <vfprintf+0x372>
 930:	a1 fe       	sbrs	r10, 1
 932:	02 c0       	rjmp	.+4      	; 0x938 <vfprintf+0x364>
 934:	8b e2       	ldi	r24, 0x2B	; 43
 936:	01 c0       	rjmp	.+2      	; 0x93a <vfprintf+0x366>
 938:	80 e2       	ldi	r24, 0x20	; 32
 93a:	a7 fc       	sbrc	r10, 7
 93c:	8d e2       	ldi	r24, 0x2D	; 45
 93e:	b6 01       	movw	r22, r12
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 946:	89 14       	cp	r8, r9
 948:	38 f4       	brcc	.+14     	; 0x958 <vfprintf+0x384>
 94a:	b6 01       	movw	r22, r12
 94c:	80 e3       	ldi	r24, 0x30	; 48
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 954:	9a 94       	dec	r9
 956:	f7 cf       	rjmp	.-18     	; 0x946 <vfprintf+0x372>
 958:	8a 94       	dec	r8
 95a:	f3 01       	movw	r30, r6
 95c:	e8 0d       	add	r30, r8
 95e:	f1 1d       	adc	r31, r1
 960:	80 81       	ld	r24, Z
 962:	b6 01       	movw	r22, r12
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 96a:	81 10       	cpse	r8, r1
 96c:	f5 cf       	rjmp	.-22     	; 0x958 <vfprintf+0x384>
 96e:	22 20       	and	r2, r2
 970:	09 f4       	brne	.+2      	; 0x974 <vfprintf+0x3a0>
 972:	42 ce       	rjmp	.-892    	; 0x5f8 <vfprintf+0x24>
 974:	b6 01       	movw	r22, r12
 976:	80 e2       	ldi	r24, 0x20	; 32
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 97e:	2a 94       	dec	r2
 980:	f6 cf       	rjmp	.-20     	; 0x96e <vfprintf+0x39a>
 982:	f6 01       	movw	r30, r12
 984:	86 81       	ldd	r24, Z+6	; 0x06
 986:	97 81       	ldd	r25, Z+7	; 0x07
 988:	02 c0       	rjmp	.+4      	; 0x98e <vfprintf+0x3ba>
 98a:	8f ef       	ldi	r24, 0xFF	; 255
 98c:	9f ef       	ldi	r25, 0xFF	; 255
 98e:	2b 96       	adiw	r28, 0x0b	; 11
 990:	e2 e1       	ldi	r30, 0x12	; 18
 992:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__epilogue_restores__>

00000996 <strnlen_P>:
 996:	fc 01       	movw	r30, r24
 998:	05 90       	lpm	r0, Z+
 99a:	61 50       	subi	r22, 0x01	; 1
 99c:	70 40       	sbci	r23, 0x00	; 0
 99e:	01 10       	cpse	r0, r1
 9a0:	d8 f7       	brcc	.-10     	; 0x998 <strnlen_P+0x2>
 9a2:	80 95       	com	r24
 9a4:	90 95       	com	r25
 9a6:	8e 0f       	add	r24, r30
 9a8:	9f 1f       	adc	r25, r31
 9aa:	08 95       	ret

000009ac <strnlen>:
 9ac:	fc 01       	movw	r30, r24
 9ae:	61 50       	subi	r22, 0x01	; 1
 9b0:	70 40       	sbci	r23, 0x00	; 0
 9b2:	01 90       	ld	r0, Z+
 9b4:	01 10       	cpse	r0, r1
 9b6:	d8 f7       	brcc	.-10     	; 0x9ae <strnlen+0x2>
 9b8:	80 95       	com	r24
 9ba:	90 95       	com	r25
 9bc:	8e 0f       	add	r24, r30
 9be:	9f 1f       	adc	r25, r31
 9c0:	08 95       	ret

000009c2 <fputc>:
 9c2:	0f 93       	push	r16
 9c4:	1f 93       	push	r17
 9c6:	cf 93       	push	r28
 9c8:	df 93       	push	r29
 9ca:	fb 01       	movw	r30, r22
 9cc:	23 81       	ldd	r18, Z+3	; 0x03
 9ce:	21 fd       	sbrc	r18, 1
 9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <fputc+0x16>
 9d2:	8f ef       	ldi	r24, 0xFF	; 255
 9d4:	9f ef       	ldi	r25, 0xFF	; 255
 9d6:	2c c0       	rjmp	.+88     	; 0xa30 <__DATA_REGION_LENGTH__+0x30>
 9d8:	22 ff       	sbrs	r18, 2
 9da:	16 c0       	rjmp	.+44     	; 0xa08 <__DATA_REGION_LENGTH__+0x8>
 9dc:	46 81       	ldd	r20, Z+6	; 0x06
 9de:	57 81       	ldd	r21, Z+7	; 0x07
 9e0:	24 81       	ldd	r18, Z+4	; 0x04
 9e2:	35 81       	ldd	r19, Z+5	; 0x05
 9e4:	42 17       	cp	r20, r18
 9e6:	53 07       	cpc	r21, r19
 9e8:	44 f4       	brge	.+16     	; 0x9fa <fputc+0x38>
 9ea:	a0 81       	ld	r26, Z
 9ec:	b1 81       	ldd	r27, Z+1	; 0x01
 9ee:	9d 01       	movw	r18, r26
 9f0:	2f 5f       	subi	r18, 0xFF	; 255
 9f2:	3f 4f       	sbci	r19, 0xFF	; 255
 9f4:	31 83       	std	Z+1, r19	; 0x01
 9f6:	20 83       	st	Z, r18
 9f8:	8c 93       	st	X, r24
 9fa:	26 81       	ldd	r18, Z+6	; 0x06
 9fc:	37 81       	ldd	r19, Z+7	; 0x07
 9fe:	2f 5f       	subi	r18, 0xFF	; 255
 a00:	3f 4f       	sbci	r19, 0xFF	; 255
 a02:	37 83       	std	Z+7, r19	; 0x07
 a04:	26 83       	std	Z+6, r18	; 0x06
 a06:	14 c0       	rjmp	.+40     	; 0xa30 <__DATA_REGION_LENGTH__+0x30>
 a08:	8b 01       	movw	r16, r22
 a0a:	ec 01       	movw	r28, r24
 a0c:	fb 01       	movw	r30, r22
 a0e:	00 84       	ldd	r0, Z+8	; 0x08
 a10:	f1 85       	ldd	r31, Z+9	; 0x09
 a12:	e0 2d       	mov	r30, r0
 a14:	09 95       	icall
 a16:	89 2b       	or	r24, r25
 a18:	e1 f6       	brne	.-72     	; 0x9d2 <fputc+0x10>
 a1a:	d8 01       	movw	r26, r16
 a1c:	16 96       	adiw	r26, 0x06	; 6
 a1e:	8d 91       	ld	r24, X+
 a20:	9c 91       	ld	r25, X
 a22:	17 97       	sbiw	r26, 0x07	; 7
 a24:	01 96       	adiw	r24, 0x01	; 1
 a26:	17 96       	adiw	r26, 0x07	; 7
 a28:	9c 93       	st	X, r25
 a2a:	8e 93       	st	-X, r24
 a2c:	16 97       	sbiw	r26, 0x06	; 6
 a2e:	ce 01       	movw	r24, r28
 a30:	df 91       	pop	r29
 a32:	cf 91       	pop	r28
 a34:	1f 91       	pop	r17
 a36:	0f 91       	pop	r16
 a38:	08 95       	ret

00000a3a <__ultoa_invert>:
 a3a:	fa 01       	movw	r30, r20
 a3c:	aa 27       	eor	r26, r26
 a3e:	28 30       	cpi	r18, 0x08	; 8
 a40:	51 f1       	breq	.+84     	; 0xa96 <__ultoa_invert+0x5c>
 a42:	20 31       	cpi	r18, 0x10	; 16
 a44:	81 f1       	breq	.+96     	; 0xaa6 <__ultoa_invert+0x6c>
 a46:	e8 94       	clt
 a48:	6f 93       	push	r22
 a4a:	6e 7f       	andi	r22, 0xFE	; 254
 a4c:	6e 5f       	subi	r22, 0xFE	; 254
 a4e:	7f 4f       	sbci	r23, 0xFF	; 255
 a50:	8f 4f       	sbci	r24, 0xFF	; 255
 a52:	9f 4f       	sbci	r25, 0xFF	; 255
 a54:	af 4f       	sbci	r26, 0xFF	; 255
 a56:	b1 e0       	ldi	r27, 0x01	; 1
 a58:	3e d0       	rcall	.+124    	; 0xad6 <__ultoa_invert+0x9c>
 a5a:	b4 e0       	ldi	r27, 0x04	; 4
 a5c:	3c d0       	rcall	.+120    	; 0xad6 <__ultoa_invert+0x9c>
 a5e:	67 0f       	add	r22, r23
 a60:	78 1f       	adc	r23, r24
 a62:	89 1f       	adc	r24, r25
 a64:	9a 1f       	adc	r25, r26
 a66:	a1 1d       	adc	r26, r1
 a68:	68 0f       	add	r22, r24
 a6a:	79 1f       	adc	r23, r25
 a6c:	8a 1f       	adc	r24, r26
 a6e:	91 1d       	adc	r25, r1
 a70:	a1 1d       	adc	r26, r1
 a72:	6a 0f       	add	r22, r26
 a74:	71 1d       	adc	r23, r1
 a76:	81 1d       	adc	r24, r1
 a78:	91 1d       	adc	r25, r1
 a7a:	a1 1d       	adc	r26, r1
 a7c:	20 d0       	rcall	.+64     	; 0xabe <__ultoa_invert+0x84>
 a7e:	09 f4       	brne	.+2      	; 0xa82 <__ultoa_invert+0x48>
 a80:	68 94       	set
 a82:	3f 91       	pop	r19
 a84:	2a e0       	ldi	r18, 0x0A	; 10
 a86:	26 9f       	mul	r18, r22
 a88:	11 24       	eor	r1, r1
 a8a:	30 19       	sub	r19, r0
 a8c:	30 5d       	subi	r19, 0xD0	; 208
 a8e:	31 93       	st	Z+, r19
 a90:	de f6       	brtc	.-74     	; 0xa48 <__ultoa_invert+0xe>
 a92:	cf 01       	movw	r24, r30
 a94:	08 95       	ret
 a96:	46 2f       	mov	r20, r22
 a98:	47 70       	andi	r20, 0x07	; 7
 a9a:	40 5d       	subi	r20, 0xD0	; 208
 a9c:	41 93       	st	Z+, r20
 a9e:	b3 e0       	ldi	r27, 0x03	; 3
 aa0:	0f d0       	rcall	.+30     	; 0xac0 <__ultoa_invert+0x86>
 aa2:	c9 f7       	brne	.-14     	; 0xa96 <__ultoa_invert+0x5c>
 aa4:	f6 cf       	rjmp	.-20     	; 0xa92 <__ultoa_invert+0x58>
 aa6:	46 2f       	mov	r20, r22
 aa8:	4f 70       	andi	r20, 0x0F	; 15
 aaa:	40 5d       	subi	r20, 0xD0	; 208
 aac:	4a 33       	cpi	r20, 0x3A	; 58
 aae:	18 f0       	brcs	.+6      	; 0xab6 <__ultoa_invert+0x7c>
 ab0:	49 5d       	subi	r20, 0xD9	; 217
 ab2:	31 fd       	sbrc	r19, 1
 ab4:	40 52       	subi	r20, 0x20	; 32
 ab6:	41 93       	st	Z+, r20
 ab8:	02 d0       	rcall	.+4      	; 0xabe <__ultoa_invert+0x84>
 aba:	a9 f7       	brne	.-22     	; 0xaa6 <__ultoa_invert+0x6c>
 abc:	ea cf       	rjmp	.-44     	; 0xa92 <__ultoa_invert+0x58>
 abe:	b4 e0       	ldi	r27, 0x04	; 4
 ac0:	a6 95       	lsr	r26
 ac2:	97 95       	ror	r25
 ac4:	87 95       	ror	r24
 ac6:	77 95       	ror	r23
 ac8:	67 95       	ror	r22
 aca:	ba 95       	dec	r27
 acc:	c9 f7       	brne	.-14     	; 0xac0 <__ultoa_invert+0x86>
 ace:	00 97       	sbiw	r24, 0x00	; 0
 ad0:	61 05       	cpc	r22, r1
 ad2:	71 05       	cpc	r23, r1
 ad4:	08 95       	ret
 ad6:	9b 01       	movw	r18, r22
 ad8:	ac 01       	movw	r20, r24
 ada:	0a 2e       	mov	r0, r26
 adc:	06 94       	lsr	r0
 ade:	57 95       	ror	r21
 ae0:	47 95       	ror	r20
 ae2:	37 95       	ror	r19
 ae4:	27 95       	ror	r18
 ae6:	ba 95       	dec	r27
 ae8:	c9 f7       	brne	.-14     	; 0xadc <__ultoa_invert+0xa2>
 aea:	62 0f       	add	r22, r18
 aec:	73 1f       	adc	r23, r19
 aee:	84 1f       	adc	r24, r20
 af0:	95 1f       	adc	r25, r21
 af2:	a0 1d       	adc	r26, r0
 af4:	08 95       	ret

00000af6 <__prologue_saves__>:
 af6:	2f 92       	push	r2
 af8:	3f 92       	push	r3
 afa:	4f 92       	push	r4
 afc:	5f 92       	push	r5
 afe:	6f 92       	push	r6
 b00:	7f 92       	push	r7
 b02:	8f 92       	push	r8
 b04:	9f 92       	push	r9
 b06:	af 92       	push	r10
 b08:	bf 92       	push	r11
 b0a:	cf 92       	push	r12
 b0c:	df 92       	push	r13
 b0e:	ef 92       	push	r14
 b10:	ff 92       	push	r15
 b12:	0f 93       	push	r16
 b14:	1f 93       	push	r17
 b16:	cf 93       	push	r28
 b18:	df 93       	push	r29
 b1a:	cd b7       	in	r28, 0x3d	; 61
 b1c:	de b7       	in	r29, 0x3e	; 62
 b1e:	ca 1b       	sub	r28, r26
 b20:	db 0b       	sbc	r29, r27
 b22:	0f b6       	in	r0, 0x3f	; 63
 b24:	f8 94       	cli
 b26:	de bf       	out	0x3e, r29	; 62
 b28:	0f be       	out	0x3f, r0	; 63
 b2a:	cd bf       	out	0x3d, r28	; 61
 b2c:	09 94       	ijmp

00000b2e <__epilogue_restores__>:
 b2e:	2a 88       	ldd	r2, Y+18	; 0x12
 b30:	39 88       	ldd	r3, Y+17	; 0x11
 b32:	48 88       	ldd	r4, Y+16	; 0x10
 b34:	5f 84       	ldd	r5, Y+15	; 0x0f
 b36:	6e 84       	ldd	r6, Y+14	; 0x0e
 b38:	7d 84       	ldd	r7, Y+13	; 0x0d
 b3a:	8c 84       	ldd	r8, Y+12	; 0x0c
 b3c:	9b 84       	ldd	r9, Y+11	; 0x0b
 b3e:	aa 84       	ldd	r10, Y+10	; 0x0a
 b40:	b9 84       	ldd	r11, Y+9	; 0x09
 b42:	c8 84       	ldd	r12, Y+8	; 0x08
 b44:	df 80       	ldd	r13, Y+7	; 0x07
 b46:	ee 80       	ldd	r14, Y+6	; 0x06
 b48:	fd 80       	ldd	r15, Y+5	; 0x05
 b4a:	0c 81       	ldd	r16, Y+4	; 0x04
 b4c:	1b 81       	ldd	r17, Y+3	; 0x03
 b4e:	aa 81       	ldd	r26, Y+2	; 0x02
 b50:	b9 81       	ldd	r27, Y+1	; 0x01
 b52:	ce 0f       	add	r28, r30
 b54:	d1 1d       	adc	r29, r1
 b56:	0f b6       	in	r0, 0x3f	; 63
 b58:	f8 94       	cli
 b5a:	de bf       	out	0x3e, r29	; 62
 b5c:	0f be       	out	0x3f, r0	; 63
 b5e:	cd bf       	out	0x3d, r28	; 61
 b60:	ed 01       	movw	r28, r26
 b62:	08 95       	ret

00000b64 <_exit>:
 b64:	f8 94       	cli

00000b66 <__stop_program>:
 b66:	ff cf       	rjmp	.-2      	; 0xb66 <__stop_program>
