
lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000a76  00000aea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a76  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b6c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016da  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000eee  00000000  00000000  000023d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b5a  00000000  00000000  000032c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000230  00000000  00000000  00003e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000708  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000068a  00000000  00000000  00004754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00004dde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_29>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 e7       	ldi	r30, 0x76	; 118
  c0:	fa e0       	ldi	r31, 0x0A	; 10
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a4 32       	cpi	r26, 0x24	; 36
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 4a 01 	call	0x294	; 0x294 <main>
  d2:	0c 94 39 05 	jmp	0xa72	; 0xa72 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <delay_1_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	RET
  ea:	08 95       	ret

000000ec <delay_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	DEC R24				; 1 cycle
  fc:	8a 95       	dec	r24
	CPI R24, 0			; more loops to do? 1 cycle
  fe:	80 30       	cpi	r24, 0x00	; 0
	BRNE delay_micros	;	continue!
 100:	a9 f7       	brne	.-22     	; 0xec <delay_micros>
	RET
 102:	08 95       	ret

00000104 <delay_ms>:
;==============================================================================
; Delay of X ms
;	LDI + RCALL = 4 cycles
;==============================================================================
delay_ms:
	MOV R18, R24
 104:	28 2f       	mov	r18, r24

00000106 <loop_dms>:
loop_dms:
	LDI R24, 250
 106:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 108:	f1 df       	rcall	.-30     	; 0xec <delay_micros>
	LDI R24, 250
 10a:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 10c:	ef df       	rcall	.-34     	; 0xec <delay_micros>
	LDI R24, 250
 10e:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 110:	ed df       	rcall	.-38     	; 0xec <delay_micros>
	LDI R24, 250
 112:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 114:	eb df       	rcall	.-42     	; 0xec <delay_micros>
	DEC R18
 116:	2a 95       	dec	r18
	CPI R18, 0			; more loops to do?
 118:	20 30       	cpi	r18, 0x00	; 0
	BRNE loop_dms		;	continue!
 11a:	a9 f7       	brne	.-22     	; 0x106 <loop_dms>
	RET
 11c:	08 95       	ret

0000011e <delay_s>:

delay_s:
	MOV R18, R24
 11e:	28 2f       	mov	r18, r24

00000120 <loop_ds>:
loop_ds:
	PUSH R18
 120:	2f 93       	push	r18
	LDI R24, 250
 122:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 124:	ef df       	rcall	.-34     	; 0x104 <delay_ms>
	LDI R24, 250
 126:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 128:	ed df       	rcall	.-38     	; 0x104 <delay_ms>
	LDI R24, 250
 12a:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 12c:	eb df       	rcall	.-42     	; 0x104 <delay_ms>
	LDI R24, 250
 12e:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 130:	e9 df       	rcall	.-46     	; 0x104 <delay_ms>
	POP R18
 132:	2f 91       	pop	r18
	DEC R18
 134:	2a 95       	dec	r18
	CPI R18, 0			; more loops to do?
 136:	20 30       	cpi	r18, 0x00	; 0
	BRNE loop_dms		;	continue!
 138:	31 f7       	brne	.-52     	; 0x106 <loop_dms>
	RET
 13a:	08 95       	ret

0000013c <delay_1_s>:

delay_1_s:
	LDI R24, 250
 13c:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 13e:	e2 df       	rcall	.-60     	; 0x104 <delay_ms>
	LDI R24, 250
 140:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 142:	e0 df       	rcall	.-64     	; 0x104 <delay_ms>
	LDI R24, 250
 144:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 146:	de df       	rcall	.-68     	; 0x104 <delay_ms>
	LDI R24, 250
 148:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 14a:	dc df       	rcall	.-72     	; 0x104 <delay_ms>
 14c:	08 95       	ret

0000014e <hmi_init>:
		// convert number!
		str_to_uint16(numbers, length, p_int_nr);
	}
	// return the number of digits
	return length;
}
 14e:	0e 94 cb 01 	call	0x396	; 0x396 <numkey_init>
 152:	0e 94 02 01 	call	0x204	; 0x204 <lcd_init>
 156:	08 95       	ret

00000158 <output_msg>:
 *	p_str1: pointer to first character of the string.
 *	p_str2: pointer to first character of the string.
 *  delay_after_msg: number of seconds to wait after message is shown.
 */
void output_msg(char *p_str1, char *p_str2, uint8_t delay_after_msg)
{
 158:	ef 92       	push	r14
 15a:	ff 92       	push	r15
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	7c 01       	movw	r14, r24
 164:	8b 01       	movw	r16, r22
 166:	c4 2f       	mov	r28, r20

	lcd_set_cursor_mode(CURSOR_OFF);
 168:	8c e0       	ldi	r24, 0x0C	; 12
 16a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_set_cursor_mode>
	lcd_clear();
 16e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_clear>
	lcd_write_str(p_str1);
 172:	c7 01       	movw	r24, r14
 174:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_write_str>
	lcd_set_cursor_pos(1, 0);
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 32 01 	call	0x264	; 0x264 <lcd_set_cursor_pos>
	lcd_write_str(p_str2);
 180:	c8 01       	movw	r24, r16
 182:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_write_str>
	if(delay_after_msg > 0) {
 186:	cc 23       	and	r28, r28
 188:	19 f0       	breq	.+6      	; 0x190 <output_msg+0x38>
		delay_s(delay_after_msg);
 18a:	8c 2f       	mov	r24, r28
 18c:	0e 94 8f 00 	call	0x11e	; 0x11e <delay_s>
	}
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	08 95       	ret

0000019c <write_4bit_msb>:
 *	data: 4 bits of data
 */
static void write_4bit_msb(uint8_t data)
{
	//write data
	SET_BIT_LEVELS(PORTF, 0x0F, data);	
 19c:	91 b3       	in	r25, 0x11	; 17
 19e:	9f 70       	andi	r25, 0x0F	; 15
 1a0:	80 7f       	andi	r24, 0xF0	; 240
 1a2:	89 2b       	or	r24, r25
 1a4:	81 bb       	out	0x11, r24	; 17
	// generate pulse on the Enable pin
	SET_BIT(PORTD, 7);
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	80 68       	ori	r24, 0x80	; 128
 1aa:	8b b9       	out	0x0b, r24	; 11
	delay_1_micros();
 1ac:	0e 94 6d 00 	call	0xda	; 0xda <delay_1_micros>
	CLR_BIT(PORTD, 7);
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	8f 77       	andi	r24, 0x7F	; 127
 1b4:	8b b9       	out	0x0b, r24	; 11
 1b6:	08 95       	ret

000001b8 <lcd_write>:
 * parameter:
 *	lcd_reg: register to communicate with (Instruction or Data register)
 *	data: 8-bit instruction or data (character)
 */
void lcd_write(enum lcd_register lcd_reg, uint8_t data)
{
 1b8:	cf 93       	push	r28
 1ba:	c6 2f       	mov	r28, r22
	// select register
	if (lcd_reg == INSTRUCTION) {
 1bc:	81 11       	cpse	r24, r1
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <lcd_write+0x10>
		CLR_BIT(PORTD, 6);	// Instruction Register
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	8f 7b       	andi	r24, 0xBF	; 191
 1c4:	8b b9       	out	0x0b, r24	; 11
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <lcd_write+0x16>
	} else {
		SET_BIT(PORTD, 6);	// Data Register
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	8b b9       	out	0x0b, r24	; 11
	}
	// write data
	write_4bit_msb(data);
 1ce:	8c 2f       	mov	r24, r28
 1d0:	0e 94 ce 00 	call	0x19c	; 0x19c <write_4bit_msb>
	write_4bit_msb(data << 4);
 1d4:	8c 2f       	mov	r24, r28
 1d6:	82 95       	swap	r24
 1d8:	80 7f       	andi	r24, 0xF0	; 240
 1da:	0e 94 ce 00 	call	0x19c	; 0x19c <write_4bit_msb>
	delay_micros(45);
 1de:	8d e2       	ldi	r24, 0x2D	; 45
 1e0:	0e 94 76 00 	call	0xec	; 0xec <delay_micros>
}
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <lcd_clear>:
/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
	lcd_write(INSTRUCTION, 0x01);
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_write>
	delay_ms(2);
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	0e 94 82 00 	call	0x104	; 0x104 <delay_ms>
 1f6:	08 95       	ret

000001f8 <lcd_set_cursor_mode>:
 *	mode: cursor mode
 */
void lcd_set_cursor_mode(enum lcd_cursor mode)
{
	uint8_t cursor_mode;
	cursor_mode = 0x0C | mode;
 1f8:	68 2f       	mov	r22, r24
 1fa:	6c 60       	ori	r22, 0x0C	; 12
	lcd_write(INSTRUCTION, cursor_mode);
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_write>
 202:	08 95       	ret

00000204 <lcd_init>:
 *	- configuration of LCD communication
 */
void lcd_init(void)
{
	// PF4-PF7 (A3-A0) as outputs (LCD D4-D7)
	DDRF = 0xF0;
 204:	80 ef       	ldi	r24, 0xF0	; 240
 206:	80 bb       	out	0x10, r24	; 16
	// PD6 & PD7 (D12 & D6) as outputs (LCD RS & LCD E)
	DDRD = 0xC0;
 208:	80 ec       	ldi	r24, 0xC0	; 192
 20a:	8a b9       	out	0x0a, r24	; 10
	
	// wait more than 15 ms after power-up!
	delay_ms(20);
 20c:	84 e1       	ldi	r24, 0x14	; 20
 20e:	0e 94 82 00 	call	0x104	; 0x104 <delay_ms>
	// select Instruction Register
	CLR_BIT(PORTD, 6);
 212:	8b b1       	in	r24, 0x0b	; 11
 214:	8f 7b       	andi	r24, 0xBF	; 191
 216:	8b b9       	out	0x0b, r24	; 11

	// Function Set: 8 bit data interface
	write_4bit_msb(0x30);
 218:	80 e3       	ldi	r24, 0x30	; 48
 21a:	0e 94 ce 00 	call	0x19c	; 0x19c <write_4bit_msb>
	delay_ms(10);
 21e:	8a e0       	ldi	r24, 0x0A	; 10
 220:	0e 94 82 00 	call	0x104	; 0x104 <delay_ms>
	write_4bit_msb(0x30);
 224:	80 e3       	ldi	r24, 0x30	; 48
 226:	0e 94 ce 00 	call	0x19c	; 0x19c <write_4bit_msb>
	delay_ms(10);
 22a:	8a e0       	ldi	r24, 0x0A	; 10
 22c:	0e 94 82 00 	call	0x104	; 0x104 <delay_ms>
	write_4bit_msb(0x30);
 230:	80 e3       	ldi	r24, 0x30	; 48
 232:	0e 94 ce 00 	call	0x19c	; 0x19c <write_4bit_msb>
	delay_ms(10);
 236:	8a e0       	ldi	r24, 0x0A	; 10
 238:	0e 94 82 00 	call	0x104	; 0x104 <delay_ms>

	// Function Set: switch to 4 bit data interface
	write_4bit_msb(0x20);
 23c:	80 e2       	ldi	r24, 0x20	; 32
 23e:	0e 94 ce 00 	call	0x19c	; 0x19c <write_4bit_msb>
	delay_micros(45);
 242:	8d e2       	ldi	r24, 0x2D	; 45
 244:	0e 94 76 00 	call	0xec	; 0xec <delay_micros>

	// Function Set: 4 bit data interface, 2 lines, font 5x10
	lcd_write(INSTRUCTION, 0x28);		
 248:	68 e2       	ldi	r22, 0x28	; 40
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_write>

	// Display on, no cursor
	lcd_set_cursor_mode(CURSOR_BLINK);
 250:	8f e0       	ldi	r24, 0x0F	; 15
 252:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_set_cursor_mode>

	// clear display
	lcd_clear();
 256:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_clear>

	// Entry Mode Set: incremental cursor movement, no display shift
	lcd_write(INSTRUCTION, 0x06);
 25a:	66 e0       	ldi	r22, 0x06	; 6
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_write>
 262:	08 95       	ret

00000264 <lcd_set_cursor_pos>:
 *	col: 0 is the first column, 15 is the last visible column
 */
void lcd_set_cursor_pos(uint8_t row, uint8_t col)
{
	uint8_t cursor_pos;
	cursor_pos = 0x80 | (row << 6) | col;
 264:	20 e4       	ldi	r18, 0x40	; 64
 266:	82 9f       	mul	r24, r18
 268:	c0 01       	movw	r24, r0
 26a:	11 24       	eor	r1, r1
 26c:	68 2b       	or	r22, r24
 26e:	60 68       	ori	r22, 0x80	; 128
	lcd_write(INSTRUCTION, cursor_pos);	
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_write>
 276:	08 95       	ret

00000278 <lcd_write_str>:
 *
 * parameter:
 *	p_str: pointer to the string's first character
 */
void lcd_write_str(char *p_str)
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	ec 01       	movw	r28, r24
	while(*p_str != '\0'){
 27e:	04 c0       	rjmp	.+8      	; 0x288 <lcd_write_str+0x10>
		lcd_write(DATA, *p_str);
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_write>
		p_str++;
 286:	21 96       	adiw	r28, 0x01	; 1
 * parameter:
 *	p_str: pointer to the string's first character
 */
void lcd_write_str(char *p_str)
{
	while(*p_str != '\0'){
 288:	68 81       	ld	r22, Y
 28a:	61 11       	cpse	r22, r1
 28c:	f9 cf       	rjmp	.-14     	; 0x280 <lcd_write_str+0x8>
		lcd_write(DATA, *p_str);
		p_str++;
	}
	
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <main>:
typedef enum state state_t;



int main(void)
{
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	61 97       	sbiw	r28, 0x11	; 17
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	f8 94       	cli
 2a2:	de bf       	out	0x3e, r29	; 62
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	cd bf       	out	0x3d, r28	; 61
	state_t curr_state = MOTOR_OFF;
	state_t next_state = MOTOR_OFF;
	
	char key;
	uint8_t reg;
	hmi_init();
 2a8:	0e 94 a7 00 	call	0x14e	; 0x14e <hmi_init>
	regulator_init();
 2ac:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <regulator_init>
	motor_init();
 2b0:	0e 94 ab 01 	call	0x356	; 0x356 <motor_init>


int main(void)
{
	
	state_t curr_state = MOTOR_OFF;
 2b4:	10 e0       	ldi	r17, 0x00	; 0
	char temp_str[17];
	
    while (1) 
    {
		
		key = numkey_read();
 2b6:	0e 94 cf 01 	call	0x39e	; 0x39e <numkey_read>
 2ba:	08 2f       	mov	r16, r24
		reg = read_regulator();
 2bc:	0e 94 1b 02 	call	0x436	; 0x436 <read_regulator>
 2c0:	f8 2e       	mov	r15, r24
		switch(curr_state){
 2c2:	11 30       	cpi	r17, 0x01	; 1
 2c4:	a9 f0       	breq	.+42     	; 0x2f0 <main+0x5c>
 2c6:	18 f0       	brcs	.+6      	; 0x2ce <main+0x3a>
 2c8:	12 30       	cpi	r17, 0x02	; 2
 2ca:	e1 f0       	breq	.+56     	; 0x304 <main+0x70>
 2cc:	3b c0       	rjmp	.+118    	; 0x344 <main+0xb0>
			
			case MOTOR_OFF:
				sprintf(temp_str, "OFF");
 2ce:	8f e4       	ldi	r24, 0x4F	; 79
 2d0:	96 e4       	ldi	r25, 0x46	; 70
 2d2:	9a 83       	std	Y+2, r25	; 0x02
 2d4:	89 83       	std	Y+1, r24	; 0x01
 2d6:	86 e4       	ldi	r24, 0x46	; 70
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	9c 83       	std	Y+4, r25	; 0x04
 2dc:	8b 83       	std	Y+3, r24	; 0x03
				if(key == '2' && reg == 0){
 2de:	02 33       	cpi	r16, 0x32	; 50
 2e0:	19 f4       	brne	.+6      	; 0x2e8 <main+0x54>
 2e2:	f1 10       	cpse	r15, r1
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <main+0x54>
					next_state = MOTOR_ON;
 2e6:	11 e0       	ldi	r17, 0x01	; 1
				}
				motor_set_speed(0);
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 be 01 	call	0x37c	; 0x37c <motor_set_speed>
				break;
 2ee:	2a c0       	rjmp	.+84     	; 0x344 <main+0xb0>
			case MOTOR_ON:
				sprintf(temp_str, "ON");
 2f0:	8f e4       	ldi	r24, 0x4F	; 79
 2f2:	9e e4       	ldi	r25, 0x4E	; 78
 2f4:	9a 83       	std	Y+2, r25	; 0x02
 2f6:	89 83       	std	Y+1, r24	; 0x01
 2f8:	1b 82       	std	Y+3, r1	; 0x03
				if(key == '1'){
 2fa:	01 33       	cpi	r16, 0x31	; 49
 2fc:	01 f1       	breq	.+64     	; 0x33e <main+0xaa>
					next_state = MOTOR_OFF;
				}else if(reg > 0){
 2fe:	f1 10       	cpse	r15, r1
 300:	20 c0       	rjmp	.+64     	; 0x342 <main+0xae>
 302:	20 c0       	rjmp	.+64     	; 0x344 <main+0xb0>
					next_state = MOTOR_RUNNING;
				}
				break;
			case MOTOR_RUNNING:
				sprintf(temp_str, "RUNNING AT %u%c", read_regulator(), 37);
 304:	0e 94 1b 02 	call	0x436	; 0x436 <read_regulator>
 308:	1f 92       	push	r1
 30a:	95 e2       	ldi	r25, 0x25	; 37
 30c:	9f 93       	push	r25
 30e:	1f 92       	push	r1
 310:	8f 93       	push	r24
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	9f 93       	push	r25
 318:	8f 93       	push	r24
 31a:	ce 01       	movw	r24, r28
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	9f 93       	push	r25
 320:	8f 93       	push	r24
 322:	0e 94 4f 02 	call	0x49e	; 0x49e <sprintf>
				if(key == '1'){
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	f8 94       	cli
 32a:	de bf       	out	0x3e, r29	; 62
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	cd bf       	out	0x3d, r28	; 61
 330:	01 33       	cpi	r16, 0x31	; 49
 332:	09 f4       	brne	.+2      	; 0x336 <main+0xa2>
					next_state = MOTOR_OFF;
 334:	10 e0       	ldi	r17, 0x00	; 0
				}
				motor_set_speed(reg);
 336:	8f 2d       	mov	r24, r15
 338:	0e 94 be 01 	call	0x37c	; 0x37c <motor_set_speed>
				
				break;
 33c:	03 c0       	rjmp	.+6      	; 0x344 <main+0xb0>
				motor_set_speed(0);
				break;
			case MOTOR_ON:
				sprintf(temp_str, "ON");
				if(key == '1'){
					next_state = MOTOR_OFF;
 33e:	10 e0       	ldi	r17, 0x00	; 0
 340:	01 c0       	rjmp	.+2      	; 0x344 <main+0xb0>
				}else if(reg > 0){
					next_state = MOTOR_RUNNING;
 342:	12 e0       	ldi	r17, 0x02	; 2
				}
				motor_set_speed(reg);
				
				break;
		}
		output_msg("MOTOR",temp_str,0);
 344:	40 e0       	ldi	r20, 0x00	; 0
 346:	be 01       	movw	r22, r28
 348:	6f 5f       	subi	r22, 0xFF	; 255
 34a:	7f 4f       	sbci	r23, 0xFF	; 255
 34c:	81 e1       	ldi	r24, 0x11	; 17
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	0e 94 ac 00 	call	0x158	; 0x158 <output_msg>
		curr_state = next_state;
		
    }
 354:	b0 cf       	rjmp	.-160    	; 0x2b6 <main+0x22>

00000356 <motor_init>:
 */ 

#include <avr/io.h>

void motor_init(void){
	DDRC = 0xFF;
 356:	8f ef       	ldi	r24, 0xFF	; 255
 358:	87 b9       	out	0x07, r24	; 7
	TCCR3A |= (1 << COM3A1);
 35a:	e0 e9       	ldi	r30, 0x90	; 144
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	80 68       	ori	r24, 0x80	; 128
 362:	80 83       	st	Z, r24
	// Waveform Generation Mode 5, Fast PWM (8-bit)
	TCCR3A |= (1 << WGM32) | (1 << WGM30);
 364:	80 81       	ld	r24, Z
 366:	89 60       	ori	r24, 0x09	; 9
 368:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << WGM30);
 36a:	e1 e9       	ldi	r30, 0x91	; 145
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	89 60       	ori	r24, 0x09	; 9
 372:	80 83       	st	Z, r24
	// Timer Clock, 16/64 MHz = 1/4 MHz
	TCCR3B |= (1 << CS31) | (1 << CS30);
 374:	80 81       	ld	r24, Z
 376:	83 60       	ori	r24, 0x03	; 3
 378:	80 83       	st	Z, r24
 37a:	08 95       	ret

0000037c <motor_set_speed>:
	
}

void motor_set_speed(uint8_t speed){
	OCR3AH = 0;
 37c:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
	OCR3AL = (speed * 255) / 100;
 380:	2f ef       	ldi	r18, 0xFF	; 255
 382:	82 9f       	mul	r24, r18
 384:	c0 01       	movw	r24, r0
 386:	11 24       	eor	r1, r1
 388:	64 e6       	ldi	r22, 0x64	; 100
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	0e 94 27 02 	call	0x44e	; 0x44e <__divmodhi4>
 390:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
 394:	08 95       	ret

00000396 <numkey_init>:
 * This function configures the ports and pins to be used by the keyboard.
 */
void numkey_init(void)
{
	// PE6 (D7) as input (key pressed?)
	DDRE = 0x00;
 396:	1d b8       	out	0x0d, r1	; 13
	// PB4-PB7 (D8-D11) as outputs (MUX and decoder)
	DDRB = 0xF0;
 398:	80 ef       	ldi	r24, 0xF0	; 240
 39a:	84 b9       	out	0x04, r24	; 4
 39c:	08 95       	ret

0000039e <numkey_read>:
 * return:
 *	If a key is pressed, then a character that represents the key is returned.
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
 39e:	cf 93       	push	r28
	
	/* UPPGIFT: skriv en for-sats som stegar igenom alla tangenter, använd variabeln i. */
		// set column and row
			// UPPGIFT: använd SET_BIT_LEVELS() för att sätta bitar i registret PORTB!
		// wait before reading pin
	for(i = 0; i < 12; i++){
 3a0:	c0 e0       	ldi	r28, 0x00	; 0
 3a2:	11 c0       	rjmp	.+34     	; 0x3c6 <numkey_read+0x28>
		SET_BIT_LEVELS(PORTB, 0x00, (i << 4));
 3a4:	85 b1       	in	r24, 0x05	; 5
 3a6:	8c 2f       	mov	r24, r28
 3a8:	82 95       	swap	r24
 3aa:	80 7f       	andi	r24, 0xF0	; 240
 3ac:	85 b9       	out	0x05, r24	; 5
		
		delay_ms(10);
 3ae:	8a e0       	ldi	r24, 0x0A	; 10
 3b0:	0e 94 82 00 	call	0x104	; 0x104 <delay_ms>
		
		if (PINE & (1 << 6)) {	// UPPGIFT: skriv om det logiska uttrycket i if-satsen, så att uttrycket blir sant om bit 6 i PINE är 1.
 3b4:	66 9b       	sbis	0x0c, 6	; 12
 3b6:	06 c0       	rjmp	.+12     	; 0x3c4 <numkey_read+0x26>
			return key_map[i];
 3b8:	ec 2f       	mov	r30, r28
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	e9 5e       	subi	r30, 0xE9	; 233
 3be:	fe 4f       	sbci	r31, 0xFE	; 254
 3c0:	80 81       	ld	r24, Z
 3c2:	04 c0       	rjmp	.+8      	; 0x3cc <numkey_read+0x2e>
	
	/* UPPGIFT: skriv en for-sats som stegar igenom alla tangenter, använd variabeln i. */
		// set column and row
			// UPPGIFT: använd SET_BIT_LEVELS() för att sätta bitar i registret PORTB!
		// wait before reading pin
	for(i = 0; i < 12; i++){
 3c4:	cf 5f       	subi	r28, 0xFF	; 255
 3c6:	cc 30       	cpi	r28, 0x0C	; 12
 3c8:	68 f3       	brcs	.-38     	; 0x3a4 <numkey_read+0x6>
		if (PINE & (1 << 6)) {	// UPPGIFT: skriv om det logiska uttrycket i if-satsen, så att uttrycket blir sant om bit 6 i PINE är 1.
			return key_map[i];
		}
	}
	// no key was pressed!
	return NO_KEY;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <__vector_29>:
/*
 * Interrupt Service Routine for the ADC.
 * The ISR will execute when a A/D conversion is complete.
 */
ISR(ADC_vect)
{
 3d0:	1f 92       	push	r1
 3d2:	0f 92       	push	r0
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	0f 92       	push	r0
 3d8:	11 24       	eor	r1, r1
 3da:	8f 93       	push	r24
	// read ADC value
	// UPPGIFT: Läs in ADC-värdet. Börja med att läsa av det "låga" registret, därefter det "höga" registret!
	
	adc = ADCH;
 3dc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 3e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
}
 3e4:	8f 91       	pop	r24
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

000003f0 <regulator_init>:
 * Initialize the ADC and ISR.
 */
void regulator_init(void)
{
	// UPPGIFT: konfigurera ADC-enheten genom ställa in ADMUX och ADCSRA enligt kommentarerna nedanför!
	ADMUX |= (1 << REFS0);				// set reference voltage (internal 5V)
 3f0:	ec e7       	ldi	r30, 0x7C	; 124
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	80 81       	ld	r24, Z
 3f6:	80 64       	ori	r24, 0x40	; 64
 3f8:	80 83       	st	Z, r24
	ADMUX |= (1 << MUX0);		// select diff.amp 1x on ADC0 & ADC1
 3fa:	80 81       	ld	r24, Z
 3fc:	81 60       	ori	r24, 0x01	; 1
 3fe:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);					// right adjustment of ADC value
 400:	80 81       	ld	r24, Z
 402:	80 62       	ori	r24, 0x20	; 32
 404:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);	// prescaler 128
 406:	ea e7       	ldi	r30, 0x7A	; 122
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	87 60       	ori	r24, 0x07	; 7
 40e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE);	// enable Auto Trigger
 410:	80 81       	ld	r24, Z
 412:	80 62       	ori	r24, 0x20	; 32
 414:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);		// enable Interrupt
 416:	80 81       	ld	r24, Z
 418:	88 60       	ori	r24, 0x08	; 8
 41a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);		// enable ADC
 41c:	80 81       	ld	r24, Z
 41e:	80 68       	ori	r24, 0x80	; 128
 420:	80 83       	st	Z, r24
	
	// disable digital input on ADC0 and ADC1
	DIDR0 = 3;
 422:	83 e0       	ldi	r24, 0x03	; 3
 424:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
		
	// disable USB controller (to make interrupts possible)
	USBCON = 0;	
 428:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	// enable global interrupts
	sei();
 42c:	78 94       	sei

	// start initial conversion
	ADCSRA |= (1 << ADSC);	// UPPGIFT: gör så att den initiala A/D-omvandlingen sker
 42e:	80 81       	ld	r24, Z
 430:	80 64       	ori	r24, 0x40	; 64
 432:	80 83       	st	Z, r24
 434:	08 95       	ret

00000436 <read_regulator>:
/*
 * Returns the temperature in Celsius.
 */
uint8_t read_regulator(void)
{
		return (adc * 40) / 102;
 436:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 43a:	28 e2       	ldi	r18, 0x28	; 40
 43c:	82 9f       	mul	r24, r18
 43e:	c0 01       	movw	r24, r0
 440:	11 24       	eor	r1, r1
 442:	66 e6       	ldi	r22, 0x66	; 102
 444:	70 e0       	ldi	r23, 0x00	; 0
 446:	0e 94 27 02 	call	0x44e	; 0x44e <__divmodhi4>
 44a:	86 2f       	mov	r24, r22
}
 44c:	08 95       	ret

0000044e <__divmodhi4>:
 44e:	97 fb       	bst	r25, 7
 450:	07 2e       	mov	r0, r23
 452:	16 f4       	brtc	.+4      	; 0x458 <__divmodhi4+0xa>
 454:	00 94       	com	r0
 456:	07 d0       	rcall	.+14     	; 0x466 <__divmodhi4_neg1>
 458:	77 fd       	sbrc	r23, 7
 45a:	09 d0       	rcall	.+18     	; 0x46e <__divmodhi4_neg2>
 45c:	0e 94 3b 02 	call	0x476	; 0x476 <__udivmodhi4>
 460:	07 fc       	sbrc	r0, 7
 462:	05 d0       	rcall	.+10     	; 0x46e <__divmodhi4_neg2>
 464:	3e f4       	brtc	.+14     	; 0x474 <__divmodhi4_exit>

00000466 <__divmodhi4_neg1>:
 466:	90 95       	com	r25
 468:	81 95       	neg	r24
 46a:	9f 4f       	sbci	r25, 0xFF	; 255
 46c:	08 95       	ret

0000046e <__divmodhi4_neg2>:
 46e:	70 95       	com	r23
 470:	61 95       	neg	r22
 472:	7f 4f       	sbci	r23, 0xFF	; 255

00000474 <__divmodhi4_exit>:
 474:	08 95       	ret

00000476 <__udivmodhi4>:
 476:	aa 1b       	sub	r26, r26
 478:	bb 1b       	sub	r27, r27
 47a:	51 e1       	ldi	r21, 0x11	; 17
 47c:	07 c0       	rjmp	.+14     	; 0x48c <__udivmodhi4_ep>

0000047e <__udivmodhi4_loop>:
 47e:	aa 1f       	adc	r26, r26
 480:	bb 1f       	adc	r27, r27
 482:	a6 17       	cp	r26, r22
 484:	b7 07       	cpc	r27, r23
 486:	10 f0       	brcs	.+4      	; 0x48c <__udivmodhi4_ep>
 488:	a6 1b       	sub	r26, r22
 48a:	b7 0b       	sbc	r27, r23

0000048c <__udivmodhi4_ep>:
 48c:	88 1f       	adc	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	5a 95       	dec	r21
 492:	a9 f7       	brne	.-22     	; 0x47e <__udivmodhi4_loop>
 494:	80 95       	com	r24
 496:	90 95       	com	r25
 498:	bc 01       	movw	r22, r24
 49a:	cd 01       	movw	r24, r26
 49c:	08 95       	ret

0000049e <sprintf>:
 49e:	ae e0       	ldi	r26, 0x0E	; 14
 4a0:	b0 e0       	ldi	r27, 0x00	; 0
 4a2:	e5 e5       	ldi	r30, 0x55	; 85
 4a4:	f2 e0       	ldi	r31, 0x02	; 2
 4a6:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__prologue_saves__+0x1c>
 4aa:	0d 89       	ldd	r16, Y+21	; 0x15
 4ac:	1e 89       	ldd	r17, Y+22	; 0x16
 4ae:	86 e0       	ldi	r24, 0x06	; 6
 4b0:	8c 83       	std	Y+4, r24	; 0x04
 4b2:	1a 83       	std	Y+2, r17	; 0x02
 4b4:	09 83       	std	Y+1, r16	; 0x01
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
 4b8:	9f e7       	ldi	r25, 0x7F	; 127
 4ba:	9e 83       	std	Y+6, r25	; 0x06
 4bc:	8d 83       	std	Y+5, r24	; 0x05
 4be:	ae 01       	movw	r20, r28
 4c0:	47 5e       	subi	r20, 0xE7	; 231
 4c2:	5f 4f       	sbci	r21, 0xFF	; 255
 4c4:	6f 89       	ldd	r22, Y+23	; 0x17
 4c6:	78 8d       	ldd	r23, Y+24	; 0x18
 4c8:	ce 01       	movw	r24, r28
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	0e 94 71 02 	call	0x4e2	; 0x4e2 <vfprintf>
 4d0:	ef 81       	ldd	r30, Y+7	; 0x07
 4d2:	f8 85       	ldd	r31, Y+8	; 0x08
 4d4:	e0 0f       	add	r30, r16
 4d6:	f1 1f       	adc	r31, r17
 4d8:	10 82       	st	Z, r1
 4da:	2e 96       	adiw	r28, 0x0e	; 14
 4dc:	e4 e0       	ldi	r30, 0x04	; 4
 4de:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__epilogue_restores__+0x1c>

000004e2 <vfprintf>:
 4e2:	ab e0       	ldi	r26, 0x0B	; 11
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	e7 e7       	ldi	r30, 0x77	; 119
 4e8:	f2 e0       	ldi	r31, 0x02	; 2
 4ea:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__prologue_saves__>
 4ee:	6c 01       	movw	r12, r24
 4f0:	7b 01       	movw	r14, r22
 4f2:	8a 01       	movw	r16, r20
 4f4:	fc 01       	movw	r30, r24
 4f6:	17 82       	std	Z+7, r1	; 0x07
 4f8:	16 82       	std	Z+6, r1	; 0x06
 4fa:	83 81       	ldd	r24, Z+3	; 0x03
 4fc:	81 ff       	sbrs	r24, 1
 4fe:	cc c1       	rjmp	.+920    	; 0x898 <vfprintf+0x3b6>
 500:	ce 01       	movw	r24, r28
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	3c 01       	movw	r6, r24
 506:	f6 01       	movw	r30, r12
 508:	93 81       	ldd	r25, Z+3	; 0x03
 50a:	f7 01       	movw	r30, r14
 50c:	93 fd       	sbrc	r25, 3
 50e:	85 91       	lpm	r24, Z+
 510:	93 ff       	sbrs	r25, 3
 512:	81 91       	ld	r24, Z+
 514:	7f 01       	movw	r14, r30
 516:	88 23       	and	r24, r24
 518:	09 f4       	brne	.+2      	; 0x51c <vfprintf+0x3a>
 51a:	ba c1       	rjmp	.+884    	; 0x890 <vfprintf+0x3ae>
 51c:	85 32       	cpi	r24, 0x25	; 37
 51e:	39 f4       	brne	.+14     	; 0x52e <vfprintf+0x4c>
 520:	93 fd       	sbrc	r25, 3
 522:	85 91       	lpm	r24, Z+
 524:	93 ff       	sbrs	r25, 3
 526:	81 91       	ld	r24, Z+
 528:	7f 01       	movw	r14, r30
 52a:	85 32       	cpi	r24, 0x25	; 37
 52c:	29 f4       	brne	.+10     	; 0x538 <vfprintf+0x56>
 52e:	b6 01       	movw	r22, r12
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fputc>
 536:	e7 cf       	rjmp	.-50     	; 0x506 <vfprintf+0x24>
 538:	91 2c       	mov	r9, r1
 53a:	21 2c       	mov	r2, r1
 53c:	31 2c       	mov	r3, r1
 53e:	ff e1       	ldi	r31, 0x1F	; 31
 540:	f3 15       	cp	r31, r3
 542:	d8 f0       	brcs	.+54     	; 0x57a <vfprintf+0x98>
 544:	8b 32       	cpi	r24, 0x2B	; 43
 546:	79 f0       	breq	.+30     	; 0x566 <vfprintf+0x84>
 548:	38 f4       	brcc	.+14     	; 0x558 <vfprintf+0x76>
 54a:	80 32       	cpi	r24, 0x20	; 32
 54c:	79 f0       	breq	.+30     	; 0x56c <vfprintf+0x8a>
 54e:	83 32       	cpi	r24, 0x23	; 35
 550:	a1 f4       	brne	.+40     	; 0x57a <vfprintf+0x98>
 552:	23 2d       	mov	r18, r3
 554:	20 61       	ori	r18, 0x10	; 16
 556:	1d c0       	rjmp	.+58     	; 0x592 <vfprintf+0xb0>
 558:	8d 32       	cpi	r24, 0x2D	; 45
 55a:	61 f0       	breq	.+24     	; 0x574 <vfprintf+0x92>
 55c:	80 33       	cpi	r24, 0x30	; 48
 55e:	69 f4       	brne	.+26     	; 0x57a <vfprintf+0x98>
 560:	23 2d       	mov	r18, r3
 562:	21 60       	ori	r18, 0x01	; 1
 564:	16 c0       	rjmp	.+44     	; 0x592 <vfprintf+0xb0>
 566:	83 2d       	mov	r24, r3
 568:	82 60       	ori	r24, 0x02	; 2
 56a:	38 2e       	mov	r3, r24
 56c:	e3 2d       	mov	r30, r3
 56e:	e4 60       	ori	r30, 0x04	; 4
 570:	3e 2e       	mov	r3, r30
 572:	2a c0       	rjmp	.+84     	; 0x5c8 <vfprintf+0xe6>
 574:	f3 2d       	mov	r31, r3
 576:	f8 60       	ori	r31, 0x08	; 8
 578:	1d c0       	rjmp	.+58     	; 0x5b4 <vfprintf+0xd2>
 57a:	37 fc       	sbrc	r3, 7
 57c:	2d c0       	rjmp	.+90     	; 0x5d8 <vfprintf+0xf6>
 57e:	20 ed       	ldi	r18, 0xD0	; 208
 580:	28 0f       	add	r18, r24
 582:	2a 30       	cpi	r18, 0x0A	; 10
 584:	40 f0       	brcs	.+16     	; 0x596 <vfprintf+0xb4>
 586:	8e 32       	cpi	r24, 0x2E	; 46
 588:	b9 f4       	brne	.+46     	; 0x5b8 <vfprintf+0xd6>
 58a:	36 fc       	sbrc	r3, 6
 58c:	81 c1       	rjmp	.+770    	; 0x890 <vfprintf+0x3ae>
 58e:	23 2d       	mov	r18, r3
 590:	20 64       	ori	r18, 0x40	; 64
 592:	32 2e       	mov	r3, r18
 594:	19 c0       	rjmp	.+50     	; 0x5c8 <vfprintf+0xe6>
 596:	36 fe       	sbrs	r3, 6
 598:	06 c0       	rjmp	.+12     	; 0x5a6 <vfprintf+0xc4>
 59a:	8a e0       	ldi	r24, 0x0A	; 10
 59c:	98 9e       	mul	r9, r24
 59e:	20 0d       	add	r18, r0
 5a0:	11 24       	eor	r1, r1
 5a2:	92 2e       	mov	r9, r18
 5a4:	11 c0       	rjmp	.+34     	; 0x5c8 <vfprintf+0xe6>
 5a6:	ea e0       	ldi	r30, 0x0A	; 10
 5a8:	2e 9e       	mul	r2, r30
 5aa:	20 0d       	add	r18, r0
 5ac:	11 24       	eor	r1, r1
 5ae:	22 2e       	mov	r2, r18
 5b0:	f3 2d       	mov	r31, r3
 5b2:	f0 62       	ori	r31, 0x20	; 32
 5b4:	3f 2e       	mov	r3, r31
 5b6:	08 c0       	rjmp	.+16     	; 0x5c8 <vfprintf+0xe6>
 5b8:	8c 36       	cpi	r24, 0x6C	; 108
 5ba:	21 f4       	brne	.+8      	; 0x5c4 <vfprintf+0xe2>
 5bc:	83 2d       	mov	r24, r3
 5be:	80 68       	ori	r24, 0x80	; 128
 5c0:	38 2e       	mov	r3, r24
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <vfprintf+0xe6>
 5c4:	88 36       	cpi	r24, 0x68	; 104
 5c6:	41 f4       	brne	.+16     	; 0x5d8 <vfprintf+0xf6>
 5c8:	f7 01       	movw	r30, r14
 5ca:	93 fd       	sbrc	r25, 3
 5cc:	85 91       	lpm	r24, Z+
 5ce:	93 ff       	sbrs	r25, 3
 5d0:	81 91       	ld	r24, Z+
 5d2:	7f 01       	movw	r14, r30
 5d4:	81 11       	cpse	r24, r1
 5d6:	b3 cf       	rjmp	.-154    	; 0x53e <vfprintf+0x5c>
 5d8:	98 2f       	mov	r25, r24
 5da:	9f 7d       	andi	r25, 0xDF	; 223
 5dc:	95 54       	subi	r25, 0x45	; 69
 5de:	93 30       	cpi	r25, 0x03	; 3
 5e0:	28 f4       	brcc	.+10     	; 0x5ec <vfprintf+0x10a>
 5e2:	0c 5f       	subi	r16, 0xFC	; 252
 5e4:	1f 4f       	sbci	r17, 0xFF	; 255
 5e6:	9f e3       	ldi	r25, 0x3F	; 63
 5e8:	99 83       	std	Y+1, r25	; 0x01
 5ea:	0d c0       	rjmp	.+26     	; 0x606 <vfprintf+0x124>
 5ec:	83 36       	cpi	r24, 0x63	; 99
 5ee:	31 f0       	breq	.+12     	; 0x5fc <vfprintf+0x11a>
 5f0:	83 37       	cpi	r24, 0x73	; 115
 5f2:	71 f0       	breq	.+28     	; 0x610 <vfprintf+0x12e>
 5f4:	83 35       	cpi	r24, 0x53	; 83
 5f6:	09 f0       	breq	.+2      	; 0x5fa <vfprintf+0x118>
 5f8:	59 c0       	rjmp	.+178    	; 0x6ac <vfprintf+0x1ca>
 5fa:	21 c0       	rjmp	.+66     	; 0x63e <vfprintf+0x15c>
 5fc:	f8 01       	movw	r30, r16
 5fe:	80 81       	ld	r24, Z
 600:	89 83       	std	Y+1, r24	; 0x01
 602:	0e 5f       	subi	r16, 0xFE	; 254
 604:	1f 4f       	sbci	r17, 0xFF	; 255
 606:	88 24       	eor	r8, r8
 608:	83 94       	inc	r8
 60a:	91 2c       	mov	r9, r1
 60c:	53 01       	movw	r10, r6
 60e:	13 c0       	rjmp	.+38     	; 0x636 <vfprintf+0x154>
 610:	28 01       	movw	r4, r16
 612:	f2 e0       	ldi	r31, 0x02	; 2
 614:	4f 0e       	add	r4, r31
 616:	51 1c       	adc	r5, r1
 618:	f8 01       	movw	r30, r16
 61a:	a0 80       	ld	r10, Z
 61c:	b1 80       	ldd	r11, Z+1	; 0x01
 61e:	36 fe       	sbrs	r3, 6
 620:	03 c0       	rjmp	.+6      	; 0x628 <vfprintf+0x146>
 622:	69 2d       	mov	r22, r9
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	02 c0       	rjmp	.+4      	; 0x62c <vfprintf+0x14a>
 628:	6f ef       	ldi	r22, 0xFF	; 255
 62a:	7f ef       	ldi	r23, 0xFF	; 255
 62c:	c5 01       	movw	r24, r10
 62e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <strnlen>
 632:	4c 01       	movw	r8, r24
 634:	82 01       	movw	r16, r4
 636:	f3 2d       	mov	r31, r3
 638:	ff 77       	andi	r31, 0x7F	; 127
 63a:	3f 2e       	mov	r3, r31
 63c:	16 c0       	rjmp	.+44     	; 0x66a <vfprintf+0x188>
 63e:	28 01       	movw	r4, r16
 640:	22 e0       	ldi	r18, 0x02	; 2
 642:	42 0e       	add	r4, r18
 644:	51 1c       	adc	r5, r1
 646:	f8 01       	movw	r30, r16
 648:	a0 80       	ld	r10, Z
 64a:	b1 80       	ldd	r11, Z+1	; 0x01
 64c:	36 fe       	sbrs	r3, 6
 64e:	03 c0       	rjmp	.+6      	; 0x656 <vfprintf+0x174>
 650:	69 2d       	mov	r22, r9
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <vfprintf+0x178>
 656:	6f ef       	ldi	r22, 0xFF	; 255
 658:	7f ef       	ldi	r23, 0xFF	; 255
 65a:	c5 01       	movw	r24, r10
 65c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <strnlen_P>
 660:	4c 01       	movw	r8, r24
 662:	f3 2d       	mov	r31, r3
 664:	f0 68       	ori	r31, 0x80	; 128
 666:	3f 2e       	mov	r3, r31
 668:	82 01       	movw	r16, r4
 66a:	33 fc       	sbrc	r3, 3
 66c:	1b c0       	rjmp	.+54     	; 0x6a4 <vfprintf+0x1c2>
 66e:	82 2d       	mov	r24, r2
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	88 16       	cp	r8, r24
 674:	99 06       	cpc	r9, r25
 676:	b0 f4       	brcc	.+44     	; 0x6a4 <vfprintf+0x1c2>
 678:	b6 01       	movw	r22, r12
 67a:	80 e2       	ldi	r24, 0x20	; 32
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fputc>
 682:	2a 94       	dec	r2
 684:	f4 cf       	rjmp	.-24     	; 0x66e <vfprintf+0x18c>
 686:	f5 01       	movw	r30, r10
 688:	37 fc       	sbrc	r3, 7
 68a:	85 91       	lpm	r24, Z+
 68c:	37 fe       	sbrs	r3, 7
 68e:	81 91       	ld	r24, Z+
 690:	5f 01       	movw	r10, r30
 692:	b6 01       	movw	r22, r12
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fputc>
 69a:	21 10       	cpse	r2, r1
 69c:	2a 94       	dec	r2
 69e:	21 e0       	ldi	r18, 0x01	; 1
 6a0:	82 1a       	sub	r8, r18
 6a2:	91 08       	sbc	r9, r1
 6a4:	81 14       	cp	r8, r1
 6a6:	91 04       	cpc	r9, r1
 6a8:	71 f7       	brne	.-36     	; 0x686 <vfprintf+0x1a4>
 6aa:	e8 c0       	rjmp	.+464    	; 0x87c <vfprintf+0x39a>
 6ac:	84 36       	cpi	r24, 0x64	; 100
 6ae:	11 f0       	breq	.+4      	; 0x6b4 <vfprintf+0x1d2>
 6b0:	89 36       	cpi	r24, 0x69	; 105
 6b2:	41 f5       	brne	.+80     	; 0x704 <vfprintf+0x222>
 6b4:	f8 01       	movw	r30, r16
 6b6:	37 fe       	sbrs	r3, 7
 6b8:	07 c0       	rjmp	.+14     	; 0x6c8 <vfprintf+0x1e6>
 6ba:	60 81       	ld	r22, Z
 6bc:	71 81       	ldd	r23, Z+1	; 0x01
 6be:	82 81       	ldd	r24, Z+2	; 0x02
 6c0:	93 81       	ldd	r25, Z+3	; 0x03
 6c2:	0c 5f       	subi	r16, 0xFC	; 252
 6c4:	1f 4f       	sbci	r17, 0xFF	; 255
 6c6:	08 c0       	rjmp	.+16     	; 0x6d8 <vfprintf+0x1f6>
 6c8:	60 81       	ld	r22, Z
 6ca:	71 81       	ldd	r23, Z+1	; 0x01
 6cc:	07 2e       	mov	r0, r23
 6ce:	00 0c       	add	r0, r0
 6d0:	88 0b       	sbc	r24, r24
 6d2:	99 0b       	sbc	r25, r25
 6d4:	0e 5f       	subi	r16, 0xFE	; 254
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	f3 2d       	mov	r31, r3
 6da:	ff 76       	andi	r31, 0x6F	; 111
 6dc:	3f 2e       	mov	r3, r31
 6de:	97 ff       	sbrs	r25, 7
 6e0:	09 c0       	rjmp	.+18     	; 0x6f4 <vfprintf+0x212>
 6e2:	90 95       	com	r25
 6e4:	80 95       	com	r24
 6e6:	70 95       	com	r23
 6e8:	61 95       	neg	r22
 6ea:	7f 4f       	sbci	r23, 0xFF	; 255
 6ec:	8f 4f       	sbci	r24, 0xFF	; 255
 6ee:	9f 4f       	sbci	r25, 0xFF	; 255
 6f0:	f0 68       	ori	r31, 0x80	; 128
 6f2:	3f 2e       	mov	r3, r31
 6f4:	2a e0       	ldi	r18, 0x0A	; 10
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	a3 01       	movw	r20, r6
 6fa:	0e 94 a4 04 	call	0x948	; 0x948 <__ultoa_invert>
 6fe:	88 2e       	mov	r8, r24
 700:	86 18       	sub	r8, r6
 702:	45 c0       	rjmp	.+138    	; 0x78e <vfprintf+0x2ac>
 704:	85 37       	cpi	r24, 0x75	; 117
 706:	31 f4       	brne	.+12     	; 0x714 <vfprintf+0x232>
 708:	23 2d       	mov	r18, r3
 70a:	2f 7e       	andi	r18, 0xEF	; 239
 70c:	b2 2e       	mov	r11, r18
 70e:	2a e0       	ldi	r18, 0x0A	; 10
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	25 c0       	rjmp	.+74     	; 0x75e <vfprintf+0x27c>
 714:	93 2d       	mov	r25, r3
 716:	99 7f       	andi	r25, 0xF9	; 249
 718:	b9 2e       	mov	r11, r25
 71a:	8f 36       	cpi	r24, 0x6F	; 111
 71c:	c1 f0       	breq	.+48     	; 0x74e <vfprintf+0x26c>
 71e:	18 f4       	brcc	.+6      	; 0x726 <vfprintf+0x244>
 720:	88 35       	cpi	r24, 0x58	; 88
 722:	79 f0       	breq	.+30     	; 0x742 <vfprintf+0x260>
 724:	b5 c0       	rjmp	.+362    	; 0x890 <vfprintf+0x3ae>
 726:	80 37       	cpi	r24, 0x70	; 112
 728:	19 f0       	breq	.+6      	; 0x730 <vfprintf+0x24e>
 72a:	88 37       	cpi	r24, 0x78	; 120
 72c:	21 f0       	breq	.+8      	; 0x736 <vfprintf+0x254>
 72e:	b0 c0       	rjmp	.+352    	; 0x890 <vfprintf+0x3ae>
 730:	e9 2f       	mov	r30, r25
 732:	e0 61       	ori	r30, 0x10	; 16
 734:	be 2e       	mov	r11, r30
 736:	b4 fe       	sbrs	r11, 4
 738:	0d c0       	rjmp	.+26     	; 0x754 <vfprintf+0x272>
 73a:	fb 2d       	mov	r31, r11
 73c:	f4 60       	ori	r31, 0x04	; 4
 73e:	bf 2e       	mov	r11, r31
 740:	09 c0       	rjmp	.+18     	; 0x754 <vfprintf+0x272>
 742:	34 fe       	sbrs	r3, 4
 744:	0a c0       	rjmp	.+20     	; 0x75a <vfprintf+0x278>
 746:	29 2f       	mov	r18, r25
 748:	26 60       	ori	r18, 0x06	; 6
 74a:	b2 2e       	mov	r11, r18
 74c:	06 c0       	rjmp	.+12     	; 0x75a <vfprintf+0x278>
 74e:	28 e0       	ldi	r18, 0x08	; 8
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	05 c0       	rjmp	.+10     	; 0x75e <vfprintf+0x27c>
 754:	20 e1       	ldi	r18, 0x10	; 16
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	02 c0       	rjmp	.+4      	; 0x75e <vfprintf+0x27c>
 75a:	20 e1       	ldi	r18, 0x10	; 16
 75c:	32 e0       	ldi	r19, 0x02	; 2
 75e:	f8 01       	movw	r30, r16
 760:	b7 fe       	sbrs	r11, 7
 762:	07 c0       	rjmp	.+14     	; 0x772 <vfprintf+0x290>
 764:	60 81       	ld	r22, Z
 766:	71 81       	ldd	r23, Z+1	; 0x01
 768:	82 81       	ldd	r24, Z+2	; 0x02
 76a:	93 81       	ldd	r25, Z+3	; 0x03
 76c:	0c 5f       	subi	r16, 0xFC	; 252
 76e:	1f 4f       	sbci	r17, 0xFF	; 255
 770:	06 c0       	rjmp	.+12     	; 0x77e <vfprintf+0x29c>
 772:	60 81       	ld	r22, Z
 774:	71 81       	ldd	r23, Z+1	; 0x01
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 5f       	subi	r16, 0xFE	; 254
 77c:	1f 4f       	sbci	r17, 0xFF	; 255
 77e:	a3 01       	movw	r20, r6
 780:	0e 94 a4 04 	call	0x948	; 0x948 <__ultoa_invert>
 784:	88 2e       	mov	r8, r24
 786:	86 18       	sub	r8, r6
 788:	fb 2d       	mov	r31, r11
 78a:	ff 77       	andi	r31, 0x7F	; 127
 78c:	3f 2e       	mov	r3, r31
 78e:	36 fe       	sbrs	r3, 6
 790:	0d c0       	rjmp	.+26     	; 0x7ac <vfprintf+0x2ca>
 792:	23 2d       	mov	r18, r3
 794:	2e 7f       	andi	r18, 0xFE	; 254
 796:	a2 2e       	mov	r10, r18
 798:	89 14       	cp	r8, r9
 79a:	58 f4       	brcc	.+22     	; 0x7b2 <vfprintf+0x2d0>
 79c:	34 fe       	sbrs	r3, 4
 79e:	0b c0       	rjmp	.+22     	; 0x7b6 <vfprintf+0x2d4>
 7a0:	32 fc       	sbrc	r3, 2
 7a2:	09 c0       	rjmp	.+18     	; 0x7b6 <vfprintf+0x2d4>
 7a4:	83 2d       	mov	r24, r3
 7a6:	8e 7e       	andi	r24, 0xEE	; 238
 7a8:	a8 2e       	mov	r10, r24
 7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <vfprintf+0x2d4>
 7ac:	b8 2c       	mov	r11, r8
 7ae:	a3 2c       	mov	r10, r3
 7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <vfprintf+0x2d6>
 7b2:	b8 2c       	mov	r11, r8
 7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <vfprintf+0x2d6>
 7b6:	b9 2c       	mov	r11, r9
 7b8:	a4 fe       	sbrs	r10, 4
 7ba:	0f c0       	rjmp	.+30     	; 0x7da <vfprintf+0x2f8>
 7bc:	fe 01       	movw	r30, r28
 7be:	e8 0d       	add	r30, r8
 7c0:	f1 1d       	adc	r31, r1
 7c2:	80 81       	ld	r24, Z
 7c4:	80 33       	cpi	r24, 0x30	; 48
 7c6:	21 f4       	brne	.+8      	; 0x7d0 <vfprintf+0x2ee>
 7c8:	9a 2d       	mov	r25, r10
 7ca:	99 7e       	andi	r25, 0xE9	; 233
 7cc:	a9 2e       	mov	r10, r25
 7ce:	09 c0       	rjmp	.+18     	; 0x7e2 <vfprintf+0x300>
 7d0:	a2 fe       	sbrs	r10, 2
 7d2:	06 c0       	rjmp	.+12     	; 0x7e0 <vfprintf+0x2fe>
 7d4:	b3 94       	inc	r11
 7d6:	b3 94       	inc	r11
 7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <vfprintf+0x300>
 7da:	8a 2d       	mov	r24, r10
 7dc:	86 78       	andi	r24, 0x86	; 134
 7de:	09 f0       	breq	.+2      	; 0x7e2 <vfprintf+0x300>
 7e0:	b3 94       	inc	r11
 7e2:	a3 fc       	sbrc	r10, 3
 7e4:	11 c0       	rjmp	.+34     	; 0x808 <vfprintf+0x326>
 7e6:	a0 fe       	sbrs	r10, 0
 7e8:	06 c0       	rjmp	.+12     	; 0x7f6 <vfprintf+0x314>
 7ea:	b2 14       	cp	r11, r2
 7ec:	88 f4       	brcc	.+34     	; 0x810 <vfprintf+0x32e>
 7ee:	28 0c       	add	r2, r8
 7f0:	92 2c       	mov	r9, r2
 7f2:	9b 18       	sub	r9, r11
 7f4:	0e c0       	rjmp	.+28     	; 0x812 <vfprintf+0x330>
 7f6:	b2 14       	cp	r11, r2
 7f8:	60 f4       	brcc	.+24     	; 0x812 <vfprintf+0x330>
 7fa:	b6 01       	movw	r22, r12
 7fc:	80 e2       	ldi	r24, 0x20	; 32
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fputc>
 804:	b3 94       	inc	r11
 806:	f7 cf       	rjmp	.-18     	; 0x7f6 <vfprintf+0x314>
 808:	b2 14       	cp	r11, r2
 80a:	18 f4       	brcc	.+6      	; 0x812 <vfprintf+0x330>
 80c:	2b 18       	sub	r2, r11
 80e:	02 c0       	rjmp	.+4      	; 0x814 <vfprintf+0x332>
 810:	98 2c       	mov	r9, r8
 812:	21 2c       	mov	r2, r1
 814:	a4 fe       	sbrs	r10, 4
 816:	10 c0       	rjmp	.+32     	; 0x838 <vfprintf+0x356>
 818:	b6 01       	movw	r22, r12
 81a:	80 e3       	ldi	r24, 0x30	; 48
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fputc>
 822:	a2 fe       	sbrs	r10, 2
 824:	17 c0       	rjmp	.+46     	; 0x854 <vfprintf+0x372>
 826:	a1 fc       	sbrc	r10, 1
 828:	03 c0       	rjmp	.+6      	; 0x830 <vfprintf+0x34e>
 82a:	88 e7       	ldi	r24, 0x78	; 120
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	02 c0       	rjmp	.+4      	; 0x834 <vfprintf+0x352>
 830:	88 e5       	ldi	r24, 0x58	; 88
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	b6 01       	movw	r22, r12
 836:	0c c0       	rjmp	.+24     	; 0x850 <vfprintf+0x36e>
 838:	8a 2d       	mov	r24, r10
 83a:	86 78       	andi	r24, 0x86	; 134
 83c:	59 f0       	breq	.+22     	; 0x854 <vfprintf+0x372>
 83e:	a1 fe       	sbrs	r10, 1
 840:	02 c0       	rjmp	.+4      	; 0x846 <vfprintf+0x364>
 842:	8b e2       	ldi	r24, 0x2B	; 43
 844:	01 c0       	rjmp	.+2      	; 0x848 <vfprintf+0x366>
 846:	80 e2       	ldi	r24, 0x20	; 32
 848:	a7 fc       	sbrc	r10, 7
 84a:	8d e2       	ldi	r24, 0x2D	; 45
 84c:	b6 01       	movw	r22, r12
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fputc>
 854:	89 14       	cp	r8, r9
 856:	38 f4       	brcc	.+14     	; 0x866 <vfprintf+0x384>
 858:	b6 01       	movw	r22, r12
 85a:	80 e3       	ldi	r24, 0x30	; 48
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fputc>
 862:	9a 94       	dec	r9
 864:	f7 cf       	rjmp	.-18     	; 0x854 <vfprintf+0x372>
 866:	8a 94       	dec	r8
 868:	f3 01       	movw	r30, r6
 86a:	e8 0d       	add	r30, r8
 86c:	f1 1d       	adc	r31, r1
 86e:	80 81       	ld	r24, Z
 870:	b6 01       	movw	r22, r12
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fputc>
 878:	81 10       	cpse	r8, r1
 87a:	f5 cf       	rjmp	.-22     	; 0x866 <vfprintf+0x384>
 87c:	22 20       	and	r2, r2
 87e:	09 f4       	brne	.+2      	; 0x882 <vfprintf+0x3a0>
 880:	42 ce       	rjmp	.-892    	; 0x506 <vfprintf+0x24>
 882:	b6 01       	movw	r22, r12
 884:	80 e2       	ldi	r24, 0x20	; 32
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fputc>
 88c:	2a 94       	dec	r2
 88e:	f6 cf       	rjmp	.-20     	; 0x87c <vfprintf+0x39a>
 890:	f6 01       	movw	r30, r12
 892:	86 81       	ldd	r24, Z+6	; 0x06
 894:	97 81       	ldd	r25, Z+7	; 0x07
 896:	02 c0       	rjmp	.+4      	; 0x89c <vfprintf+0x3ba>
 898:	8f ef       	ldi	r24, 0xFF	; 255
 89a:	9f ef       	ldi	r25, 0xFF	; 255
 89c:	2b 96       	adiw	r28, 0x0b	; 11
 89e:	e2 e1       	ldi	r30, 0x12	; 18
 8a0:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__epilogue_restores__>

000008a4 <strnlen_P>:
 8a4:	fc 01       	movw	r30, r24
 8a6:	05 90       	lpm	r0, Z+
 8a8:	61 50       	subi	r22, 0x01	; 1
 8aa:	70 40       	sbci	r23, 0x00	; 0
 8ac:	01 10       	cpse	r0, r1
 8ae:	d8 f7       	brcc	.-10     	; 0x8a6 <strnlen_P+0x2>
 8b0:	80 95       	com	r24
 8b2:	90 95       	com	r25
 8b4:	8e 0f       	add	r24, r30
 8b6:	9f 1f       	adc	r25, r31
 8b8:	08 95       	ret

000008ba <strnlen>:
 8ba:	fc 01       	movw	r30, r24
 8bc:	61 50       	subi	r22, 0x01	; 1
 8be:	70 40       	sbci	r23, 0x00	; 0
 8c0:	01 90       	ld	r0, Z+
 8c2:	01 10       	cpse	r0, r1
 8c4:	d8 f7       	brcc	.-10     	; 0x8bc <strnlen+0x2>
 8c6:	80 95       	com	r24
 8c8:	90 95       	com	r25
 8ca:	8e 0f       	add	r24, r30
 8cc:	9f 1f       	adc	r25, r31
 8ce:	08 95       	ret

000008d0 <fputc>:
 8d0:	0f 93       	push	r16
 8d2:	1f 93       	push	r17
 8d4:	cf 93       	push	r28
 8d6:	df 93       	push	r29
 8d8:	fb 01       	movw	r30, r22
 8da:	23 81       	ldd	r18, Z+3	; 0x03
 8dc:	21 fd       	sbrc	r18, 1
 8de:	03 c0       	rjmp	.+6      	; 0x8e6 <fputc+0x16>
 8e0:	8f ef       	ldi	r24, 0xFF	; 255
 8e2:	9f ef       	ldi	r25, 0xFF	; 255
 8e4:	2c c0       	rjmp	.+88     	; 0x93e <fputc+0x6e>
 8e6:	22 ff       	sbrs	r18, 2
 8e8:	16 c0       	rjmp	.+44     	; 0x916 <fputc+0x46>
 8ea:	46 81       	ldd	r20, Z+6	; 0x06
 8ec:	57 81       	ldd	r21, Z+7	; 0x07
 8ee:	24 81       	ldd	r18, Z+4	; 0x04
 8f0:	35 81       	ldd	r19, Z+5	; 0x05
 8f2:	42 17       	cp	r20, r18
 8f4:	53 07       	cpc	r21, r19
 8f6:	44 f4       	brge	.+16     	; 0x908 <fputc+0x38>
 8f8:	a0 81       	ld	r26, Z
 8fa:	b1 81       	ldd	r27, Z+1	; 0x01
 8fc:	9d 01       	movw	r18, r26
 8fe:	2f 5f       	subi	r18, 0xFF	; 255
 900:	3f 4f       	sbci	r19, 0xFF	; 255
 902:	31 83       	std	Z+1, r19	; 0x01
 904:	20 83       	st	Z, r18
 906:	8c 93       	st	X, r24
 908:	26 81       	ldd	r18, Z+6	; 0x06
 90a:	37 81       	ldd	r19, Z+7	; 0x07
 90c:	2f 5f       	subi	r18, 0xFF	; 255
 90e:	3f 4f       	sbci	r19, 0xFF	; 255
 910:	37 83       	std	Z+7, r19	; 0x07
 912:	26 83       	std	Z+6, r18	; 0x06
 914:	14 c0       	rjmp	.+40     	; 0x93e <fputc+0x6e>
 916:	8b 01       	movw	r16, r22
 918:	ec 01       	movw	r28, r24
 91a:	fb 01       	movw	r30, r22
 91c:	00 84       	ldd	r0, Z+8	; 0x08
 91e:	f1 85       	ldd	r31, Z+9	; 0x09
 920:	e0 2d       	mov	r30, r0
 922:	09 95       	icall
 924:	89 2b       	or	r24, r25
 926:	e1 f6       	brne	.-72     	; 0x8e0 <fputc+0x10>
 928:	d8 01       	movw	r26, r16
 92a:	16 96       	adiw	r26, 0x06	; 6
 92c:	8d 91       	ld	r24, X+
 92e:	9c 91       	ld	r25, X
 930:	17 97       	sbiw	r26, 0x07	; 7
 932:	01 96       	adiw	r24, 0x01	; 1
 934:	17 96       	adiw	r26, 0x07	; 7
 936:	9c 93       	st	X, r25
 938:	8e 93       	st	-X, r24
 93a:	16 97       	sbiw	r26, 0x06	; 6
 93c:	ce 01       	movw	r24, r28
 93e:	df 91       	pop	r29
 940:	cf 91       	pop	r28
 942:	1f 91       	pop	r17
 944:	0f 91       	pop	r16
 946:	08 95       	ret

00000948 <__ultoa_invert>:
 948:	fa 01       	movw	r30, r20
 94a:	aa 27       	eor	r26, r26
 94c:	28 30       	cpi	r18, 0x08	; 8
 94e:	51 f1       	breq	.+84     	; 0x9a4 <__ultoa_invert+0x5c>
 950:	20 31       	cpi	r18, 0x10	; 16
 952:	81 f1       	breq	.+96     	; 0x9b4 <__ultoa_invert+0x6c>
 954:	e8 94       	clt
 956:	6f 93       	push	r22
 958:	6e 7f       	andi	r22, 0xFE	; 254
 95a:	6e 5f       	subi	r22, 0xFE	; 254
 95c:	7f 4f       	sbci	r23, 0xFF	; 255
 95e:	8f 4f       	sbci	r24, 0xFF	; 255
 960:	9f 4f       	sbci	r25, 0xFF	; 255
 962:	af 4f       	sbci	r26, 0xFF	; 255
 964:	b1 e0       	ldi	r27, 0x01	; 1
 966:	3e d0       	rcall	.+124    	; 0x9e4 <__ultoa_invert+0x9c>
 968:	b4 e0       	ldi	r27, 0x04	; 4
 96a:	3c d0       	rcall	.+120    	; 0x9e4 <__ultoa_invert+0x9c>
 96c:	67 0f       	add	r22, r23
 96e:	78 1f       	adc	r23, r24
 970:	89 1f       	adc	r24, r25
 972:	9a 1f       	adc	r25, r26
 974:	a1 1d       	adc	r26, r1
 976:	68 0f       	add	r22, r24
 978:	79 1f       	adc	r23, r25
 97a:	8a 1f       	adc	r24, r26
 97c:	91 1d       	adc	r25, r1
 97e:	a1 1d       	adc	r26, r1
 980:	6a 0f       	add	r22, r26
 982:	71 1d       	adc	r23, r1
 984:	81 1d       	adc	r24, r1
 986:	91 1d       	adc	r25, r1
 988:	a1 1d       	adc	r26, r1
 98a:	20 d0       	rcall	.+64     	; 0x9cc <__ultoa_invert+0x84>
 98c:	09 f4       	brne	.+2      	; 0x990 <__ultoa_invert+0x48>
 98e:	68 94       	set
 990:	3f 91       	pop	r19
 992:	2a e0       	ldi	r18, 0x0A	; 10
 994:	26 9f       	mul	r18, r22
 996:	11 24       	eor	r1, r1
 998:	30 19       	sub	r19, r0
 99a:	30 5d       	subi	r19, 0xD0	; 208
 99c:	31 93       	st	Z+, r19
 99e:	de f6       	brtc	.-74     	; 0x956 <__ultoa_invert+0xe>
 9a0:	cf 01       	movw	r24, r30
 9a2:	08 95       	ret
 9a4:	46 2f       	mov	r20, r22
 9a6:	47 70       	andi	r20, 0x07	; 7
 9a8:	40 5d       	subi	r20, 0xD0	; 208
 9aa:	41 93       	st	Z+, r20
 9ac:	b3 e0       	ldi	r27, 0x03	; 3
 9ae:	0f d0       	rcall	.+30     	; 0x9ce <__ultoa_invert+0x86>
 9b0:	c9 f7       	brne	.-14     	; 0x9a4 <__ultoa_invert+0x5c>
 9b2:	f6 cf       	rjmp	.-20     	; 0x9a0 <__ultoa_invert+0x58>
 9b4:	46 2f       	mov	r20, r22
 9b6:	4f 70       	andi	r20, 0x0F	; 15
 9b8:	40 5d       	subi	r20, 0xD0	; 208
 9ba:	4a 33       	cpi	r20, 0x3A	; 58
 9bc:	18 f0       	brcs	.+6      	; 0x9c4 <__ultoa_invert+0x7c>
 9be:	49 5d       	subi	r20, 0xD9	; 217
 9c0:	31 fd       	sbrc	r19, 1
 9c2:	40 52       	subi	r20, 0x20	; 32
 9c4:	41 93       	st	Z+, r20
 9c6:	02 d0       	rcall	.+4      	; 0x9cc <__ultoa_invert+0x84>
 9c8:	a9 f7       	brne	.-22     	; 0x9b4 <__ultoa_invert+0x6c>
 9ca:	ea cf       	rjmp	.-44     	; 0x9a0 <__ultoa_invert+0x58>
 9cc:	b4 e0       	ldi	r27, 0x04	; 4
 9ce:	a6 95       	lsr	r26
 9d0:	97 95       	ror	r25
 9d2:	87 95       	ror	r24
 9d4:	77 95       	ror	r23
 9d6:	67 95       	ror	r22
 9d8:	ba 95       	dec	r27
 9da:	c9 f7       	brne	.-14     	; 0x9ce <__ultoa_invert+0x86>
 9dc:	00 97       	sbiw	r24, 0x00	; 0
 9de:	61 05       	cpc	r22, r1
 9e0:	71 05       	cpc	r23, r1
 9e2:	08 95       	ret
 9e4:	9b 01       	movw	r18, r22
 9e6:	ac 01       	movw	r20, r24
 9e8:	0a 2e       	mov	r0, r26
 9ea:	06 94       	lsr	r0
 9ec:	57 95       	ror	r21
 9ee:	47 95       	ror	r20
 9f0:	37 95       	ror	r19
 9f2:	27 95       	ror	r18
 9f4:	ba 95       	dec	r27
 9f6:	c9 f7       	brne	.-14     	; 0x9ea <__ultoa_invert+0xa2>
 9f8:	62 0f       	add	r22, r18
 9fa:	73 1f       	adc	r23, r19
 9fc:	84 1f       	adc	r24, r20
 9fe:	95 1f       	adc	r25, r21
 a00:	a0 1d       	adc	r26, r0
 a02:	08 95       	ret

00000a04 <__prologue_saves__>:
 a04:	2f 92       	push	r2
 a06:	3f 92       	push	r3
 a08:	4f 92       	push	r4
 a0a:	5f 92       	push	r5
 a0c:	6f 92       	push	r6
 a0e:	7f 92       	push	r7
 a10:	8f 92       	push	r8
 a12:	9f 92       	push	r9
 a14:	af 92       	push	r10
 a16:	bf 92       	push	r11
 a18:	cf 92       	push	r12
 a1a:	df 92       	push	r13
 a1c:	ef 92       	push	r14
 a1e:	ff 92       	push	r15
 a20:	0f 93       	push	r16
 a22:	1f 93       	push	r17
 a24:	cf 93       	push	r28
 a26:	df 93       	push	r29
 a28:	cd b7       	in	r28, 0x3d	; 61
 a2a:	de b7       	in	r29, 0x3e	; 62
 a2c:	ca 1b       	sub	r28, r26
 a2e:	db 0b       	sbc	r29, r27
 a30:	0f b6       	in	r0, 0x3f	; 63
 a32:	f8 94       	cli
 a34:	de bf       	out	0x3e, r29	; 62
 a36:	0f be       	out	0x3f, r0	; 63
 a38:	cd bf       	out	0x3d, r28	; 61
 a3a:	09 94       	ijmp

00000a3c <__epilogue_restores__>:
 a3c:	2a 88       	ldd	r2, Y+18	; 0x12
 a3e:	39 88       	ldd	r3, Y+17	; 0x11
 a40:	48 88       	ldd	r4, Y+16	; 0x10
 a42:	5f 84       	ldd	r5, Y+15	; 0x0f
 a44:	6e 84       	ldd	r6, Y+14	; 0x0e
 a46:	7d 84       	ldd	r7, Y+13	; 0x0d
 a48:	8c 84       	ldd	r8, Y+12	; 0x0c
 a4a:	9b 84       	ldd	r9, Y+11	; 0x0b
 a4c:	aa 84       	ldd	r10, Y+10	; 0x0a
 a4e:	b9 84       	ldd	r11, Y+9	; 0x09
 a50:	c8 84       	ldd	r12, Y+8	; 0x08
 a52:	df 80       	ldd	r13, Y+7	; 0x07
 a54:	ee 80       	ldd	r14, Y+6	; 0x06
 a56:	fd 80       	ldd	r15, Y+5	; 0x05
 a58:	0c 81       	ldd	r16, Y+4	; 0x04
 a5a:	1b 81       	ldd	r17, Y+3	; 0x03
 a5c:	aa 81       	ldd	r26, Y+2	; 0x02
 a5e:	b9 81       	ldd	r27, Y+1	; 0x01
 a60:	ce 0f       	add	r28, r30
 a62:	d1 1d       	adc	r29, r1
 a64:	0f b6       	in	r0, 0x3f	; 63
 a66:	f8 94       	cli
 a68:	de bf       	out	0x3e, r29	; 62
 a6a:	0f be       	out	0x3f, r0	; 63
 a6c:	cd bf       	out	0x3d, r28	; 61
 a6e:	ed 01       	movw	r28, r26
 a70:	08 95       	ret

00000a72 <_exit>:
 a72:	f8 94       	cli

00000a74 <__stop_program>:
 a74:	ff cf       	rjmp	.-2      	; 0xa74 <__stop_program>
